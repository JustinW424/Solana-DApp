var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Button, Dialog, DialogContent, DialogTitle, IconButton, List, ListItem, makeStyles, } from '@material-ui/core';
import CloseIcon from '@material-ui/icons/Close';
import { useWallet } from '@solana/wallet-adapter-react';
import React, { useCallback } from 'react';
import { useWalletDialog } from './useWalletDialog';
import { WalletIcon } from './WalletIcon';
const useStyles = makeStyles((theme) => ({
    root: {
        '& .MuiDialog-paper': {
            width: theme.spacing(40),
            margin: 0,
        },
        '& .MuiDialogTitle-root': {
            backgroundColor: theme.palette.primary.main,
            '& .MuiTypography-root': {
                display: 'flex',
                justifyContent: 'space-between',
                lineHeight: theme.spacing(5) + 'px',
            },
            '& .MuiIconButton-root': {
                flexShrink: 1,
                padding: theme.spacing(),
                marginRight: theme.spacing(-1),
                color: theme.palette.grey[500],
            },
        },
        '& .MuiDialogContent-root': {
            padding: 0,
            '& .MuiList-root': {
                padding: 0,
            },
            '& .MuiListItem-root': {
                boxShadow: 'inset 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.1)',
                '&:hover': {
                    boxShadow: 'inset 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.1)' + ', 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.05)',
                },
                padding: 0,
                '& .MuiButton-endIcon': {
                    margin: 0,
                },
                '& .MuiButton-root': {
                    flexGrow: 1,
                    justifyContent: 'space-between',
                    padding: theme.spacing(1, 3),
                    borderRadius: undefined,
                    fontSize: '1rem',
                    fontWeight: 300,
                },
            },
        },
    },
}));
export const WalletDialog = (_a) => {
    var { title = 'Select your wallet', onClose } = _a, props = __rest(_a, ["title", "onClose"]);
    const styles = useStyles();
    const { wallets, select } = useWallet();
    const { open, setOpen } = useWalletDialog();
    const handleClose = useCallback((event, reason) => {
        if (onClose)
            onClose(event, reason);
        if (!event.defaultPrevented)
            setOpen(false);
    }, [setOpen, onClose]);
    return (React.createElement(Dialog, Object.assign({ open: open, onClose: handleClose, className: styles.root }, props),
        React.createElement(DialogTitle, null,
            title,
            React.createElement(IconButton, { onClick: handleClose },
                React.createElement(CloseIcon, null))),
        React.createElement(DialogContent, null,
            React.createElement(List, null, wallets.map((wallet) => (React.createElement(ListItem, { key: wallet.name },
                React.createElement(Button, { onClick: (event) => {
                        select(wallet.name);
                        handleClose(event);
                    }, endIcon: React.createElement(WalletIcon, { wallet: wallet }) }, wallet.name))))))));
};
//# sourceMappingURL=WalletDialog.js.map