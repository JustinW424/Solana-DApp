{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeWallet = exports.Provider = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst simulate_transaction_1 = require(\"./simulate-transaction\");\n\nclass Provider {\n  constructor(connection, wallet, opts) {\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n  }\n\n  static defaultOptions() {\n    return {\n      preflightCommitment: 'recent',\n      commitment: 'recent'\n    };\n  }\n\n  static local(url, opts) {\n    opts = opts || Provider.defaultOptions();\n    const connection = new web3_js_1.Connection(url || 'http://localhost:8899', opts.preflightCommitment);\n    const wallet = NodeWallet.local();\n    return new Provider(connection, wallet, opts);\n  }\n\n  async send(tx, signers, opts) {\n    var _a;\n\n    if (signers === undefined) {\n      signers = [];\n    }\n\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    const signerKps = signers.filter(s => s !== undefined);\n    const signerPubkeys = [this.wallet.publicKey].concat(signerKps.map(s => s.publicKey));\n    tx.setSigners(...signerPubkeys);\n    tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n    await this.wallet.signTransaction(tx);\n    signerKps.forEach(kp => {\n      tx.partialSign(kp);\n    });\n    const rawTx = tx.serialize();\n\n    try {\n      const txId = await web3_js_1.sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n      return txId;\n    } catch (err) {\n      console.error('Transaction failed. Simulating for logs...');\n      const r = await simulate_transaction_1.simulateTransaction(this.connection, tx, (_a = opts.commitment) !== null && _a !== void 0 ? _a : 'recent');\n      console.error(r);\n      throw err;\n    }\n  }\n\n  async sendAll(reqs, opts) {\n    var _a;\n\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n    let txs = reqs.map(r => {\n      let tx = r.tx;\n      let signers = r.signers;\n\n      if (signers === undefined) {\n        signers = [];\n      }\n\n      const signerKps = signers.filter(s => s !== undefined);\n      const signerPubkeys = [this.wallet.publicKey].concat(signerKps.map(s => s.publicKey));\n      tx.setSigners(...signerPubkeys);\n      tx.recentBlockhash = blockhash.blockhash;\n      signerKps.forEach(kp => {\n        tx.partialSign(kp);\n      });\n      return tx;\n    });\n    const signedTxs = await this.wallet.signAllTransactions(txs);\n    const sigs = [];\n\n    for (let k = 0; k < txs.length; k += 1) {\n      const tx = signedTxs[k];\n      const rawTx = tx.serialize();\n\n      try {\n        sigs.push(await web3_js_1.sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n      } catch (err) {\n        console.error('Transaction failed. Simulating for logs...');\n        const r = await simulate_transaction_1.simulateTransaction(this.connection, tx, (_a = opts.commitment) !== null && _a !== void 0 ? _a : 'recent');\n        console.error(r);\n        throw err;\n      }\n    }\n\n    return sigs;\n  }\n\n}\n\nexports.Provider = Provider;\n\nclass NodeWallet {\n  constructor(payer) {\n    this.payer = payer;\n  }\n\n  static local() {\n    const payer = new web3_js_1.Account(Buffer.from(JSON.parse(require('fs').readFileSync(require('os').homedir() + '/.config/solana/id.json', {\n      encoding: 'utf-8'\n    }))));\n    return new NodeWallet(payer);\n  }\n\n  async signTransaction(tx) {\n    tx.partialSign(this.payer);\n    return tx;\n  }\n\n  async signAllTransactions(txs) {\n    return txs.map(t => {\n      t.partialSign(this.payer);\n      return t;\n    });\n  }\n\n  get publicKey() {\n    return this.payer.publicKey;\n  }\n\n}\n\nexports.NodeWallet = NodeWallet;","map":{"version":3,"sources":["../../src/provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeWallet = exports.Provider = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst simulate_transaction_1 = require(\"./simulate-transaction\");\nclass Provider {\n    constructor(connection, wallet, opts) {\n        this.connection = connection;\n        this.wallet = wallet;\n        this.opts = opts;\n    }\n    static defaultOptions() {\n        return {\n            preflightCommitment: 'recent',\n            commitment: 'recent',\n        };\n    }\n    static local(url, opts) {\n        opts = opts || Provider.defaultOptions();\n        const connection = new web3_js_1.Connection(url || 'http://localhost:8899', opts.preflightCommitment);\n        const wallet = NodeWallet.local();\n        return new Provider(connection, wallet, opts);\n    }\n    async send(tx, signers, opts) {\n        var _a;\n        if (signers === undefined) {\n            signers = [];\n        }\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const signerKps = signers.filter(s => s !== undefined);\n        const signerPubkeys = [this.wallet.publicKey].concat(signerKps.map(s => s.publicKey));\n        tx.setSigners(...signerPubkeys);\n        tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n        await this.wallet.signTransaction(tx);\n        signerKps.forEach(kp => {\n            tx.partialSign(kp);\n        });\n        const rawTx = tx.serialize();\n        try {\n            const txId = await web3_js_1.sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n            return txId;\n        }\n        catch (err) {\n            console.error('Transaction failed. Simulating for logs...');\n            const r = await simulate_transaction_1.simulateTransaction(this.connection, tx, (_a = opts.commitment) !== null && _a !== void 0 ? _a : 'recent');\n            console.error(r);\n            throw err;\n        }\n    }\n    async sendAll(reqs, opts) {\n        var _a;\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n        let txs = reqs.map(r => {\n            let tx = r.tx;\n            let signers = r.signers;\n            if (signers === undefined) {\n                signers = [];\n            }\n            const signerKps = signers.filter(s => s !== undefined);\n            const signerPubkeys = [this.wallet.publicKey].concat(signerKps.map(s => s.publicKey));\n            tx.setSigners(...signerPubkeys);\n            tx.recentBlockhash = blockhash.blockhash;\n            signerKps.forEach(kp => {\n                tx.partialSign(kp);\n            });\n            return tx;\n        });\n        const signedTxs = await this.wallet.signAllTransactions(txs);\n        const sigs = [];\n        for (let k = 0; k < txs.length; k += 1) {\n            const tx = signedTxs[k];\n            const rawTx = tx.serialize();\n            try {\n                sigs.push(await web3_js_1.sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n            }\n            catch (err) {\n                console.error('Transaction failed. Simulating for logs...');\n                const r = await simulate_transaction_1.simulateTransaction(this.connection, tx, (_a = opts.commitment) !== null && _a !== void 0 ? _a : 'recent');\n                console.error(r);\n                throw err;\n            }\n        }\n        return sigs;\n    }\n}\nexports.Provider = Provider;\nclass NodeWallet {\n    constructor(payer) {\n        this.payer = payer;\n    }\n    static local() {\n        const payer = new web3_js_1.Account(Buffer.from(JSON.parse(require('fs').readFileSync(require('os').homedir() + '/.config/solana/id.json', {\n            encoding: 'utf-8',\n        }))));\n        return new NodeWallet(payer);\n    }\n    async signTransaction(tx) {\n        tx.partialSign(this.payer);\n        return tx;\n    }\n    async signAllTransactions(txs) {\n        return txs.map(t => {\n            t.partialSign(this.payer);\n            return t;\n        });\n    }\n    get publicKey() {\n        return this.payer.publicKey;\n    }\n}\nexports.NodeWallet = NodeWallet;\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"script"}