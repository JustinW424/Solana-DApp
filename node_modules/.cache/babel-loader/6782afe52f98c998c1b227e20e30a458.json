{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\components\\\\lockups\\\\VestingAccountCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChartistGraph from 'react-chartist';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport { FixedScaleAxis, Interpolation } from 'chartist';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '@material-ui/core/Card';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Collapse from '@material-ui/core/Collapse';\nimport { SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { useWallet } from '../common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { withTx } from '../../components/common/Notification';\nimport { ActionType } from '../../store/actions';\nimport { getImage } from '../../components/common/RegistrarSelect';\nimport { useTokenInfos, toDisplay, toDisplayLabel } from '../../utils/tokens';\nimport { vestingSigner, availableForWithdrawal as _availableForWithdrawal } from '../../utils/lockup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VestingAccountCard(props) {\n  _s();\n\n  const {\n    vesting,\n    network\n  } = props;\n  const {\n    lockupClient,\n    registryClient\n  } = useWallet();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const tokenInfos = useTokenInfos();\n  const dispatch = useDispatch();\n  const {\n    accounts,\n    member,\n    mintAccount\n  } = useSelector(state => {\n    return {\n      accounts: state.accounts,\n      member: state.registry.member ? {\n        publicKey: state.registry.member,\n        account: state.accounts[state.registry.member.toString()]\n      } : undefined,\n      mintAccount: state.accounts[vesting.account.mint.toString()]\n    };\n  });\n  const [expanded, setExpanded] = useState(false);\n  const [hover, setHover] = useState(false); // Whitelisted mints only for now.\n\n  const isCustomMint = false;\n  let mint = accounts[vesting.account.mint.toString()];\n  const displayFn = mint ? input => {\n    return toDisplay(input, mint.decimals);\n  } : input => input.toString();\n  const outstandingLabel = `${displayFn(vesting.account.outstanding)} ${toDisplayLabel(vesting.account.mint)}`;\n  const startTs = vesting.account.startTs;\n  const endTs = vesting.account.endTs;\n  const tsOverflow = endTs.sub(startTs).mod(vesting.account.periodCount);\n  const shiftedStartTs = startTs.sub(tsOverflow);\n  const period = endTs.sub(shiftedStartTs).div(vesting.account.periodCount); // Make the horizontal axis evenly spaced.\n  //\n  // Vesting dates assuming we stretch the start date back in time (so that the\n  // periods are of even length).\n\n  const vestingDates = [...Array(vesting.account.periodCount.toNumber() + 1)].map((_, idx) => {\n    return formatDate(new Date((shiftedStartTs.toNumber() + idx * period.toNumber()) * 1000));\n  }); // Now push the start window forward to the real start date, making the first period shorter.\n\n  vestingDates[0] = formatDate(new Date(startTs.toNumber() * 1000)); // Now do the same thing on the vertical axis.\n\n  const rewardOverflow = vesting.account.startBalance.mod(vesting.account.periodCount);\n  const rewardPerPeriod = vesting.account.startBalance.sub(rewardOverflow).div(vesting.account.periodCount).toNumber();\n  const cumulativeVesting = [...Array(vestingDates.length)].map(() => 0);\n  cumulativeVesting[1] = rewardPerPeriod + rewardOverflow.toNumber();\n\n  for (let k = 2; k < cumulativeVesting.length; k += 1) {\n    cumulativeVesting[k] = cumulativeVesting[k - 1] + rewardPerPeriod;\n  }\n\n  const startLabel = formatDate(new Date(vesting.account.startTs.toNumber() * 1000));\n  const endLabel = formatDate(new Date(vesting.account.endTs.toNumber() * 1000));\n  const urlSuffix = `?cluster=${network.explorerClusterSuffix}`;\n  const [availableForWithdrawal, setAvailableForWithdrawal] = useState(null);\n  const [withdrawalAccount, setWithdrawalAccount] = useState(null);\n  useEffect(() => {\n    _availableForWithdrawal(lockupClient, vesting.publicKey).then(amount => {\n      setAvailableForWithdrawal(amount);\n    }).catch(err => {\n      console.error(err);\n      enqueueSnackbar(`Error fetching available for withdrawal: ${err.toString()}`, {\n        variant: 'error'\n      });\n    });\n  }, [lockupClient, vesting, enqueueSnackbar]);\n  const snack = useSnackbar();\n  const withdrawEnabled = withdrawalAccount !== null && availableForWithdrawal !== null && availableForWithdrawal.gtn(0);\n\n  const withdraw = async () => {\n    await withTx(snack, 'Withdrawing locked tokens', 'Tokens unlocked', async () => {\n      const remainingAccounts = (() => {\n        if (vesting.account.realizor) {\n          if (!member) {\n            // Should never be thrown.\n            throw new Error('Member account not found');\n          }\n\n          return [{\n            pubkey: registryClient.programId,\n            isSigner: false,\n            isWritable: false\n          }, {\n            pubkey: member.publicKey,\n            isSigner: false,\n            isWritable: false\n          }, {\n            pubkey: member.account.balances.spt,\n            isSigner: false,\n            isWritable: false\n          }, {\n            pubkey: member.account.balancesLocked.spt,\n            isSigner: false,\n            isWritable: false\n          }];\n        } else {\n          return undefined;\n        }\n      })();\n\n      const tx = await lockupClient.rpc.withdraw(availableForWithdrawal, {\n        accounts: {\n          vesting: vesting.publicKey,\n          beneficiary: lockupClient.provider.wallet.publicKey,\n          token: withdrawalAccount,\n          vault: vesting.account.vault,\n          vestingSigner: (await vestingSigner(lockupClient.programId, vesting.publicKey)).publicKey,\n          tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n          clock: SYSVAR_CLOCK_PUBKEY\n        },\n        remainingAccounts\n      });\n      const newVesting = await lockupClient.account.vesting(vesting.publicKey);\n      dispatch({\n        type: ActionType.LockupUpdateVesting,\n        item: {\n          vesting: {\n            publicKey: vesting.publicKey,\n            account: newVesting\n          }\n        }\n      });\n      return tx;\n    });\n  };\n\n  const rows = [{\n    field: 'Projected unlock',\n    value: availableForWithdrawal === null ? null : displayFn(availableForWithdrawal)\n  }, {\n    field: 'Locked outstanding',\n    value: displayFn(vesting.account.outstanding)\n  }, {\n    field: 'Current balance',\n    value: displayFn(vesting.account.outstanding.sub(vesting.account.whitelistOwned))\n  }, {\n    field: 'Initial lockup',\n    value: displayFn(vesting.account.startBalance)\n  }, {\n    field: 'Amount unlocked',\n    value: displayFn(vesting.account.startBalance.sub(vesting.account.outstanding))\n  }, {\n    field: 'Whitelist owned',\n    value: displayFn(vesting.account.whitelistOwned)\n  }, {\n    field: 'Period count',\n    value: vesting.account.periodCount.toString()\n  }, {\n    field: 'Start timestamp',\n    value: `${new Date(vesting.account.startTs.toNumber() * 1000).toLocaleString()} (${vesting.account.startTs.toString()})`\n  }, {\n    field: 'End timestamp',\n    value: `${new Date(vesting.account.endTs.toNumber() * 1000).toLocaleString()} (${vesting.account.endTs.toString()})`\n  }, {\n    field: 'Vault',\n    value: vesting.account.vault.toString()\n  }, {\n    field: 'Realizer program',\n    value: vesting.account.realizor ? vesting.account.realizor.program.toString() : 'None'\n  }, {\n    field: 'Realizer metadata',\n    value: vesting.account.realizor ? vesting.account.realizor.metadata.toString() : 'None'\n  }, {\n    field: 'Grantor',\n    value: vesting.account.grantor.toString()\n  }];\n  return /*#__PURE__*/_jsxDEV(Card, {\n    onMouseOver: () => setHover(true),\n    onMouseOut: () => setHover(false),\n    style: {\n      marginTop: '24px',\n      cursor: hover ? 'pointer' : 'default'\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      style: {\n        paddingBottom: '16px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ListItem, {\n        onClick: () => setExpanded(!expanded),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            children: getImage(tokenInfos.get(vesting.account.mint.toString()), {\n              marginRight: '16px',\n              width: '56px'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: /*#__PURE__*/_jsxDEV(Link, {\n              href: `https://explorer.solana.com/account/${vesting.publicKey.toBase58()}` + urlSuffix,\n              target: \"_blank\",\n              rel: \"noopener\",\n              children: vesting.publicKey.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 17\n            }, this),\n            secondary: `${startLabel}, ${endLabel} | ${vesting.account.periodCount.toNumber()} periods`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: '6px',\n              color: 'rgba(0, 0, 0, 0.54)',\n              display: 'flex',\n              justifyContent: 'space-between',\n              flexDirection: 'column',\n              maxWidth: '200px'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              style: {\n                overflow: 'hidden',\n                whiteSpace: 'nowrap'\n              },\n              variant: \"body1\",\n              children: outstandingLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: expanded,\n        timeout: \"auto\",\n        unmountOnExit: true,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this), vestingDates.length <= 15 ? /*#__PURE__*/_jsxDEV(ChartistGraph, {\n          data: {\n            labels: vestingDates,\n            series: [cumulativeVesting]\n          },\n          options: {\n            axisY: {\n              type: FixedScaleAxis,\n              low: 0,\n              high: cumulativeVesting[cumulativeVesting.length - 1],\n              ticks: cumulativeVesting\n            },\n            lineSmooth: Interpolation.step(),\n            height: 400\n          },\n          type: 'Line'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            fontWeight: 'bold'\n          },\n          children: \"A graph isn't available for this account.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [isCustomMint && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: '15px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Note: custom mints (i.e. not SRM/MSRM) display raw token amounts without decimals.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Table, {\n            children: /*#__PURE__*/_jsxDEV(TableBody, {\n              children: rows.map(r => {\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: r.field\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 378,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: r.value === null ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                      style: {\n                        height: '20px',\n                        width: '20px',\n                        padding: 0\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 381,\n                      columnNumber: 27\n                    }, this) : r.value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 379,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              marginTop: '15px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(OwnedTokenAccountsSelect, {\n              decimals: mintAccount ? mintAccount.decimals : undefined,\n              mint: vesting.account.mint,\n              onChange: f => setWithdrawalAccount(f)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginLeft: '20px',\n                width: '191px'\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                style: {\n                  fontSize: '12px'\n                },\n                color: \"primary\",\n                disabled: !withdrawEnabled,\n                variant: \"contained\",\n                onClick: () => withdraw().catch(err => {\n                  let msg = err.toString();\n\n                  if (msg && msg.split('custom program error: 0x78').length === 2) {\n                    msg = 'Unrealized rewards. Please unstake';\n                  }\n\n                  enqueueSnackbar(`Error withdrawing from vesting account: ${err.toString()}`, {\n                    variant: 'error'\n                  });\n                }),\n                children: \"Unlock tokens\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this)\n  }, vesting.publicKey.toString(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n} // TODO: locale format without minutes, hours, seconds?\n\n_s(VestingAccountCard, \"ok0e0LIXLVXDeoEUgC1etDjfimM=\", false, function () {\n  return [useWallet, useSnackbar, useTokenInfos, useDispatch, useSelector, useSnackbar];\n});\n\n_c = VestingAccountCard;\n\nfunction formatDate(d) {\n  return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"VestingAccountCard\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/components/lockups/VestingAccountCard.tsx"],"names":["React","useState","useEffect","ChartistGraph","useDispatch","useSelector","useSnackbar","FixedScaleAxis","Interpolation","CircularProgress","Card","ListItemIcon","CardContent","Button","Typography","ListItem","ListItemText","Link","Table","TableBody","TableCell","TableRow","Collapse","SYSVAR_CLOCK_PUBKEY","TokenInstructions","useWallet","OwnedTokenAccountsSelect","withTx","ActionType","getImage","useTokenInfos","toDisplay","toDisplayLabel","vestingSigner","availableForWithdrawal","_availableForWithdrawal","VestingAccountCard","props","vesting","network","lockupClient","registryClient","enqueueSnackbar","tokenInfos","dispatch","accounts","member","mintAccount","state","registry","publicKey","account","toString","undefined","mint","expanded","setExpanded","hover","setHover","isCustomMint","displayFn","input","decimals","outstandingLabel","outstanding","startTs","endTs","tsOverflow","sub","mod","periodCount","shiftedStartTs","period","div","vestingDates","Array","toNumber","map","_","idx","formatDate","Date","rewardOverflow","startBalance","rewardPerPeriod","cumulativeVesting","length","k","startLabel","endLabel","urlSuffix","explorerClusterSuffix","setAvailableForWithdrawal","withdrawalAccount","setWithdrawalAccount","then","amount","catch","err","console","error","variant","snack","withdrawEnabled","gtn","withdraw","remainingAccounts","realizor","Error","pubkey","programId","isSigner","isWritable","balances","spt","balancesLocked","tx","rpc","beneficiary","provider","wallet","token","vault","tokenProgram","TOKEN_PROGRAM_ID","clock","newVesting","type","LockupUpdateVesting","item","rows","field","value","whitelistOwned","toLocaleString","program","metadata","grantor","marginTop","cursor","paddingBottom","width","display","justifyContent","get","marginRight","toBase58","color","flexDirection","maxWidth","overflow","whiteSpace","labels","series","axisY","low","high","ticks","lineSmooth","step","height","textAlign","fontWeight","padding","r","f","marginLeft","fontSize","msg","split","d","getMonth","getDate","getFullYear"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChartistGraph from 'react-chartist';\nimport { useDispatch, useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport { FixedScaleAxis, IChartOptions, Interpolation } from 'chartist';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '@material-ui/core/Card';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Collapse from '@material-ui/core/Collapse';\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { ProgramAccount, State as StoreState } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport { useWallet } from '../common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { withTx } from '../../components/common/Notification';\nimport { ActionType } from '../../store/actions';\nimport { getImage } from '../../components/common/RegistrarSelect';\nimport { useTokenInfos, toDisplay, toDisplayLabel } from '../../utils/tokens';\nimport {\n  vestingSigner,\n  availableForWithdrawal as _availableForWithdrawal,\n} from '../../utils/lockup';\n\ntype VestingAccountCardProps = {\n  network: Network;\n  vesting: ProgramAccount;\n};\n\nexport default function VestingAccountCard(props: VestingAccountCardProps) {\n  const { vesting, network } = props;\n  const { lockupClient, registryClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const tokenInfos = useTokenInfos();\n  const dispatch = useDispatch();\n  const { accounts, member, mintAccount } = useSelector((state: StoreState) => {\n    return {\n      accounts: state.accounts,\n      member: state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined,\n      mintAccount: state.accounts[vesting.account.mint.toString()],\n    };\n  });\n  const [expanded, setExpanded] = useState(false);\n  const [hover, setHover] = useState(false);\n\n  // Whitelisted mints only for now.\n  const isCustomMint = false;\n\n  let mint = accounts[vesting.account.mint.toString()];\n  const displayFn = mint\n    ? (input: BN) => {\n        return toDisplay(input, mint.decimals);\n      }\n    : (input: BN) => input.toString();\n\n  const outstandingLabel = `${displayFn(\n    vesting.account.outstanding,\n  )} ${toDisplayLabel(vesting.account.mint)}`;\n  const startTs = vesting.account.startTs;\n  const endTs = vesting.account.endTs;\n\n  const tsOverflow = endTs.sub(startTs).mod(vesting.account.periodCount);\n  const shiftedStartTs = startTs.sub(tsOverflow);\n\n  const period = endTs.sub(shiftedStartTs).div(vesting.account.periodCount);\n\n  // Make the horizontal axis evenly spaced.\n  //\n  // Vesting dates assuming we stretch the start date back in time (so that the\n  // periods are of even length).\n  const vestingDates = [\n    ...Array(vesting.account.periodCount.toNumber() + 1),\n  ].map((_, idx) => {\n    return formatDate(\n      new Date((shiftedStartTs.toNumber() + idx * period.toNumber()) * 1000),\n    );\n  });\n  // Now push the start window forward to the real start date, making the first period shorter.\n  vestingDates[0] = formatDate(new Date(startTs.toNumber() * 1000));\n\n  // Now do the same thing on the vertical axis.\n  const rewardOverflow = vesting.account.startBalance.mod(\n    vesting.account.periodCount,\n  );\n  const rewardPerPeriod = vesting.account.startBalance\n    .sub(rewardOverflow)\n    .div(vesting.account.periodCount)\n    .toNumber();\n  const cumulativeVesting = [...Array(vestingDates.length)].map(() => 0);\n  cumulativeVesting[1] = rewardPerPeriod + rewardOverflow.toNumber();\n  for (let k = 2; k < cumulativeVesting.length; k += 1) {\n    cumulativeVesting[k] = cumulativeVesting[k - 1] + rewardPerPeriod;\n  }\n\n  const startLabel = formatDate(\n    new Date(vesting.account.startTs.toNumber() * 1000),\n  );\n  const endLabel = formatDate(\n    new Date(vesting.account.endTs.toNumber() * 1000),\n  );\n  const urlSuffix = `?cluster=${network.explorerClusterSuffix}`;\n\n  const [\n    availableForWithdrawal,\n    setAvailableForWithdrawal,\n  ] = useState<null | BN>(null);\n  const [withdrawalAccount, setWithdrawalAccount] = useState<null | PublicKey>(\n    null,\n  );\n\n  useEffect(() => {\n    _availableForWithdrawal(lockupClient, vesting.publicKey)\n      .then((amount: BN) => {\n        setAvailableForWithdrawal(amount);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        enqueueSnackbar(\n          `Error fetching available for withdrawal: ${err.toString()}`,\n          {\n            variant: 'error',\n          },\n        );\n      });\n  }, [lockupClient, vesting, enqueueSnackbar]);\n  const snack = useSnackbar();\n\n  const withdrawEnabled =\n    withdrawalAccount !== null &&\n    availableForWithdrawal !== null &&\n    availableForWithdrawal.gtn(0);\n  const withdraw = async () => {\n    await withTx(\n      snack,\n      'Withdrawing locked tokens',\n      'Tokens unlocked',\n      async () => {\n        const remainingAccounts = (() => {\n          if (vesting.account.realizor) {\n            if (!member) {\n              // Should never be thrown.\n              throw new Error('Member account not found');\n            }\n            return [\n              {\n                pubkey: registryClient.programId,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: member.publicKey, isSigner: false, isWritable: false },\n              {\n                pubkey: member.account.balances.spt,\n                isSigner: false,\n                isWritable: false,\n              },\n              {\n                pubkey: member.account.balancesLocked.spt,\n                isSigner: false,\n                isWritable: false,\n              },\n            ];\n          } else {\n            return undefined;\n          }\n        })();\n        const tx = await lockupClient.rpc.withdraw(availableForWithdrawal!, {\n          accounts: {\n            vesting: vesting.publicKey,\n            beneficiary: lockupClient.provider.wallet.publicKey,\n            token: withdrawalAccount!,\n            vault: vesting.account.vault,\n            vestingSigner: (\n              await vestingSigner(lockupClient.programId, vesting.publicKey)\n            ).publicKey,\n            tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n            clock: SYSVAR_CLOCK_PUBKEY,\n          },\n          remainingAccounts,\n        });\n        const newVesting = await lockupClient.account.vesting(\n          vesting.publicKey,\n        );\n        dispatch({\n          type: ActionType.LockupUpdateVesting,\n          item: {\n            vesting: {\n              publicKey: vesting.publicKey,\n              account: newVesting,\n            },\n          },\n        });\n        return tx;\n      },\n    );\n  };\n  const rows = [\n    {\n      field: 'Projected unlock',\n      value:\n        availableForWithdrawal === null\n          ? null\n          : displayFn(availableForWithdrawal!),\n    },\n    {\n      field: 'Locked outstanding',\n      value: displayFn(vesting.account.outstanding),\n    },\n    {\n      field: 'Current balance',\n      value: displayFn(\n        vesting.account.outstanding.sub(vesting.account.whitelistOwned),\n      ),\n    },\n    { field: 'Initial lockup', value: displayFn(vesting.account.startBalance) },\n    {\n      field: 'Amount unlocked',\n      value: displayFn(\n        vesting.account.startBalance.sub(vesting.account.outstanding),\n      ),\n    },\n    {\n      field: 'Whitelist owned',\n      value: displayFn(vesting.account.whitelistOwned),\n    },\n    { field: 'Period count', value: vesting.account.periodCount.toString() },\n    {\n      field: 'Start timestamp',\n      value: `${new Date(\n        vesting.account.startTs.toNumber() * 1000,\n      ).toLocaleString()} (${vesting.account.startTs.toString()})`,\n    },\n    {\n      field: 'End timestamp',\n      value: `${new Date(\n        vesting.account.endTs.toNumber() * 1000,\n      ).toLocaleString()} (${vesting.account.endTs.toString()})`,\n    },\n    { field: 'Vault', value: vesting.account.vault.toString() },\n    {\n      field: 'Realizer program',\n      value: vesting.account.realizor\n        ? vesting.account.realizor.program.toString()\n        : 'None',\n    },\n    {\n      field: 'Realizer metadata',\n      value: vesting.account.realizor\n        ? vesting.account.realizor.metadata.toString()\n        : 'None',\n    },\n    {\n      field: 'Grantor',\n      value: vesting.account.grantor.toString(),\n    },\n  ];\n\n  return (\n    <Card\n      key={vesting.publicKey.toString()}\n      onMouseOver={() => setHover(true)}\n      onMouseOut={() => setHover(false)}\n      style={{\n        marginTop: '24px',\n        cursor: hover ? 'pointer' : 'default',\n      }}\n    >\n      <CardContent style={{ paddingBottom: '16px' }}>\n        <ListItem onClick={() => setExpanded(!expanded)}>\n          <div\n            style={{\n              width: '100%',\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <ListItemIcon>\n              {getImage(tokenInfos.get(vesting.account.mint.toString()), {\n                marginRight: '16px',\n                width: '56px',\n              })}\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Link\n                  href={\n                    `https://explorer.solana.com/account/${vesting.publicKey.toBase58()}` +\n                    urlSuffix\n                  }\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                >\n                  {vesting.publicKey.toString()}\n                </Link>\n              }\n              secondary={`${startLabel}, ${endLabel} | ${vesting.account.periodCount.toNumber()} periods`}\n            />\n            <div\n              style={{\n                marginTop: '6px',\n                color: 'rgba(0, 0, 0, 0.54)',\n                display: 'flex',\n                justifyContent: 'space-between',\n                flexDirection: 'column',\n                maxWidth: '200px',\n              }}\n            >\n              <Typography\n                style={{ overflow: 'hidden', whiteSpace: 'nowrap' }}\n                variant=\"body1\"\n              >\n                {outstandingLabel}\n              </Typography>\n            </div>\n          </div>\n        </ListItem>\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <Typography></Typography>\n          {vestingDates.length <= 15 ? (\n            <ChartistGraph\n              data={{\n                labels: vestingDates,\n                series: [cumulativeVesting],\n              }}\n              options={\n                {\n                  axisY: {\n                    type: FixedScaleAxis,\n                    low: 0,\n                    high: cumulativeVesting[cumulativeVesting.length - 1],\n                    ticks: cumulativeVesting,\n                  },\n                  lineSmooth: Interpolation.step(),\n                  height: 400,\n                } as IChartOptions\n              }\n              type={'Line'}\n            />\n          ) : (\n            <div style={{ textAlign: 'center', fontWeight: 'bold' }}>\n              {/* TOOD: graphs for vesting accounts with a lot of periods. */}A\n              graph isn't available for this account.\n            </div>\n          )}\n          <div>\n            {isCustomMint && (\n              <div\n                style={{\n                  padding: '15px',\n                }}\n              >\n                <b>\n                  Note: custom mints (i.e. not SRM/MSRM) display raw token\n                  amounts without decimals.\n                </b>\n              </div>\n            )}\n            <Table>\n              <TableBody>\n                {rows.map(r => {\n                  return (\n                    <TableRow>\n                      <TableCell>{r.field}</TableCell>\n                      <TableCell align=\"right\">\n                        {r.value === null ? (\n                          <CircularProgress\n                            style={{\n                              height: '20px',\n                              width: '20px',\n                              padding: 0,\n                            }}\n                          />\n                        ) : (\n                          r.value\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n            <div style={{ display: 'flex', marginTop: '15px' }}>\n              <OwnedTokenAccountsSelect\n                decimals={mintAccount ? mintAccount.decimals : undefined}\n                mint={vesting.account.mint}\n                onChange={(f: PublicKey) => setWithdrawalAccount(f)}\n              />\n              <div style={{ marginLeft: '20px', width: '191px' }}>\n                <Button\n                  style={{ fontSize: '12px' }}\n                  color=\"primary\"\n                  disabled={!withdrawEnabled}\n                  variant=\"contained\"\n                  onClick={() =>\n                    withdraw().catch(err => {\n                      let msg = err.toString();\n                      if (\n                        msg &&\n                        msg.split('custom program error: 0x78').length === 2\n                      ) {\n                        msg = 'Unrealized rewards. Please unstake';\n                      }\n                      enqueueSnackbar(\n                        `Error withdrawing from vesting account: ${err.toString()}`,\n                        {\n                          variant: 'error',\n                        },\n                      );\n                    })\n                  }\n                >\n                  Unlock tokens\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Collapse>\n      </CardContent>\n    </Card>\n  );\n}\n\n// TODO: locale format without minutes, hours, seconds?\nfunction formatDate(d: Date): string {\n  return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;\n}\n"]},"metadata":{},"sourceType":"module"}