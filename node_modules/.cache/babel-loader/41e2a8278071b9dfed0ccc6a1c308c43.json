{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\utils\\\\tokens.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport BN from 'bn.js';\nimport { TokenListProvider } from '@solana/spl-token-registry';\nimport { networks } from '../store/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TokenListContext = /*#__PURE__*/React.createContext({\n  tokenMap: new Map()\n});\nexport function useTokenInfos() {\n  _s();\n\n  const {\n    tokenMap\n  } = useContext(TokenListContext);\n  return tokenMap;\n}\n\n_s(useTokenInfos, \"CZ5woJ60wTIsCWlkCJBWM4fTolk=\");\n\nexport function TokenRegistryProvider(props) {\n  _s2();\n\n  const [tokenMap, setTokenMap] = useState(new Map());\n  useEffect(() => {\n    new TokenListProvider().resolve().then(tokens => {\n      const tokenList = tokens.filterByClusterSlug('mainnet-beta').getList();\n      setTokenMap(tokenList.reduce((map, item) => {\n        map.set(item.address, item);\n        return map;\n      }, new Map()));\n    });\n  }, [setTokenMap]);\n  return /*#__PURE__*/_jsxDEV(TokenListContext.Provider, {\n    value: {\n      tokenMap\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(TokenRegistryProvider, \"cYBoE2RIzFqDPkCabVRVmwcixo0=\");\n\n_c = TokenRegistryProvider;\nexport function fromDisplay(amount, decimals) {\n  return new BN(amount * 10 ** decimals);\n}\nexport function toDisplay(amount, decimals) {\n  if (amount instanceof BN) {\n    amount = amount.toNumber();\n  }\n\n  return (amount / 10 ** decimals).toString();\n}\nexport function toDisplayLabel(mint) {\n  let whitelistedMint = Object.keys(networks.mainnet.mints).filter(label => networks.mainnet.mints[label].equals(mint)).pop();\n\n  if (whitelistedMint) {\n    return whitelistedMint.toUpperCase();\n  }\n\n  return mint.toString();\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenRegistryProvider\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/utils/tokens.tsx"],"names":["React","useContext","useState","useEffect","BN","TokenListProvider","networks","TokenListContext","createContext","tokenMap","Map","useTokenInfos","TokenRegistryProvider","props","setTokenMap","resolve","then","tokens","tokenList","filterByClusterSlug","getList","reduce","map","item","set","address","children","fromDisplay","amount","decimals","toDisplay","toNumber","toString","toDisplayLabel","mint","whitelistedMint","Object","keys","mainnet","mints","filter","label","equals","pop","toUpperCase"],"mappings":";;;;AAAA,OAAOA,KAAP,IAGEC,UAHF,EAIEC,QAJF,EAKEC,SALF,QAMO,OANP;AAOA,OAAOC,EAAP,MAAe,OAAf;AAEA,SAASC,iBAAT,QAA6C,4BAA7C;AACA,SAASC,QAAT,QAAyB,iBAAzB;;AAEA,MAAMC,gBAAgB,gBAAGP,KAAK,CAACQ,aAAN,CAA4C;AACnEC,EAAAA,QAAQ,EAAE,IAAIC,GAAJ;AADyD,CAA5C,CAAzB;AAQA,OAAO,SAASC,aAAT,GAAiD;AAAA;;AACtD,QAAM;AAAEF,IAAAA;AAAF,MAAeR,UAAU,CAAyBM,gBAAzB,CAA/B;AACA,SAAOE,QAAP;AACD;;GAHeE,a;;AAKhB,OAAO,SAASC,qBAAT,CAA+BC,KAA/B,EAAoE;AAAA;;AACzE,QAAM,CAACJ,QAAD,EAAWK,WAAX,IAA0BZ,QAAQ,CAAyB,IAAIQ,GAAJ,EAAzB,CAAxC;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,iBAAJ,GAAwBU,OAAxB,GAAkCC,IAAlC,CAAuCC,MAAM,IAAI;AAC/C,YAAMC,SAAS,GAAGD,MAAM,CAACE,mBAAP,CAA2B,cAA3B,EAA2CC,OAA3C,EAAlB;AACAN,MAAAA,WAAW,CACTI,SAAS,CAACG,MAAV,CAAiB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC9BD,QAAAA,GAAG,CAACE,GAAJ,CAAQD,IAAI,CAACE,OAAb,EAAsBF,IAAtB;AACA,eAAOD,GAAP;AACD,OAHD,EAGG,IAAIZ,GAAJ,EAHH,CADS,CAAX;AAMD,KARD;AASD,GAVQ,EAUN,CAACI,WAAD,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAAEL,MAAAA;AAAF,KAAlC;AAAA,cACGI,KAAK,CAACa;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAnBed,qB;;KAAAA,qB;AAqBhB,OAAO,SAASe,WAAT,CAAqBC,MAArB,EAAqCC,QAArC,EAA2D;AAChE,SAAO,IAAIzB,EAAJ,CAAOwB,MAAM,GAAG,MAAMC,QAAtB,CAAP;AACD;AAED,OAAO,SAASC,SAAT,CAAmBF,MAAnB,EAAwCC,QAAxC,EAAkE;AACvE,MAAID,MAAM,YAAYxB,EAAtB,EAA0B;AACxBwB,IAAAA,MAAM,GAAGA,MAAM,CAACG,QAAP,EAAT;AACD;;AACD,SAAO,CAACH,MAAM,GAAG,MAAMC,QAAhB,EAA0BG,QAA1B,EAAP;AACD;AAED,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAAiD;AACtD,MAAIC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAY/B,QAAQ,CAACgC,OAAT,CAAiBC,KAA7B,EACnBC,MADmB,CACZC,KAAK,IAAInC,QAAQ,CAACgC,OAAT,CAAiBC,KAAjB,CAAuBE,KAAvB,EAA8BC,MAA9B,CAAqCR,IAArC,CADG,EAEnBS,GAFmB,EAAtB;;AAGA,MAAIR,eAAJ,EAAqB;AACnB,WAAOA,eAAe,CAACS,WAAhB,EAAP;AACD;;AACD,SAAOV,IAAI,CAACF,QAAL,EAAP;AACD","sourcesContent":["import React, {\n  ReactNode,\n  PropsWithChildren,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport BN from 'bn.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry';\nimport { networks } from '../store/config';\n\nconst TokenListContext = React.createContext<TokenListContextValues>({\n  tokenMap: new Map(),\n});\n\ntype TokenListContextValues = {\n  tokenMap: Map<string, TokenInfo>;\n};\n\nexport function useTokenInfos(): Map<string, TokenInfo> {\n  const { tokenMap } = useContext<TokenListContextValues>(TokenListContext);\n  return tokenMap;\n}\n\nexport function TokenRegistryProvider(props: PropsWithChildren<ReactNode>) {\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    new TokenListProvider().resolve().then(tokens => {\n      const tokenList = tokens.filterByClusterSlug('mainnet-beta').getList();\n      setTokenMap(\n        tokenList.reduce((map, item) => {\n          map.set(item.address, item);\n          return map;\n        }, new Map()),\n      );\n    });\n  }, [setTokenMap]);\n\n  return (\n    <TokenListContext.Provider value={{ tokenMap }}>\n      {props.children}\n    </TokenListContext.Provider>\n  );\n}\n\nexport function fromDisplay(amount: number, decimals: number): BN {\n  return new BN(amount * 10 ** decimals);\n}\n\nexport function toDisplay(amount: BN | number, decimals: number): string {\n  if (amount instanceof BN) {\n    amount = amount.toNumber();\n  }\n  return (amount / 10 ** decimals).toString();\n}\n\nexport function toDisplayLabel(mint: PublicKey): string {\n  let whitelistedMint = Object.keys(networks.mainnet.mints)\n    .filter(label => networks.mainnet.mints[label].equals(mint))\n    .pop();\n  if (whitelistedMint) {\n    return whitelistedMint.toUpperCase();\n  }\n  return mint.toString();\n}\n"]},"metadata":{},"sourceType":"module"}