{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\components\\\\common\\\\MyNode.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport styled from 'styled-components';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport Slide from '@material-ui/core/Slide';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { SYSVAR_RENT_PUBKEY, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { getTokenAccount } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\nimport RegistrarSelect from './RegistrarSelect';\nimport { ActionType } from '../../store/actions';\nimport * as bootstrap from './BootstrapProvider';\nimport Me from '../Me';\nimport { memberSigner, memberSeed, createBalanceSandbox } from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\nimport Stake from '../Stake';\nimport Rewards from '../rewards/Rewards';\nimport VestingAccountsSelect from './VestingAccountsSelect';\nimport { toDisplayLabel, fromDisplay } from '../../utils/tokens';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar TabModel;\n\n(function (TabModel) {\n  TabModel[TabModel[\"Me\"] = 0] = \"Me\";\n  TabModel[TabModel[\"Stake\"] = 1] = \"Stake\";\n  TabModel[TabModel[\"Rewards\"] = 2] = \"Rewards\";\n  TabModel[TabModel[\"Lockup\"] = 3] = \"Lockup\";\n})(TabModel || (TabModel = {}));\n\nexport default function MyNode() {\n  _s();\n\n  const [tab, setTab] = useState(TabModel.Me);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MyNodeBanner, {\n      setTab: setTab\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      fixed: true,\n      maxWidth: \"md\",\n      style: {\n        flex: 1,\n        display: 'flex'\n      },\n      children: [tab === TabModel.Me && /*#__PURE__*/_jsxDEV(Me, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 33\n      }, this), tab === TabModel.Stake && /*#__PURE__*/_jsxDEV(Stake, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 36\n      }, this), tab === TabModel.Rewards && /*#__PURE__*/_jsxDEV(Rewards, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyNode, \"yZk3KlxsFW8dXEWTK5oq7WN4yAA=\");\n\n_c = MyNode;\n\nfunction MyNodeBanner(props) {\n  _s2();\n\n  const [tab, setTab] = useState(TabModel.Me);\n  const {\n    member,\n    registrar,\n    registrarAccount\n  } = useSelector(state => {\n    return {\n      member: state.registry.member,\n      registrar: state.registry.registrar,\n      registrarAccount: state.accounts[state.registry.registrar.toString()]\n    };\n  });\n  const [showDepositDialog, setShowDepositDialog] = useState(false);\n  const [showWithdrawDialog, setShowWithdrawDialog] = useState(false);\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const {\n    wallet,\n    registryClient\n  } = useWallet();\n  const dispatch = useDispatch();\n  console.log(wallet, registryClient, \"temple 3\");\n\n  const createStakeAccount = async () => {\n    enqueueSnackbar('Creating stake account', {\n      variant: 'info'\n    });\n    const seed = await memberSeed(registrar);\n    const member = await PublicKey.createWithSeed(wallet.publicKey, seed, registryClient.programId);\n    const {\n      publicKey,\n      nonce\n    } = await memberSigner(registryClient.programId, registrar, member);\n    const memberSignerPublicKey = publicKey;\n    const [mainTx, balances] = await createBalanceSandbox(registryClient.provider, registrarAccount, memberSignerPublicKey);\n    const [lockedTx, balancesLocked] = await createBalanceSandbox(registryClient.provider, registrarAccount, memberSignerPublicKey);\n    const tx = registryClient.transaction.createMember(nonce, {\n      accounts: {\n        registrar: registrar,\n        member: member,\n        beneficiary: wallet.publicKey,\n        memberSigner: memberSignerPublicKey,\n        balances,\n        balancesLocked,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        rent: SYSVAR_RENT_PUBKEY\n      },\n      instructions: [SystemProgram.createAccountWithSeed({\n        fromPubkey: wallet.publicKey,\n        newAccountPubkey: member,\n        basePubkey: wallet.publicKey,\n        seed,\n        lamports: await registryClient.provider.connection.getMinimumBalanceForRentExemption(registryClient.account.member.size),\n        space: registryClient.account.member.size,\n        programId: registryClient.programId\n      })]\n    });\n    const signers = [];\n    const allTxs = [mainTx, lockedTx, {\n      tx,\n      signers\n    }]; // @ts-ignore\n\n    let txSigs = await registryClient.provider.sendAll(allTxs, {\n      commitment: 'recent',\n      preflightCommitment: 'recent',\n      skipPreflight: true\n    });\n    console.log('Accounts created with transactions:', txSigs);\n    const memberAccount = await registryClient.account.member(member);\n    const memberProgramAccount = {\n      publicKey: member,\n      account: memberAccount\n    }; // Add the new member to the store.\n\n    dispatch({\n      type: ActionType.AccountAdd,\n      item: {\n        account: memberProgramAccount\n      }\n    }); // Populate the store with all of the member's accounts.\n\n    await bootstrap.fetchAndDispatchMemberAccounts(memberProgramAccount, dispatch, registryClient.provider.connection); // Subscribe to any updates to the member.\n\n    bootstrap.subscribeMember(memberProgramAccount, registryClient, dispatch); // Tell the UI that our member is ready.\n\n    dispatch({\n      type: ActionType.RegistrySetMember,\n      item: {\n        member\n      }\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Stake account created ${member.toString()}`, {\n      variant: 'success'\n    });\n  };\n\n  const HoverSpan = styled.span`\n    :hover {\n      cursor: pointer;\n    }\n  `;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#fff',\n        paddingTop: '24px',\n        borderBottom: 'solid 1pt #ccc'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        fixed: true,\n        maxWidth: \"md\",\n        style: {\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              style: {\n                marginBottom: '10px'\n              },\n              children: \"My Stake\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              flexDirection: 'column'\n            },\n            children: /*#__PURE__*/_jsxDEV(RegistrarSelect, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              children: member !== undefined ? member.toString() : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [\"Account not found. Please\", ' ', /*#__PURE__*/_jsxDEV(HoverSpan, {\n                  onClick: () => {\n                    createStakeAccount().catch(err => {\n                      console.error(err);\n                      enqueueSnackbar(`Error creating stake account: ${err.toString()}`, {\n                        variant: 'error'\n                      });\n                    });\n                  },\n                  style: {\n                    color: 'black',\n                    fontWeight: 'bold',\n                    textDecoration: 'underline'\n                  },\n                  children: \"create\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 21\n                }, this), ' ', \"a stake account.\"]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                disabled: member === undefined,\n                onClick: () => setShowDepositDialog(true),\n                variant: \"outlined\",\n                color: \"primary\",\n                style: {\n                  marginRight: '10px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {\n                  style: {\n                    fontSize: '20px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  style: {\n                    marginLeft: '5px',\n                    marginRight: '5px'\n                  },\n                  children: \"Deposit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                disabled: member === undefined,\n                variant: \"outlined\",\n                color: \"primary\",\n                onClick: () => setShowWithdrawDialog(true),\n                children: [/*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {\n                  style: {\n                    fontSize: '20px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  style: {\n                    marginLeft: '5px',\n                    marginRight: '5px'\n                  },\n                  children: \"Withdraw\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxWidth: '960px',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n          paddingLeft: '24px',\n          paddingRight: '24px',\n          marginTop: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          value: tab,\n          onChange: (_e, t) => {\n            setTab(t);\n            props.setTab(t);\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            value: TabModel.Me,\n            label: \"Me\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            value: TabModel.Stake,\n            label: \"Stake\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            value: TabModel.Rewards,\n            label: \"Rewards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), member !== undefined && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DepositDialog, {\n        open: showDepositDialog,\n        onClose: () => setShowDepositDialog(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(WithdrawDialog, {\n        open: showWithdrawDialog,\n        onClose: () => setShowWithdrawDialog(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n_s2(MyNodeBanner, \"sAtQ+AqWhuMr+4kiDjMCYtqkXrg=\", false, function () {\n  return [useSelector, useSnackbar, useWallet, useDispatch];\n});\n\n_c2 = MyNodeBanner;\n\nfunction DepositDialog(props) {\n  _s3();\n\n  const {\n    open,\n    onClose\n  } = props;\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const {\n    registryClient,\n    lockupClient\n  } = useWallet();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts\n  } = useSelector(state => {\n    let memberAccount = undefined;\n\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n\n    const registrarAccount = state.accounts[state.registry.registrar.toString()];\n    const registrar = {\n      publicKey: state.registry.registrar,\n      account: registrarAccount\n    };\n    return {\n      registrar,\n      memberAccount,\n      member: state.registry.member,\n      mintAccount: state.accounts[registrar.account.mint.toString()],\n      accounts: state.accounts\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(TransferDialog, {\n    deposit: true,\n    title: 'Deposit',\n    contextText: 'Select the amount to deposit',\n    open: open,\n    onClose: onClose,\n    onTransfer: async (from, displayAmount, isLocked) => {\n      const amount = fromDisplay(displayAmount, mintAccount.decimals);\n      enqueueSnackbar(`Depositing ${displayAmount} ${toDisplayLabel(registrar.account.mint)} from ${from.toString()}`, {\n        variant: 'info'\n      });\n      const tx = await (async () => {\n        if (isLocked) {\n          const relayData = registryClient.coder.instruction.encode('deposit_locked', {\n            amount\n          });\n          const vesting = accounts[from.toString()];\n          const _memberSigner = (await memberSigner(registryClient.programId, registrar.publicKey, member)).publicKey;\n          const _vestingSigner = (await vestingSigner(lockupClient.programId, from)).publicKey;\n          const relayAccounts = [{\n            // @ts-ignore\n            pubkey: await registryClient.state.address(),\n            isWritable: false,\n            isSigner: false\n          }, {\n            pubkey: registrar.publicKey,\n            isWritable: false,\n            isSigner: false\n          }, {\n            pubkey: member,\n            isWritable: false,\n            isSigner: false\n          }, {\n            pubkey: registryClient.provider.wallet.publicKey,\n            isWritable: false,\n            isSigner: true\n          }];\n          const tx = await lockupClient.rpc.whitelistWithdraw(relayData, amount, {\n            accounts: {\n              transfer: {\n                // @ts-ignore\n                lockup: await lockupClient.state.address(),\n                beneficiary: registryClient.provider.wallet.publicKey,\n                whitelistedProgram: registryClient.programId,\n                vesting: from,\n                vault: vesting.vault,\n                vestingSigner: _vestingSigner,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                whitelistedProgramVaultAuthority: _memberSigner\n              }\n            },\n            remainingAccounts: relayAccounts\n          }); // Update the store with the updated account.\n\n          const updatedVestingAccount = await lockupClient.account.vesting(from);\n          dispatch({\n            type: ActionType.LockupUpdateVesting,\n            item: {\n              vesting: {\n                publicKey: from,\n                account: updatedVestingAccount\n              }\n            }\n          });\n          return tx;\n        } else {\n          const tx = await registryClient.rpc.deposit(amount, {\n            accounts: {\n              depositor: from,\n              depositorAuthority: registryClient.provider.wallet.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              vault: memberAccount.balances.vault,\n              beneficiary: registryClient.provider.wallet.publicKey,\n              member: member\n            }\n          });\n          const tokenAccount = await getTokenAccount(registryClient.provider, from);\n          dispatch({\n            type: ActionType.CommonOwnedTokenAccountsUpdate,\n            item: {\n              account: {\n                publicKey: from,\n                account: tokenAccount\n              }\n            }\n          });\n          return tx;\n        }\n      })();\n      closeSnackbar();\n      enqueueSnackbar(`Deposit complete`, {\n        variant: 'success',\n        action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n          signature: tx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 19\n        }, this)\n      });\n      onClose();\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(DepositDialog, \"1NpBr4xL8qqifcUZ/6HEMcYPXrY=\", false, function () {\n  return [useSnackbar, useWallet, useDispatch, useSelector];\n});\n\n_c3 = DepositDialog;\n\nfunction WithdrawDialog(props) {\n  _s4();\n\n  const {\n    open,\n    onClose\n  } = props;\n  const {\n    registryClient,\n    lockupClient\n  } = useWallet();\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    registrarAccount,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts\n  } = useSelector(state => {\n    let memberAccount = undefined;\n\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n\n    const registrarAccount = state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar: state.registry.registrar,\n      registrarAccount,\n      member: state.registry.member,\n      memberAccount,\n      mintAccount: state.accounts[registrarAccount.mint.toString()],\n      accounts: state.accounts\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(TransferDialog, {\n    title: 'Withdraw',\n    contextText: 'Select the amount to withdraw',\n    open: open,\n    onClose: onClose,\n    onTransfer: async (from, displayAmount, isLocked) => {\n      const amount = fromDisplay(displayAmount, mintAccount.decimals);\n      enqueueSnackbar(`Withdrawing ${displayAmount} ${toDisplayLabel(registrarAccount.mint)} to ${from.toString()}`, {\n        variant: 'info'\n      });\n      const tx = await (async () => {\n        const _memberSigner = await memberSigner(registryClient.programId, registrar, member);\n\n        if (isLocked) {\n          const relayData = registryClient.coder.instruction.encode('withdraw_locked', {\n            amount\n          });\n          const vesting = accounts[from.toString()];\n          const _memberSigner = (await memberSigner(registryClient.programId, registrar, member)).publicKey;\n          const _vestingSigner = (await vestingSigner(lockupClient.programId, from)).publicKey;\n          const relayAccounts = [{\n            // @ts-ignore\n            pubkey: await registryClient.state.address(),\n            isWritable: false,\n            isSigner: false\n          }, {\n            pubkey: registrar,\n            isWritable: false,\n            isSigner: false\n          }, {\n            pubkey: member,\n            isWritable: false,\n            isSigner: false\n          }, {\n            pubkey: registryClient.provider.wallet.publicKey,\n            isWritable: false,\n            isSigner: true\n          }];\n          const tx = await lockupClient.rpc.whitelistDeposit(relayData, {\n            accounts: {\n              transfer: {\n                // @ts-ignore\n                lockup: await lockupClient.state.address(),\n                beneficiary: registryClient.provider.wallet.publicKey,\n                whitelistedProgram: registryClient.programId,\n                vesting: from,\n                vault: vesting.vault,\n                vestingSigner: _vestingSigner,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                whitelistedProgramVaultAuthority: _memberSigner\n              }\n            },\n            remainingAccounts: relayAccounts\n          }); // Update the store with the updated account.\n\n          const updatedVestingAccount = await lockupClient.account.vesting(from);\n          dispatch({\n            type: ActionType.LockupUpdateVesting,\n            item: {\n              vesting: {\n                publicKey: from,\n                account: updatedVestingAccount\n              }\n            }\n          });\n          return tx;\n        } else {\n          const tx = await registryClient.rpc.withdraw(amount, {\n            accounts: {\n              registrar,\n              member,\n              beneficiary: registryClient.provider.wallet.publicKey,\n              vault: memberAccount.balances.vault,\n              memberSigner: _memberSigner.publicKey,\n              depositor: from,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID\n            }\n          });\n          const tokenAccount = await getTokenAccount(registryClient.provider, from);\n          dispatch({\n            type: ActionType.CommonOwnedTokenAccountsUpdate,\n            item: {\n              account: {\n                publicKey: from,\n                account: tokenAccount\n              }\n            }\n          });\n          return tx;\n        }\n      })();\n      closeSnackbar();\n      enqueueSnackbar(`Withdraw complete`, {\n        variant: 'success',\n        action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n          signature: tx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 19\n        }, this)\n      });\n      onClose();\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 537,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(WithdrawDialog, \"NcFhc207Ejm5kGxZSIZyE3Ej6J4=\", false, function () {\n  return [useWallet, useSnackbar, useDispatch, useSelector];\n});\n\n_c4 = WithdrawDialog;\n\nfunction TransferDialog(props) {\n  _s5();\n\n  const {\n    mint,\n    mintAccount\n  } = useSelector(state => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const mint = registrar ? registrar.mint : undefined;\n    return {\n      mint,\n      mintAccount: state.accounts[registrar.mint.toString()]\n    };\n  });\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    open,\n    onClose,\n    onTransfer,\n    title,\n    contextText,\n    deposit\n  } = props;\n  const [displayAmount, setDisplayAmount] = useState(null);\n  const [from, setFrom] = useState(null);\n  const [vesting, setVesting] = useState(null);\n  const [maxDisplayAmount, setMaxDisplayAmount] = useState(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const submitBtnDisabled = (isLocked ? !vesting : !from) || !displayAmount || !maxDisplayAmount || displayAmount > maxDisplayAmount;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      TransitionComponent: Transition,\n      keepMounted: true,\n      onClose: onClose,\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            paddingRight: '24px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              flexDirection: 'column'\n            },\n            children: /*#__PURE__*/_jsxDEV(LockIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            style: {\n              marginLeft: '0px',\n              marginRight: '0px'\n            },\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: isLocked,\n              onChange: () => setIsLocked(!isLocked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 17\n            }, this),\n            label: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              style: {\n                width: '100%'\n              },\n              id: \"outlined-number\",\n              label: \"Amount\",\n              type: \"number\",\n              InputLabelProps: {\n                shrink: true\n              },\n              variant: \"outlined\",\n              onChange: e => setDisplayAmount(parseFloat(e.target.value)),\n              InputProps: {\n                inputProps: {\n                  min: 0,\n                  max: maxDisplayAmount !== null && maxDisplayAmount !== void 0 ? maxDisplayAmount : 0\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 737,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: contextText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          children: !isLocked ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(OwnedTokenAccountsSelect, {\n              variant: \"outlined\",\n              decimals: mintAccount.decimals,\n              mint: mint,\n              onChange: (f, _maxDisplayAmount) => {\n                setFrom(f); // TODO: set an actual limit for the withdrawal UI (i.e.\n                //       what's currently in the vault). Currently not\n                //       done since we dont' have websocket connections\n                //       for each of the users accounts. However we\n                //       still use the \"max\" amount for display vesting\n                //       accounts.\n\n                setMaxDisplayAmount(2 ** 53);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 759,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Token account to transfer to/from\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 774,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(VestingAccountsSelect, {\n              variant: \"outlined\",\n              mint: mint,\n              decimals: mintAccount.decimals,\n              deposit: deposit,\n              onChange: (v, maxDisplayAmount) => {\n                setVesting(v);\n                setMaxDisplayAmount(maxDisplayAmount.toNumber());\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 780,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: [\"Vesting account to transfer to/from your \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"locked\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 791,\n                columnNumber: 60\n              }, this), ' ', \"balances\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 790,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: onClose,\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button //@ts-ignore\n        , {\n          onClick: () => {\n            onTransfer(isLocked ? vesting : from, displayAmount, isLocked).catch(err => {\n              console.error(err);\n              enqueueSnackbar(`Error transferring funds: ${err.toString()}`, {\n                variant: 'error'\n              });\n            });\n          },\n          color: \"primary\",\n          disabled: submitBtnDisabled,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 702,\n    columnNumber: 5\n  }, this);\n}\n\n_s5(TransferDialog, \"a6inw+DA8m2owABZRFFMYn4vllo=\", false, function () {\n  return [useSelector, useSnackbar];\n});\n\n_c5 = TransferDialog;\nconst Transition = /*#__PURE__*/React.forwardRef(_c6 = function Transition(props, ref) {\n  return /*#__PURE__*/_jsxDEV(Slide, {\n    direction: \"up\",\n    ref: ref,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 831,\n    columnNumber: 10\n  }, this);\n});\n_c7 = Transition;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"MyNode\");\n$RefreshReg$(_c2, \"MyNodeBanner\");\n$RefreshReg$(_c3, \"DepositDialog\");\n$RefreshReg$(_c4, \"WithdrawDialog\");\n$RefreshReg$(_c5, \"TransferDialog\");\n$RefreshReg$(_c6, \"Transition$React.forwardRef\");\n$RefreshReg$(_c7, \"Transition\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/components/common/MyNode.tsx"],"names":["React","useState","useSelector","useDispatch","useSnackbar","styled","LockIcon","Container","Typography","Button","ArrowDownwardIcon","ArrowUpwardIcon","Dialog","DialogActions","DialogContent","DialogTitle","TextField","FormControl","Slide","FormHelperText","Tabs","Tab","FormControlLabel","Switch","SYSVAR_RENT_PUBKEY","PublicKey","SystemProgram","TokenInstructions","getTokenAccount","useWallet","OwnedTokenAccountsSelect","ViewTransactionOnExplorerButton","RegistrarSelect","ActionType","bootstrap","Me","memberSigner","memberSeed","createBalanceSandbox","vestingSigner","Stake","Rewards","VestingAccountsSelect","toDisplayLabel","fromDisplay","TabModel","MyNode","tab","setTab","flex","display","MyNodeBanner","props","member","registrar","registrarAccount","state","registry","accounts","toString","showDepositDialog","setShowDepositDialog","showWithdrawDialog","setShowWithdrawDialog","enqueueSnackbar","closeSnackbar","wallet","registryClient","dispatch","console","log","createStakeAccount","variant","seed","createWithSeed","publicKey","programId","nonce","memberSignerPublicKey","mainTx","balances","provider","lockedTx","balancesLocked","tx","transaction","createMember","beneficiary","tokenProgram","TOKEN_PROGRAM_ID","rent","instructions","createAccountWithSeed","fromPubkey","newAccountPubkey","basePubkey","lamports","connection","getMinimumBalanceForRentExemption","account","size","space","signers","allTxs","txSigs","sendAll","commitment","preflightCommitment","skipPreflight","memberAccount","memberProgramAccount","type","AccountAdd","item","fetchAndDispatchMemberAccounts","subscribeMember","RegistrySetMember","HoverSpan","span","backgroundColor","paddingTop","borderBottom","height","flexDirection","justifyContent","marginBottom","undefined","catch","err","error","color","fontWeight","textDecoration","marginRight","fontSize","marginLeft","maxWidth","paddingLeft","paddingRight","marginTop","_e","t","DepositDialog","open","onClose","lockupClient","mintAccount","mint","from","displayAmount","isLocked","amount","decimals","relayData","coder","instruction","encode","vesting","_memberSigner","_vestingSigner","relayAccounts","pubkey","address","isWritable","isSigner","rpc","whitelistWithdraw","transfer","lockup","whitelistedProgram","vault","whitelistedProgramVault","whitelistedProgramVaultAuthority","remainingAccounts","updatedVestingAccount","LockupUpdateVesting","deposit","depositor","depositorAuthority","tokenAccount","CommonOwnedTokenAccountsUpdate","action","WithdrawDialog","whitelistDeposit","withdraw","TransferDialog","onTransfer","title","contextText","setDisplayAmount","setFrom","setVesting","maxDisplayAmount","setMaxDisplayAmount","setIsLocked","submitBtnDisabled","Transition","width","shrink","e","parseFloat","target","value","inputProps","min","max","f","_maxDisplayAmount","v","toNumber","forwardRef","ref"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport BN from 'bn.js';\nimport styled from 'styled-components';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport Slide from '@material-ui/core/Slide';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { Account, SYSVAR_RENT_PUBKEY, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { getTokenAccount } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\nimport RegistrarSelect from './RegistrarSelect';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport * as bootstrap from './BootstrapProvider';\nimport Me from '../Me';\nimport {\n  memberSigner,\n  memberSeed,\n  createBalanceSandbox,\n} from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\nimport Stake from '../Stake';\nimport Rewards from '../rewards/Rewards';\nimport VestingAccountsSelect from './VestingAccountsSelect';\nimport { toDisplayLabel, fromDisplay } from '../../utils/tokens';\n\nenum TabModel {\n  Me,\n  Stake,\n  Rewards,\n  Lockup,\n}\n\nexport default function MyNode() {\n  const [tab, setTab] = useState(TabModel.Me);\n  return (\n    <div>\n      <MyNodeBanner setTab={setTab} />\n      <Container fixed maxWidth=\"md\" style={{ flex: 1, display: 'flex' }}>\n        {tab === TabModel.Me && <Me />}\n        {tab === TabModel.Stake && <Stake />}\n        {tab === TabModel.Rewards && <Rewards />}\n      </Container>\n    </div>\n  );\n}\n\ntype MyNodeBannerProps = {\n  setTab: (t: TabModel) => void;\n};\n\nfunction MyNodeBanner(props: MyNodeBannerProps) {\n  const [tab, setTab] = useState(TabModel.Me);\n  const { member, registrar, registrarAccount } = useSelector(\n    (state: StoreState) => {\n      return {\n        member: state.registry.member,\n        registrar: state.registry.registrar,\n        registrarAccount: state.accounts[state.registry.registrar.toString()],\n      };\n    },\n  );\n  const [showDepositDialog, setShowDepositDialog] = useState(false);\n  const [showWithdrawDialog, setShowWithdrawDialog] = useState(false);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { wallet, registryClient } = useWallet();\n  const dispatch = useDispatch();\n  console.log(wallet, registryClient, \"temple 3\");\n  const createStakeAccount = async () => {\n    enqueueSnackbar('Creating stake account', {\n      variant: 'info',\n    });\n    const seed = await memberSeed(registrar);\n    const member = await PublicKey.createWithSeed(\n      wallet.publicKey!,\n      seed,\n      registryClient.programId,\n    );\n    const { publicKey, nonce } = await memberSigner(\n      registryClient.programId,\n      registrar,\n      member,\n    );\n    const memberSignerPublicKey = publicKey;\n\n    const [mainTx, balances] = await createBalanceSandbox(\n      registryClient.provider,\n      registrarAccount,\n      memberSignerPublicKey,\n    );\n    const [lockedTx, balancesLocked] = await createBalanceSandbox(\n      registryClient.provider,\n      registrarAccount,\n      memberSignerPublicKey,\n    );\n    const tx = registryClient.transaction.createMember(nonce, {\n      accounts: {\n        registrar: registrar,\n        member: member,\n        beneficiary: wallet.publicKey,\n        memberSigner: memberSignerPublicKey,\n        balances,\n        balancesLocked,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        rent: SYSVAR_RENT_PUBKEY,\n      },\n      instructions: [\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: wallet.publicKey!,\n          newAccountPubkey: member,\n          basePubkey: wallet.publicKey!,\n          seed,\n          lamports: await registryClient.provider.connection.getMinimumBalanceForRentExemption(\n            registryClient.account.member.size,\n          ),\n          space: registryClient.account.member.size,\n          programId: registryClient.programId,\n        }),\n      ],\n    });\n    const signers: Account[] = [];\n    const allTxs = [mainTx, lockedTx, { tx, signers }];\n    // @ts-ignore\n    let txSigs = await registryClient.provider.sendAll(allTxs, {\n      commitment: 'recent',\n      preflightCommitment: 'recent',\n      skipPreflight: true,\n    });\n    console.log('Accounts created with transactions:', txSigs);\n\n    const memberAccount = await registryClient.account.member(member);\n    const memberProgramAccount = {\n      publicKey: member,\n      account: memberAccount,\n    };\n    // Add the new member to the store.\n    dispatch({\n      type: ActionType.AccountAdd,\n      item: {\n        account: memberProgramAccount,\n      },\n    });\n\n    // Populate the store with all of the member's accounts.\n    await bootstrap.fetchAndDispatchMemberAccounts(\n      memberProgramAccount,\n      dispatch,\n      registryClient.provider.connection,\n    );\n\n    // Subscribe to any updates to the member.\n    bootstrap.subscribeMember(memberProgramAccount, registryClient, dispatch);\n\n    // Tell the UI that our member is ready.\n    dispatch({\n      type: ActionType.RegistrySetMember,\n      item: {\n        member,\n      },\n    });\n\n    closeSnackbar();\n    enqueueSnackbar(`Stake account created ${member.toString()}`, {\n      variant: 'success',\n    });\n  };\n\n  const HoverSpan = styled.span`\n    :hover {\n      cursor: pointer;\n    }\n  `;\n\n  return (\n    <>\n      <div\n        style={{\n          backgroundColor: '#fff',\n          paddingTop: '24px',\n          borderBottom: 'solid 1pt #ccc',\n        }}\n      >\n        <Container\n          fixed\n          maxWidth=\"md\"\n          style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div>\n              <Typography variant=\"h4\" style={{ marginBottom: '10px' }}>\n                My Stake\n              </Typography>\n            </div>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <RegistrarSelect />\n            </div>\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div>\n              <Typography>\n                {member !== undefined ? (\n                  member.toString()\n                ) : (\n                  <>\n                    Account not found. Please{' '}\n                    <HoverSpan\n                      onClick={() => {\n                        createStakeAccount().catch(err => {\n                          console.error(err);\n                          enqueueSnackbar(\n                            `Error creating stake account: ${err.toString()}`,\n                            {\n                              variant: 'error',\n                            },\n                          );\n                        });\n                      }}\n                      style={{\n                        color: 'black',\n                        fontWeight: 'bold',\n                        textDecoration: 'underline',\n                      }}\n                    >\n                      create\n                    </HoverSpan>{' '}\n                    a stake account.\n                  </>\n                )}\n              </Typography>\n            </div>\n            <div>\n              <div>\n                <Button\n                  disabled={member === undefined}\n                  onClick={() => setShowDepositDialog(true)}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  style={{ marginRight: '10px' }}\n                >\n                  <ArrowDownwardIcon style={{ fontSize: '20px' }} />\n                  <Typography style={{ marginLeft: '5px', marginRight: '5px' }}>\n                    Deposit\n                  </Typography>\n                </Button>\n                <Button\n                  disabled={member === undefined}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => setShowWithdrawDialog(true)}\n                >\n                  <ArrowUpwardIcon style={{ fontSize: '20px' }} />\n                  <Typography style={{ marginLeft: '5px', marginRight: '5px' }}>\n                    Withdraw\n                  </Typography>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Container>\n        <div\n          style={{\n            maxWidth: '960px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            paddingLeft: '24px',\n            paddingRight: '24px',\n            marginTop: '10px',\n          }}\n        >\n          <Tabs\n            value={tab}\n            onChange={(_e, t) => {\n              setTab(t);\n              props.setTab(t);\n            }}\n          >\n            <Tab value={TabModel.Me} label=\"Me\" />\n            <Tab value={TabModel.Stake} label=\"Stake\" />\n            <Tab value={TabModel.Rewards} label=\"Rewards\" />\n          </Tabs>\n        </div>\n      </div>\n      {member !== undefined && (\n        <>\n          <DepositDialog\n            open={showDepositDialog}\n            onClose={() => setShowDepositDialog(false)}\n          />\n          <WithdrawDialog\n            open={showWithdrawDialog}\n            onClose={() => setShowWithdrawDialog(false)}\n          />\n        </>\n      )}\n    </>\n  );\n}\n\ntype DepositDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction DepositDialog(props: DepositDialogProps) {\n  const { open, onClose } = props;\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { registryClient, lockupClient } = useWallet();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts,\n  } = useSelector((state: StoreState) => {\n    let memberAccount = undefined;\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n    const registrarAccount =\n      state.accounts[state.registry.registrar.toString()];\n    const registrar: ProgramAccount = {\n      publicKey: state.registry.registrar,\n      account: registrarAccount,\n    };\n    return {\n      registrar,\n      memberAccount,\n      member: state.registry.member,\n      mintAccount: state.accounts[registrar.account.mint.toString()],\n      accounts: state.accounts,\n    };\n  });\n  return (\n    <TransferDialog\n      deposit={true}\n      title={'Deposit'}\n      contextText={'Select the amount to deposit'}\n      open={open}\n      onClose={onClose}\n      onTransfer={async (\n        from: PublicKey,\n        displayAmount: number,\n        isLocked: boolean,\n      ) => {\n        const amount = fromDisplay(displayAmount, mintAccount.decimals);\n        enqueueSnackbar(\n          `Depositing ${displayAmount} ${toDisplayLabel(\n            registrar.account.mint,\n          )} from ${from.toString()}`,\n          {\n            variant: 'info',\n          },\n        );\n        const tx = await (async () => {\n          if (isLocked) {\n            const relayData = registryClient.coder.instruction.encode(\n              'deposit_locked',\n              {\n                amount,\n              },\n            );\n            const vesting = accounts[from.toString()];\n            const _memberSigner = (\n              await memberSigner(\n                registryClient.programId,\n                registrar.publicKey,\n                member!,\n              )\n            ).publicKey;\n            const _vestingSigner = (\n              await vestingSigner(lockupClient.programId, from)\n            ).publicKey;\n            const relayAccounts = [\n              {\n                // @ts-ignore\n                pubkey: await registryClient.state.address(),\n                isWritable: false,\n                isSigner: false,\n              },\n              {\n                pubkey: registrar.publicKey,\n                isWritable: false,\n                isSigner: false,\n              },\n              { pubkey: member!, isWritable: false, isSigner: false },\n              {\n                pubkey: registryClient.provider.wallet.publicKey,\n                isWritable: false,\n                isSigner: true,\n              },\n            ];\n            const tx = await lockupClient.rpc.whitelistWithdraw(\n              relayData,\n              amount,\n              {\n                accounts: {\n                  transfer: {\n                    // @ts-ignore\n                    lockup: await lockupClient.state.address(),\n                    beneficiary: registryClient.provider.wallet.publicKey,\n                    whitelistedProgram: registryClient.programId,\n                    vesting: from,\n                    vault: vesting.vault,\n                    vestingSigner: _vestingSigner,\n                    tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                    whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                    whitelistedProgramVaultAuthority: _memberSigner,\n                  },\n                },\n                remainingAccounts: relayAccounts,\n              },\n            );\n\n            // Update the store with the updated account.\n            const updatedVestingAccount = await lockupClient.account.vesting(\n              from,\n            );\n            dispatch({\n              type: ActionType.LockupUpdateVesting,\n              item: {\n                vesting: {\n                  publicKey: from,\n                  account: updatedVestingAccount,\n                },\n              },\n            });\n\n            return tx;\n          } else {\n            const tx = await registryClient.rpc.deposit(amount, {\n              accounts: {\n                depositor: from,\n                depositorAuthority: registryClient.provider.wallet.publicKey,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                vault: memberAccount.balances.vault,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                member: member,\n              },\n            });\n\n            const tokenAccount = await getTokenAccount(\n              registryClient.provider,\n              from,\n            );\n            dispatch({\n              type: ActionType.CommonOwnedTokenAccountsUpdate,\n              item: {\n                account: {\n                  publicKey: from,\n                  account: tokenAccount,\n                },\n              },\n            });\n\n            return tx;\n          }\n        })();\n        closeSnackbar();\n        enqueueSnackbar(`Deposit complete`, {\n          variant: 'success',\n          action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n        });\n        onClose();\n      }}\n    />\n  );\n}\n\ntype WithdrawDialogProps = DepositDialogProps;\n\nfunction WithdrawDialog(props: WithdrawDialogProps) {\n  const { open, onClose } = props;\n  const { registryClient, lockupClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    registrarAccount,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts,\n  } = useSelector((state: StoreState) => {\n    let memberAccount = undefined;\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n    const registrarAccount =\n      state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar: state.registry.registrar,\n      registrarAccount,\n      member: state.registry.member,\n      memberAccount,\n      mintAccount: state.accounts[registrarAccount.mint.toString()],\n      accounts: state.accounts,\n    };\n  });\n  return (\n    <TransferDialog\n      title={'Withdraw'}\n      contextText={'Select the amount to withdraw'}\n      open={open}\n      onClose={onClose}\n      onTransfer={async (\n        from: PublicKey,\n        displayAmount: number,\n        isLocked: boolean,\n      ) => {\n        const amount = fromDisplay(displayAmount, mintAccount.decimals);\n        enqueueSnackbar(\n          `Withdrawing ${displayAmount} ${toDisplayLabel(\n            registrarAccount.mint,\n          )} to ${from.toString()}`,\n          {\n            variant: 'info',\n          },\n        );\n        const tx = await (async () => {\n          const _memberSigner = await memberSigner(\n            registryClient.programId,\n            registrar,\n            member!,\n          );\n          if (isLocked) {\n            const relayData = registryClient.coder.instruction.encode(\n              'withdraw_locked',\n              {\n                amount,\n              },\n            );\n            const vesting = accounts[from.toString()];\n            const _memberSigner = (\n              await memberSigner(registryClient.programId, registrar, member!)\n            ).publicKey;\n            const _vestingSigner = (\n              await vestingSigner(lockupClient.programId, from)\n            ).publicKey;\n            const relayAccounts = [\n              {\n                // @ts-ignore\n                pubkey: await registryClient.state.address(),\n                isWritable: false,\n                isSigner: false,\n              },\n              { pubkey: registrar, isWritable: false, isSigner: false },\n              { pubkey: member!, isWritable: false, isSigner: false },\n              {\n                pubkey: registryClient.provider.wallet.publicKey,\n                isWritable: false,\n                isSigner: true,\n              },\n            ];\n            const tx = await lockupClient.rpc.whitelistDeposit(relayData, {\n              accounts: {\n                transfer: {\n                  // @ts-ignore\n                  lockup: await lockupClient.state.address(),\n                  beneficiary: registryClient.provider.wallet.publicKey,\n                  whitelistedProgram: registryClient.programId,\n                  vesting: from,\n                  vault: vesting.vault,\n                  vestingSigner: _vestingSigner,\n                  tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                  whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                  whitelistedProgramVaultAuthority: _memberSigner,\n                },\n              },\n              remainingAccounts: relayAccounts,\n            });\n\n            // Update the store with the updated account.\n            const updatedVestingAccount = await lockupClient.account.vesting(\n              from,\n            );\n            dispatch({\n              type: ActionType.LockupUpdateVesting,\n              item: {\n                vesting: {\n                  publicKey: from,\n                  account: updatedVestingAccount,\n                },\n              },\n            });\n\n            return tx;\n          } else {\n            const tx = await registryClient.rpc.withdraw(amount, {\n              accounts: {\n                registrar,\n                member,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                vault: memberAccount.balances.vault,\n                memberSigner: _memberSigner.publicKey,\n                depositor: from,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              },\n            });\n\n            const tokenAccount = await getTokenAccount(\n              registryClient.provider,\n              from,\n            );\n            dispatch({\n              type: ActionType.CommonOwnedTokenAccountsUpdate,\n              item: {\n                account: {\n                  publicKey: from,\n                  account: tokenAccount,\n                },\n              },\n            });\n\n            return tx;\n          }\n        })();\n\n        closeSnackbar();\n        enqueueSnackbar(`Withdraw complete`, {\n          variant: 'success',\n          action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n        });\n        onClose();\n      }}\n    />\n  );\n}\n\ntype TransferDialogProps = {\n  title: string;\n  contextText: string;\n  open: boolean;\n  deposit?: boolean;\n  onClose: () => void;\n  onTransfer: (\n    from: PublicKey,\n    amount: number,\n    isLocked: boolean,\n  ) => Promise<void>;\n};\n\nfunction TransferDialog(props: TransferDialogProps) {\n  const { mint, mintAccount } = useSelector((state: StoreState) => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const mint = registrar ? registrar.mint : undefined;\n    return {\n      mint,\n      mintAccount: state.accounts[registrar.mint.toString()],\n    };\n  });\n  const { enqueueSnackbar } = useSnackbar();\n  const { open, onClose, onTransfer, title, contextText, deposit } = props;\n  const [displayAmount, setDisplayAmount] = useState<null | number>(null);\n  const [from, setFrom] = useState<null | PublicKey>(null);\n  const [vesting, setVesting] = useState<null | PublicKey>(null);\n  const [maxDisplayAmount, setMaxDisplayAmount] = useState<null | number>(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const submitBtnDisabled =\n    (isLocked ? !vesting : !from) ||\n    !displayAmount ||\n    !maxDisplayAmount ||\n    displayAmount > maxDisplayAmount;\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={onClose}\n        fullWidth\n      >\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <DialogTitle>{title}</DialogTitle>\n          <div style={{ display: 'flex', paddingRight: '24px' }}>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <LockIcon />\n            </div>\n            <FormControlLabel\n              style={{ marginLeft: '0px', marginRight: '0px' }}\n              control={\n                <Switch\n                  checked={isLocked}\n                  onChange={() => setIsLocked(!isLocked)}\n                />\n              }\n              label=\"\"\n            />\n          </div>\n        </div>\n        <DialogContent>\n          <div style={{ display: 'flex' }}>\n            <div style={{ flex: 1 }}>\n              <TextField\n                style={{ width: '100%' }}\n                id=\"outlined-number\"\n                label=\"Amount\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                onChange={e =>\n                  setDisplayAmount(parseFloat(e.target.value) as number)\n                }\n                InputProps={{\n                  inputProps: { min: 0, max: maxDisplayAmount ?? 0 },\n                }}\n              />\n              <FormHelperText>{contextText}</FormHelperText>\n            </div>\n          </div>\n          <FormControl fullWidth>\n            {!isLocked ? (\n              <>\n                <OwnedTokenAccountsSelect\n                  variant=\"outlined\"\n                  decimals={mintAccount.decimals}\n                  mint={mint}\n                  onChange={(f: PublicKey, _maxDisplayAmount: BN) => {\n                    setFrom(f);\n                    // TODO: set an actual limit for the withdrawal UI (i.e.\n                    //       what's currently in the vault). Currently not\n                    //       done since we dont' have websocket connections\n                    //       for each of the users accounts. However we\n                    //       still use the \"max\" amount for display vesting\n                    //       accounts.\n                    setMaxDisplayAmount(2 ** 53);\n                  }}\n                />\n                <FormHelperText>\n                  Token account to transfer to/from\n                </FormHelperText>\n              </>\n            ) : (\n              <>\n                <VestingAccountsSelect\n                  variant=\"outlined\"\n                  mint={mint}\n                  decimals={mintAccount.decimals}\n                  deposit={deposit}\n                  onChange={(v: PublicKey, maxDisplayAmount: BN) => {\n                    setVesting(v);\n                    setMaxDisplayAmount(maxDisplayAmount.toNumber());\n                  }}\n                />\n                <FormHelperText>\n                  Vesting account to transfer to/from your <b>locked</b>{' '}\n                  balances\n                </FormHelperText>\n              </>\n            )}\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            //@ts-ignore\n            onClick={() => {\n              onTransfer(\n                isLocked ? vesting! : from!,\n                displayAmount!,\n                isLocked,\n              ).catch(err => {\n                console.error(err);\n                enqueueSnackbar(`Error transferring funds: ${err.toString()}`, {\n                  variant: 'error',\n                });\n              });\n            }}\n            color=\"primary\"\n            disabled={submitBtnDisabled}\n          >\n            {title}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n"]},"metadata":{},"sourceType":"module"}