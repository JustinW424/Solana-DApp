{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\components\\\\rewards\\\\ClaimRewardButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport { Account, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { createTokenAccountInstrs } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport * as notification from '../common/Notification';\nimport OwnedTokenAccountsSelect from '../common/OwnedTokenAccountsSelect';\nimport { ActionType } from '../../store/actions';\nimport { vendorSigner } from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ClaimRewardButton(props) {\n  _s();\n\n  const {\n    registryClient,\n    lockupClient\n  } = useWallet();\n  const {\n    member,\n    registrar\n  } = useSelector(state => {\n    const registrar = {\n      publicKey: state.registry.registrar,\n      account: state.accounts[state.registry.registrar.toString()]\n    };\n    const member = state.registry.member ? {\n      publicKey: state.registry.member,\n      account: state.accounts[state.registry.member.toString()]\n    } : undefined;\n    return {\n      registrar,\n      member\n    };\n  });\n  const {\n    rli\n  } = props;\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const [token, setToken] = useState(null); // On click.\n\n  const clickHandler = async () => {\n    notification.withTx(snack, `Processing vendor reward ${rli.vendor.publicKey.toString()}`, 'Reward processed', async () => {\n      const vendor = await registryClient.account.rewardVendor(rli.vendor.publicKey);\n\n      const _vendorSigner = await vendorSigner(registryClient.programId, registrar.publicKey, rli.vendor.publicKey);\n\n      if (rli.reward.locked) {\n        const vendoredVesting = new Account();\n        const vendoredVestingVault = new Account();\n        const vendoredVestingSigner = await vestingSigner(lockupClient.programId, vendoredVesting.publicKey);\n        const remainingAccounts = lockupClient.instruction.createVesting.accounts({\n          vesting: vendoredVesting.publicKey,\n          vault: vendoredVestingVault.publicKey,\n          depositor: vendor.vault,\n          depositorAuthority: _vendorSigner.publicKey,\n          tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n          rent: SYSVAR_RENT_PUBKEY,\n          clock: SYSVAR_CLOCK_PUBKEY\n        }) // Change the signer status on the vendor signer since it's signed by the program, not the\n        // client.\n        .map(meta => meta.pubkey.equals(_vendorSigner.publicKey) ? { ...meta,\n          isSigner: false\n        } : meta);\n        const tx = await registryClient.rpc.claimRewardLocked(vendoredVestingSigner.nonce, {\n          accounts: {\n            // @ts-ignore\n            registry: await registryClient.state.address(),\n            lockupProgram: lockupClient.programId,\n            cmn: {\n              registrar: registrar.publicKey,\n              member: member.publicKey,\n              beneficiary: registryClient.provider.wallet.publicKey,\n              balances: member.account.balances,\n              balancesLocked: member.account.balancesLocked,\n              vendor: rli.vendor.publicKey,\n              vault: rli.vendor.account.vault,\n              vendorSigner: _vendorSigner.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY\n            }\n          },\n          remainingAccounts,\n          signers: [vendoredVesting, vendoredVestingVault],\n          instructions: [await lockupClient.account.vesting.createInstruction(vendoredVesting), ...(await createTokenAccountInstrs(registryClient.provider, vendoredVestingVault.publicKey, rli.vendor.account.mint, vendoredVestingSigner.publicKey))]\n        }); // Refetch the vesting accounts to update the UI with the new reward.\n\n        const vestingAccounts = await lockupClient.account.vesting.all(registryClient.provider.wallet.publicKey.toBuffer());\n        vestingAccounts.forEach(account => {\n          dispatch({\n            type: ActionType.AccountAdd,\n            item: {\n              account\n            }\n          });\n        });\n        dispatch({\n          type: ActionType.LockupSetVestings,\n          item: {\n            vestingAccounts: vestingAccounts.map(v => v.publicKey)\n          }\n        });\n        return tx;\n      } else {\n        return await registryClient.rpc.claimReward({\n          accounts: {\n            to: token,\n            cmn: {\n              registrar: registrar.publicKey,\n              member: member.publicKey,\n              beneficiary: registryClient.provider.wallet.publicKey,\n              balances: member.account.balances,\n              balancesLocked: member.account.balancesLocked,\n              vendor: rli.vendor.publicKey,\n              vault: vendor.vault,\n              vendorSigner: _vendorSigner.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY\n            }\n          }\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!rli.reward.locked && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(OwnedTokenAccountsSelect, {\n        style: {\n          width: '400px',\n          height: '100%'\n        },\n        mint: rli.vendor.account.mint,\n        onChange: f => setToken(f)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: '10px',\n        marginRight: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        disabled: rli.reward.unlockedAlloc && token === null,\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => clickHandler().catch(err => {\n          console.error(err);\n          snack.enqueueSnackbar(`Error ending pending redemption: ${err.toString()}`, {\n            variant: 'error'\n          });\n        }),\n        children: \"Process Reward\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClaimRewardButton, \"YxxPmfVaNVNHeeVcN4BihUA/gSM=\", false, function () {\n  return [useWallet, useSelector, useDispatch, useSnackbar];\n});\n\n_c = ClaimRewardButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimRewardButton\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/components/rewards/ClaimRewardButton.tsx"],"names":["React","useState","useDispatch","useSelector","useSnackbar","Button","Account","SYSVAR_RENT_PUBKEY","SYSVAR_CLOCK_PUBKEY","TokenInstructions","createTokenAccountInstrs","useWallet","notification","OwnedTokenAccountsSelect","ActionType","vendorSigner","vestingSigner","ClaimRewardButton","props","registryClient","lockupClient","member","registrar","state","publicKey","registry","account","accounts","toString","undefined","rli","dispatch","snack","token","setToken","clickHandler","withTx","vendor","rewardVendor","_vendorSigner","programId","reward","locked","vendoredVesting","vendoredVestingVault","vendoredVestingSigner","remainingAccounts","instruction","createVesting","vesting","vault","depositor","depositorAuthority","tokenProgram","TOKEN_PROGRAM_ID","rent","clock","map","meta","pubkey","equals","isSigner","tx","rpc","claimRewardLocked","nonce","address","lockupProgram","cmn","beneficiary","provider","wallet","balances","balancesLocked","signers","instructions","createInstruction","mint","vestingAccounts","all","toBuffer","forEach","type","AccountAdd","item","LockupSetVestings","v","claimReward","to","width","height","f","marginLeft","marginRight","unlockedAlloc","catch","err","console","error","enqueueSnackbar","variant"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { createTokenAccountInstrs } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport * as notification from '../common/Notification';\nimport OwnedTokenAccountsSelect from '../common/OwnedTokenAccountsSelect';\nimport { RewardListItemViewModel } from './RewardsList';\nimport { ActionType } from '../../store/actions';\nimport { State as StoreState } from '../../store/reducer';\nimport { vendorSigner } from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\n\ntype ClaimRewardButtonProps = {\n  rli: RewardListItemViewModel;\n};\n\nexport default function ClaimRewardButton(props: ClaimRewardButtonProps) {\n  const { registryClient, lockupClient } = useWallet();\n  const { member, registrar } = useSelector((state: StoreState) => {\n    const registrar = {\n      publicKey: state.registry.registrar,\n      account: state.accounts[state.registry.registrar.toString()],\n    };\n    const member = state.registry.member\n      ? {\n          publicKey: state.registry.member,\n          account: state.accounts[state.registry.member.toString()],\n        }\n      : undefined;\n    return {\n      registrar,\n      member,\n    };\n  });\n  const { rli } = props;\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const [token, setToken] = useState<null | PublicKey>(null);\n\n  // On click.\n  const clickHandler = async (): Promise<void> => {\n    notification.withTx(\n      snack,\n      `Processing vendor reward ${rli!.vendor!.publicKey.toString()}`,\n      'Reward processed',\n      async () => {\n        const vendor = await registryClient.account.rewardVendor(\n          rli.vendor!.publicKey,\n        );\n        const _vendorSigner = await vendorSigner(\n          registryClient.programId,\n          registrar.publicKey,\n          rli.vendor!.publicKey,\n        );\n        if (rli!.reward.locked) {\n          const vendoredVesting = new Account();\n          const vendoredVestingVault = new Account();\n          const vendoredVestingSigner = await vestingSigner(\n            lockupClient.programId,\n            vendoredVesting.publicKey,\n          );\n          const remainingAccounts = lockupClient.instruction.createVesting\n            .accounts({\n              vesting: vendoredVesting.publicKey,\n              vault: vendoredVestingVault.publicKey,\n              depositor: vendor.vault,\n              depositorAuthority: _vendorSigner.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              rent: SYSVAR_RENT_PUBKEY,\n              clock: SYSVAR_CLOCK_PUBKEY,\n            })\n            // Change the signer status on the vendor signer since it's signed by the program, not the\n            // client.\n            .map((meta: any) =>\n              meta.pubkey.equals(_vendorSigner.publicKey)\n                ? { ...meta, isSigner: false }\n                : meta,\n            );\n          const tx = await registryClient.rpc.claimRewardLocked(\n            vendoredVestingSigner.nonce,\n            {\n              accounts: {\n                // @ts-ignore\n                registry: await registryClient.state.address(),\n                lockupProgram: lockupClient.programId,\n                cmn: {\n                  registrar: registrar.publicKey,\n                  member: member!.publicKey,\n                  beneficiary: registryClient.provider.wallet.publicKey,\n                  balances: member!.account.balances,\n                  balancesLocked: member!.account.balancesLocked,\n                  vendor: rli.vendor!.publicKey,\n                  vault: rli.vendor!.account.vault,\n                  vendorSigner: _vendorSigner.publicKey,\n                  tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                  clock: SYSVAR_CLOCK_PUBKEY,\n                },\n              },\n              remainingAccounts,\n              signers: [vendoredVesting, vendoredVestingVault],\n              instructions: [\n                await lockupClient.account.vesting.createInstruction(\n                  vendoredVesting,\n                ),\n                ...(await createTokenAccountInstrs(\n                  registryClient.provider,\n                  vendoredVestingVault.publicKey,\n                  rli.vendor!.account.mint,\n                  vendoredVestingSigner.publicKey,\n                )),\n              ],\n            },\n          );\n          // Refetch the vesting accounts to update the UI with the new reward.\n          const vestingAccounts = await lockupClient.account.vesting.all(\n            registryClient.provider.wallet.publicKey.toBuffer(),\n          );\n          vestingAccounts.forEach(account => {\n            dispatch({\n              type: ActionType.AccountAdd,\n              item: {\n                account,\n              },\n            });\n          });\n          dispatch({\n            type: ActionType.LockupSetVestings,\n            item: {\n              vestingAccounts: vestingAccounts.map(v => v.publicKey),\n            },\n          });\n          return tx;\n        } else {\n          return await registryClient.rpc.claimReward({\n            accounts: {\n              to: token,\n              cmn: {\n                registrar: registrar.publicKey,\n                member: member!.publicKey,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                balances: member!.account.balances,\n                balancesLocked: member!.account.balancesLocked,\n\n                vendor: rli.vendor!.publicKey,\n                vault: vendor.vault,\n                vendorSigner: _vendorSigner.publicKey,\n\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                clock: SYSVAR_CLOCK_PUBKEY,\n              },\n            },\n          });\n        }\n      },\n    );\n  };\n\n  return (\n    <>\n      {!rli.reward.locked && (\n        <div>\n          <OwnedTokenAccountsSelect\n            style={{ width: '400px', height: '100%' }}\n            mint={rli.vendor.account.mint}\n            onChange={(f: PublicKey) => setToken(f)}\n          />\n        </div>\n      )}\n      <div style={{ marginLeft: '10px', marginRight: '10px' }}>\n        <Button\n          disabled={rli.reward.unlockedAlloc && token === null}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() =>\n            clickHandler().catch(err => {\n              console.error(err);\n              snack.enqueueSnackbar(\n                `Error ending pending redemption: ${err.toString()}`,\n                {\n                  variant: 'error',\n                },\n              );\n            })\n          }\n        >\n          Process Reward\n        </Button>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}