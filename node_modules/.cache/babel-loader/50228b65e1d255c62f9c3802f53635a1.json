{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GetMultipleAccountsAndContextRpcResult = exports.getMultipleSolanaAccounts = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst superstruct_1 = require(\"superstruct\");\n\nconst assert_1 = __importDefault(require(\"assert\"));\n\nasync function getMultipleSolanaAccounts(connection, publicKeys) {\n  const args = [publicKeys.map(k => k.toBase58()), {\n    commitment: 'recent'\n  }]; // @ts-ignore\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  const res = exports.GetMultipleAccountsAndContextRpcResult(unsafeRes);\n\n  if (res.error) {\n    throw new Error('failed to get info about accounts ' + publicKeys.map(k => k.toBase58()).join(', ') + ': ' + res.error.message);\n  }\n\n  assert_1.default(typeof res.result !== 'undefined');\n  const accounts = [];\n\n  for (const account of res.result.value) {\n    let value = null;\n\n    if (res.result.value) {\n      const {\n        executable,\n        owner,\n        lamports,\n        data\n      } = account;\n      assert_1.default(data[1] === 'base64');\n      value = {\n        executable,\n        owner: new web3_js_1.PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64')\n      };\n    }\n\n    if (value === null) {\n      throw new Error('Invalid response');\n    }\n\n    accounts.push(value);\n  }\n\n  return accounts.map((account, idx) => {\n    return {\n      publicKey: publicKeys[idx],\n      account\n    };\n  });\n}\n\nexports.getMultipleSolanaAccounts = getMultipleSolanaAccounts;\n\nfunction jsonRpcResult(resultDescription) {\n  const jsonRpcVersion = superstruct_1.struct.literal('2.0');\n  return superstruct_1.struct.union([superstruct_1.struct({\n    jsonrpc: jsonRpcVersion,\n    id: 'string',\n    error: 'any'\n  }), superstruct_1.struct({\n    jsonrpc: jsonRpcVersion,\n    id: 'string',\n    error: 'null?',\n    result: resultDescription\n  })]);\n}\n\nfunction jsonRpcResultAndContext(resultDescription) {\n  return jsonRpcResult({\n    context: superstruct_1.struct({\n      slot: 'number'\n    }),\n    value: resultDescription\n  });\n}\n\nconst AccountInfoResult = superstruct_1.struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?'\n});\nexports.GetMultipleAccountsAndContextRpcResult = jsonRpcResultAndContext(superstruct_1.struct.array([superstruct_1.struct.union(['null', AccountInfoResult])]));","map":{"version":3,"sources":["../../src/connection.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetMultipleAccountsAndContextRpcResult = exports.getMultipleSolanaAccounts = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = __importDefault(require(\"assert\"));\nasync function getMultipleSolanaAccounts(connection, publicKeys) {\n    const args = [publicKeys.map(k => k.toBase58()), { commitment: 'recent' }];\n    // @ts-ignore\n    const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n    const res = exports.GetMultipleAccountsAndContextRpcResult(unsafeRes);\n    if (res.error) {\n        throw new Error('failed to get info about accounts ' +\n            publicKeys.map(k => k.toBase58()).join(', ') +\n            ': ' +\n            res.error.message);\n    }\n    assert_1.default(typeof res.result !== 'undefined');\n    const accounts = [];\n    for (const account of res.result.value) {\n        let value = null;\n        if (res.result.value) {\n            const { executable, owner, lamports, data } = account;\n            assert_1.default(data[1] === 'base64');\n            value = {\n                executable,\n                owner: new web3_js_1.PublicKey(owner),\n                lamports,\n                data: Buffer.from(data[0], 'base64'),\n            };\n        }\n        if (value === null) {\n            throw new Error('Invalid response');\n        }\n        accounts.push(value);\n    }\n    return accounts.map((account, idx) => {\n        return {\n            publicKey: publicKeys[idx],\n            account,\n        };\n    });\n}\nexports.getMultipleSolanaAccounts = getMultipleSolanaAccounts;\nfunction jsonRpcResult(resultDescription) {\n    const jsonRpcVersion = superstruct_1.struct.literal('2.0');\n    return superstruct_1.struct.union([\n        superstruct_1.struct({\n            jsonrpc: jsonRpcVersion,\n            id: 'string',\n            error: 'any',\n        }),\n        superstruct_1.struct({\n            jsonrpc: jsonRpcVersion,\n            id: 'string',\n            error: 'null?',\n            result: resultDescription,\n        }),\n    ]);\n}\nfunction jsonRpcResultAndContext(resultDescription) {\n    return jsonRpcResult({\n        context: superstruct_1.struct({\n            slot: 'number',\n        }),\n        value: resultDescription,\n    });\n}\nconst AccountInfoResult = superstruct_1.struct({\n    executable: 'boolean',\n    owner: 'string',\n    lamports: 'number',\n    data: 'any',\n    rentEpoch: 'number?',\n});\nexports.GetMultipleAccountsAndContextRpcResult = jsonRpcResultAndContext(superstruct_1.struct.array([superstruct_1.struct.union(['null', AccountInfoResult])]));\n//# sourceMappingURL=connection.js.map"]},"metadata":{},"sourceType":"script"}