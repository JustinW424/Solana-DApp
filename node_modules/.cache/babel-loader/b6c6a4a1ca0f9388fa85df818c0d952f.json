{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\components\\\\rewards\\\\Rewards.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport * as anchor from '@project-serum/anchor';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { ActionType } from '../../store/actions';\nimport RewardsList, { RewardListItemViewModel } from './RewardsList';\nimport DropRewardButton from './DropRewardButton';\nimport ClaimRewardButton from './ClaimRewardButton';\nimport { rewardEvents } from '../../utils/registry';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Rewards() {\n  _s();\n\n  const {\n    registryClient\n  } = useWallet();\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const ctx = useSelector(state => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const rewardEventQueue = {\n      publicKey: registrar.rewardEventQ,\n      account: state.accounts[registrar.rewardEventQ.toString()]\n    };\n    return {\n      accounts: state.accounts,\n      rewardEventQueue,\n      member: state.registry.member ? {\n        publicKey: state.registry.member,\n        account: state.accounts[state.registry.member.toString()]\n      } : undefined,\n      network: state.common.network\n    };\n  });\n  const {\n    rewardEventQueue\n  } = ctx;\n  const events = useMemo(() => rewardEvents(rewardEventQueue.account), [rewardEventQueue.account]);\n  useEffect(() => {\n    (async () => {\n      // TODO: need to chop up the calls here, for reward vendors > 100 entires.\n      const accounts = await anchor.utils.getMultipleAccounts(registryClient.provider.connection, events.map(m => m.vendor));\n      accounts.forEach(a => {\n        if (a === null) {\n          snack.enqueueSnackbar(`RPC node returned invalid vendor account`, {\n            variant: 'error'\n          });\n          return;\n        }\n\n        const account = registryClient.coder.accounts.decode('RewardVendor', a.account.data);\n        dispatch({\n          type: ActionType.AccountAdd,\n          item: {\n            account: {\n              publicKey: a.publicKey,\n              account\n            }\n          }\n        });\n      });\n    })();\n  }, [events, dispatch, snack, registryClient.coder.accounts, registryClient.provider.connection]); // All rewards to display.\n\n  const rewards = events.map(m => RewardListItemViewModel.fromMessage(ctx, m)).reverse(); // Next reward to claim.\n\n  let nextReward = null;\n\n  if (rewards.filter(r => r === null).length === 0) {\n    nextReward = rewards.filter(r => r.needsClaim).sort((a, b) => a.cursor < b.cursor ? -1 : a.cursor > b.cursor ? 1 : 0).shift();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      marginTop: '24px'\n    },\n    children: [nextReward && /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        marginBottom: '24px'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: [\"You were staked during a previous reward. To prove eligibility, click the \\\"Process\\\" button until you've processed \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"all\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 65\n          }, this), ' ', \"eligible rewards. For unlocked rewards, don't forget to select the address you wish to send your stake reward to.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px',\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          fontWeight: 'bold',\n          fontSize: '20px'\n        },\n        children: \"Reward History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        children: [nextReward && /*#__PURE__*/_jsxDEV(ClaimRewardButton, {\n          rli: nextReward\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 26\n        }, this), localStorage.getItem('private') && /*#__PURE__*/_jsxDEV(DropRewardButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '16px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"When rewards are dropped, one must prove one was staked during the time of drop. This means sending a transaction to the staking program to \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"process\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 14\n        }, this), \" the reward. For \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"unlocked\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 45\n        }, this), \" rewards, select the token address to transfer the reward to. For \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"locked\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 56\n        }, this), \" rewards, a locked vesting account will be created and realized to the staker upon unstaking. See the Lockup tab.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      children: /*#__PURE__*/_jsxDEV(RewardsList, {\n        rewards: rewards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Rewards, \"GAVntCR71i2A8QH/TLpSBJv6u0k=\", false, function () {\n  return [useWallet, useDispatch, useSnackbar, useSelector];\n});\n\n_c = Rewards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rewards\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/components/rewards/Rewards.tsx"],"names":["React","useEffect","useMemo","useSelector","useDispatch","useSnackbar","Typography","Paper","Card","CardContent","anchor","useWallet","ActionType","RewardsList","RewardListItemViewModel","DropRewardButton","ClaimRewardButton","rewardEvents","Rewards","registryClient","dispatch","snack","ctx","state","registrar","accounts","registry","toString","rewardEventQueue","publicKey","rewardEventQ","account","member","undefined","network","common","events","utils","getMultipleAccounts","provider","connection","map","m","vendor","forEach","a","enqueueSnackbar","variant","coder","decode","data","type","AccountAdd","item","rewards","fromMessage","reverse","nextReward","filter","r","length","needsClaim","sort","b","cursor","shift","width","marginTop","marginBottom","display","justifyContent","fontWeight","fontSize","localStorage","getItem"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport * as anchor from '@project-serum/anchor';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport RewardsList, { RewardListItemViewModel } from './RewardsList';\nimport DropRewardButton from './DropRewardButton';\nimport ClaimRewardButton from './ClaimRewardButton';\nimport { rewardEvents } from '../../utils/registry';\n\nexport default function Rewards() {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const ctx = useSelector((state: StoreState) => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const rewardEventQueue = {\n      publicKey: registrar.rewardEventQ,\n      account: state.accounts[registrar.rewardEventQ.toString()],\n    };\n    return {\n      accounts: state.accounts,\n      rewardEventQueue,\n      member: state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined,\n      network: state.common.network,\n    };\n  });\n  const { rewardEventQueue } = ctx;\n\n  const events = useMemo(() => rewardEvents(rewardEventQueue.account), [\n    rewardEventQueue.account,\n  ]);\n\n  useEffect(() => {\n    (async () => {\n      // TODO: need to chop up the calls here, for reward vendors > 100 entires.\n      const accounts = await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        events.map(m => m.vendor),\n      );\n      accounts.forEach(a => {\n        if (a === null) {\n          snack.enqueueSnackbar(`RPC node returned invalid vendor account`, {\n            variant: 'error',\n          });\n          return;\n        }\n        const account = registryClient.coder.accounts.decode(\n          'RewardVendor',\n          a.account.data,\n        );\n        dispatch({\n          type: ActionType.AccountAdd,\n          item: {\n            account: { publicKey: a.publicKey, account },\n          },\n        });\n      });\n    })();\n  }, [\n    events,\n    dispatch,\n    snack,\n    registryClient.coder.accounts,\n    registryClient.provider.connection,\n  ]);\n\n  // All rewards to display.\n  const rewards = events\n    .map((m: any) => RewardListItemViewModel.fromMessage(ctx, m))\n    .reverse();\n\n  // Next reward to claim.\n  let nextReward = null;\n  if (rewards.filter(r => r === null).length === 0) {\n    nextReward = rewards\n      .filter(r => r!.needsClaim)\n      .sort((a, b) =>\n        a!.cursor < b!.cursor ? -1 : a!.cursor > b!.cursor ? 1 : 0,\n      )\n      .shift();\n  }\n\n  return (\n    <div style={{ width: '100%', marginTop: '24px' }}>\n      {nextReward && (\n        <Card style={{ marginBottom: '24px' }}>\n          <CardContent>\n            <Typography variant=\"h6\">\n              You were staked during a previous reward. To prove eligibility,\n              click the \"Process\" button until you've processed <b>all</b>{' '}\n              eligible rewards. For unlocked rewards, don't forget to select the\n              address you wish to send your stake reward to.\n            </Typography>\n          </CardContent>\n        </Card>\n      )}\n      <div\n        style={{\n          marginBottom: '10px',\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <Typography style={{ fontWeight: 'bold', fontSize: '20px' }}>\n          Reward History\n        </Typography>\n        <div style={{ display: 'flex' }}>\n          {nextReward && <ClaimRewardButton rli={nextReward} />}\n          {localStorage.getItem('private') && <DropRewardButton />}\n        </div>\n      </div>\n      <div style={{ marginBottom: '16px' }}>\n        <Typography>\n          When rewards are dropped, one must prove one was staked during the\n          time of drop. This means sending a transaction to the staking program\n          to <b>process</b> the reward. For <b>unlocked</b> rewards, select the\n          token address to transfer the reward to. For <b>locked</b> rewards, a\n          locked vesting account will be created and realized to the staker upon\n          unstaking. See the Lockup tab.\n        </Typography>\n      </div>\n      <Paper>\n        <RewardsList rewards={rewards} />\n      </Paper>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}