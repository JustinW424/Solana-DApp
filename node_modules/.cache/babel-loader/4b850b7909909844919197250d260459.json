{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\components\\\\Me.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Me() {\n  _s();\n\n  const {\n    member\n  } = useSelector(state => {\n    return {\n      member: state.registry.member\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        marginTop: '24px',\n        marginBottom: '24px'\n      },\n      children: member && /*#__PURE__*/_jsxDEV(MemberBalancesCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n} // Assumes a member and all vaults is available in the store.\n\n_s(Me, \"X+P5dKpUmylayKFzrM2tt8HsyQs=\", false, function () {\n  return [useSelector];\n});\n\n_c = Me;\n\nfunction MemberBalancesCard() {\n  _s2();\n\n  const {\n    mint,\n    registrar,\n    vault,\n    vaultStake,\n    vaultPw,\n    spt,\n    lockedVault,\n    lockedVaultStake,\n    lockedVaultPw,\n    lockedSpt\n  } = useSelector(state => {\n    const member = state.accounts[state.registry.member.toString()];\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar,\n      mint: state.accounts[registrar.mint.toString()],\n      vault: state.accounts[member.balances.vault],\n      vaultStake: state.accounts[member.balances.vaultStake],\n      vaultPw: state.accounts[member.balances.vaultPw],\n      spt: state.accounts[member.balances.spt],\n      lockedVault: state.accounts[member.balancesLocked.vault],\n      lockedVaultStake: state.accounts[member.balancesLocked.vaultStake],\n      lockedVaultPw: state.accounts[member.balancesLocked.vaultPw],\n      lockedSpt: state.accounts[member.balancesLocked.spt]\n    };\n  });\n  const tables = [{\n    title: 'Main Balances',\n    description: 'Balances deposited directly from the connected wallet.',\n    rows: [{\n      token: toDisplayLabel(registrar.mint),\n      balance: toDisplay(vault.amount, mint.decimals),\n      stake: toDisplay(vaultStake.amount, mint.decimals),\n      pending: toDisplay(vaultPw.amount, mint.decimals),\n      spt: toDisplay(spt.amount, 0)\n    }]\n  }, {\n    title: 'Locked Balances',\n    description: 'Balances deposited from the lockup program. These funds are isolated from the Main Balances and may only be withdrawn back to the lockup program. At all times they are program controlled.',\n    rows: [{\n      token: toDisplayLabel(registrar.mint),\n      balance: toDisplay(lockedVault.amount, mint.decimals),\n      stake: toDisplay(lockedVaultStake.amount, mint.decimals),\n      pending: toDisplay(lockedVaultPw.amount, mint.decimals),\n      spt: toDisplay(lockedSpt.amount, 0)\n    }]\n  }];\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      marginBottom: '24px'\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      style: {\n        marginTop: '24px',\n        position: 'relative',\n        paddingTop: 0,\n        paddingBottom: '16px'\n      },\n      children: tables.map(t => /*#__PURE__*/_jsxDEV(BalanceTable, {\n        title: t.title,\n        description: t.description,\n        rows: t.rows\n      }, t.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(MemberBalancesCard, \"FeRhEze+PF51/CqPRzWj7cJk4Ug=\", false, function () {\n  return [useSelector];\n});\n\n_c2 = MemberBalancesCard;\n\nfunction BalanceTable(props) {\n  const {\n    title,\n    rows,\n    description\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '16px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      style: {\n        fontWeight: 'bold'\n      },\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"textSecondary\",\n      style: {\n        fontSize: '14px'\n      },\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Token\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Pending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Staked\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Pool\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: rows === null ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this) : rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              children: row.token\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: row.balance\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: row.pending\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: row.stake\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: row.spt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 19\n            }, this)]\n          }, row.token, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = BalanceTable;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Me\");\n$RefreshReg$(_c2, \"MemberBalancesCard\");\n$RefreshReg$(_c3, \"BalanceTable\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/components/Me.tsx"],"names":["React","useSelector","Card","CardContent","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","CircularProgress","toDisplay","toDisplayLabel","Me","member","state","registry","display","width","flex","marginTop","marginBottom","MemberBalancesCard","mint","registrar","vault","vaultStake","vaultPw","spt","lockedVault","lockedVaultStake","lockedVaultPw","lockedSpt","accounts","toString","balances","balancesLocked","tables","title","description","rows","token","balance","amount","decimals","stake","pending","position","paddingTop","paddingBottom","map","t","BalanceTable","props","fontWeight","fontSize","row"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AAEA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,iBAA1C;;AAEA,eAAe,SAASC,EAAT,GAAc;AAAA;;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAad,WAAW,CAAEe,KAAD,IAAuB;AACpD,WAAO;AACLD,MAAAA,MAAM,EAAEC,KAAK,CAACC,QAAN,CAAeF;AADlB,KAAP;AAGD,GAJ6B,CAA9B;AAMA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEG,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,KAAK,EAAE;AAA1B,KAAZ;AAAA,2BACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,SAAS,EAAE,MAAtB;AAA8BC,QAAAA,YAAY,EAAE;AAA5C,OAAZ;AAAA,gBACGP,MAAM,iBAAI,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AADb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,C,CAED;;GAhBwBD,E;UACHb,W;;;KADGa,E;;AAiBxB,SAASS,kBAAT,GAA8B;AAAA;;AAC5B,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA,GANI;AAOJC,IAAAA,WAPI;AAQJC,IAAAA,gBARI;AASJC,IAAAA,aATI;AAUJC,IAAAA;AAVI,MAWFhC,WAAW,CAAEe,KAAD,IAAuB;AACrC,UAAMD,MAAM,GAAGC,KAAK,CAACkB,QAAN,CAAelB,KAAK,CAACC,QAAN,CAAeF,MAAf,CAAuBoB,QAAvB,EAAf,CAAf;AACA,UAAMV,SAAS,GAAGT,KAAK,CAACkB,QAAN,CAAelB,KAAK,CAACC,QAAN,CAAeQ,SAAf,CAAyBU,QAAzB,EAAf,CAAlB;AACA,WAAO;AACLV,MAAAA,SADK;AAELD,MAAAA,IAAI,EAAER,KAAK,CAACkB,QAAN,CAAeT,SAAS,CAACD,IAAV,CAAeW,QAAf,EAAf,CAFD;AAGLT,MAAAA,KAAK,EAAEV,KAAK,CAACkB,QAAN,CAAenB,MAAM,CAACqB,QAAP,CAAgBV,KAA/B,CAHF;AAILC,MAAAA,UAAU,EAAEX,KAAK,CAACkB,QAAN,CAAenB,MAAM,CAACqB,QAAP,CAAgBT,UAA/B,CAJP;AAKLC,MAAAA,OAAO,EAAEZ,KAAK,CAACkB,QAAN,CAAenB,MAAM,CAACqB,QAAP,CAAgBR,OAA/B,CALJ;AAMLC,MAAAA,GAAG,EAAEb,KAAK,CAACkB,QAAN,CAAenB,MAAM,CAACqB,QAAP,CAAgBP,GAA/B,CANA;AAOLC,MAAAA,WAAW,EAAEd,KAAK,CAACkB,QAAN,CAAenB,MAAM,CAACsB,cAAP,CAAsBX,KAArC,CAPR;AAQLK,MAAAA,gBAAgB,EAAEf,KAAK,CAACkB,QAAN,CAAenB,MAAM,CAACsB,cAAP,CAAsBV,UAArC,CARb;AASLK,MAAAA,aAAa,EAAEhB,KAAK,CAACkB,QAAN,CAAenB,MAAM,CAACsB,cAAP,CAAsBT,OAArC,CATV;AAULK,MAAAA,SAAS,EAAEjB,KAAK,CAACkB,QAAN,CAAenB,MAAM,CAACsB,cAAP,CAAsBR,GAArC;AAVN,KAAP;AAYD,GAfc,CAXf;AA2BA,QAAMS,MAAM,GAAG,CACb;AACEC,IAAAA,KAAK,EAAE,eADT;AAEEC,IAAAA,WAAW,EAAE,wDAFf;AAGEC,IAAAA,IAAI,EAAE,CACJ;AACEC,MAAAA,KAAK,EAAE7B,cAAc,CAACY,SAAS,CAACD,IAAX,CADvB;AAEEmB,MAAAA,OAAO,EAAE/B,SAAS,CAACc,KAAK,CAACkB,MAAP,EAAepB,IAAI,CAACqB,QAApB,CAFpB;AAGEC,MAAAA,KAAK,EAAElC,SAAS,CAACe,UAAU,CAACiB,MAAZ,EAAoBpB,IAAI,CAACqB,QAAzB,CAHlB;AAIEE,MAAAA,OAAO,EAAEnC,SAAS,CAACgB,OAAO,CAACgB,MAAT,EAAiBpB,IAAI,CAACqB,QAAtB,CAJpB;AAKEhB,MAAAA,GAAG,EAAEjB,SAAS,CAACiB,GAAG,CAACe,MAAL,EAAa,CAAb;AALhB,KADI;AAHR,GADa,EAcb;AACEL,IAAAA,KAAK,EAAE,iBADT;AAEEC,IAAAA,WAAW,EACT,6LAHJ;AAIEC,IAAAA,IAAI,EAAE,CACJ;AACEC,MAAAA,KAAK,EAAE7B,cAAc,CAACY,SAAS,CAACD,IAAX,CADvB;AAEEmB,MAAAA,OAAO,EAAE/B,SAAS,CAACkB,WAAW,CAACc,MAAb,EAAqBpB,IAAI,CAACqB,QAA1B,CAFpB;AAGEC,MAAAA,KAAK,EAAElC,SAAS,CAACmB,gBAAgB,CAACa,MAAlB,EAA0BpB,IAAI,CAACqB,QAA/B,CAHlB;AAIEE,MAAAA,OAAO,EAAEnC,SAAS,CAACoB,aAAa,CAACY,MAAf,EAAuBpB,IAAI,CAACqB,QAA5B,CAJpB;AAKEhB,MAAAA,GAAG,EAAEjB,SAAS,CAACqB,SAAS,CAACW,MAAX,EAAmB,CAAnB;AALhB,KADI;AAJR,GAda,CAAf;AA6BA,sBACE,QAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLtB,MAAAA,YAAY,EAAE;AADT,KADT;AAAA,2BAKE,QAAC,WAAD;AACE,MAAA,KAAK,EAAE;AACLD,QAAAA,SAAS,EAAE,MADN;AAEL2B,QAAAA,QAAQ,EAAE,UAFL;AAGLC,QAAAA,UAAU,EAAE,CAHP;AAILC,QAAAA,aAAa,EAAE;AAJV,OADT;AAAA,gBAQGZ,MAAM,CAACa,GAAP,CAAWC,CAAC,iBACX,QAAC,YAAD;AAEE,QAAA,KAAK,EAAEA,CAAC,CAACb,KAFX;AAGE,QAAA,WAAW,EAAEa,CAAC,CAACZ,WAHjB;AAIE,QAAA,IAAI,EAAEY,CAAC,CAACX;AAJV,SACOW,CAAC,CAACb,KADT;AAAA;AAAA;AAAA;AAAA,cADD;AARH;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD;;IAlFQhB,kB;UAYHtB,W;;;MAZGsB,kB;;AAkGT,SAAS8B,YAAT,CAAsBC,KAAtB,EAAgD;AAC9C,QAAM;AAAEf,IAAAA,KAAF;AAASE,IAAAA,IAAT;AAAeD,IAAAA;AAAf,MAA+Bc,KAArC;AACA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEhC,MAAAA,YAAY,EAAE;AAAhB,KAAZ;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAE;AAAEiC,QAAAA,UAAU,EAAE;AAAd,OAAnB;AAAA,gBAA4ChB;AAA5C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAC,eAAlB;AAAkC,MAAA,KAAK,EAAE;AAAEiB,QAAAA,QAAQ,EAAE;AAAZ,OAAzC;AAAA,gBACGhB;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE,QAAC,cAAD;AAAA,6BACE,QAAC,KAAD;AAAA,gCACE,QAAC,SAAD;AAAA,iCACE,QAAC,QAAD;AAAA,oCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE,QAAC,SAAD;AAAA,oBACGC,IAAI,KAAK,IAAT,gBACC,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,kBADD,GAGCA,IAAI,CAACU,GAAL,CAASM,GAAG,iBACV,QAAC,QAAD;AAAA,oCACE,QAAC,SAAD;AAAW,cAAA,SAAS,EAAC,IAArB;AAA0B,cAAA,KAAK,EAAC,KAAhC;AAAA,wBACGA,GAAG,CAACf;AADP;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,OAAjB;AAAA,wBAA0Be,GAAG,CAACd;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,OAAjB;AAAA,wBAA0Bc,GAAG,CAACV;AAA9B;AAAA;AAAA;AAAA;AAAA,oBALF,eAME,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,OAAjB;AAAA,wBAA0BU,GAAG,CAACX;AAA9B;AAAA;AAAA;AAAA;AAAA,oBANF,eAOE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,OAAjB;AAAA,wBAA0BW,GAAG,CAAC5B;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAPF;AAAA,aAAe4B,GAAG,CAACf,KAAnB;AAAA;AAAA;AAAA;AAAA,kBADF;AAJJ;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD;;MAxCQW,Y","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { State as StoreState } from '../store/reducer';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\n\nexport default function Me() {\n  const { member } = useSelector((state: StoreState) => {\n    return {\n      member: state.registry.member,\n    };\n  });\n\n  return (\n    <div style={{ display: 'flex', width: '100%' }}>\n      <div style={{ flex: 1, marginTop: '24px', marginBottom: '24px' }}>\n        {member && <MemberBalancesCard />}\n      </div>\n    </div>\n  );\n}\n\n// Assumes a member and all vaults is available in the store.\nfunction MemberBalancesCard() {\n  const {\n    mint,\n    registrar,\n    vault,\n    vaultStake,\n    vaultPw,\n    spt,\n    lockedVault,\n    lockedVaultStake,\n    lockedVaultPw,\n    lockedSpt,\n  } = useSelector((state: StoreState) => {\n    const member = state.accounts[state.registry.member!.toString()];\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar,\n      mint: state.accounts[registrar.mint.toString()],\n      vault: state.accounts[member.balances.vault],\n      vaultStake: state.accounts[member.balances.vaultStake],\n      vaultPw: state.accounts[member.balances.vaultPw],\n      spt: state.accounts[member.balances.spt],\n      lockedVault: state.accounts[member.balancesLocked.vault],\n      lockedVaultStake: state.accounts[member.balancesLocked.vaultStake],\n      lockedVaultPw: state.accounts[member.balancesLocked.vaultPw],\n      lockedSpt: state.accounts[member.balancesLocked.spt],\n    };\n  });\n  const tables = [\n    {\n      title: 'Main Balances',\n      description: 'Balances deposited directly from the connected wallet.',\n      rows: [\n        {\n          token: toDisplayLabel(registrar.mint),\n          balance: toDisplay(vault.amount, mint.decimals),\n          stake: toDisplay(vaultStake.amount, mint.decimals),\n          pending: toDisplay(vaultPw.amount, mint.decimals),\n          spt: toDisplay(spt.amount, 0),\n        },\n      ],\n    },\n    {\n      title: 'Locked Balances',\n      description:\n        'Balances deposited from the lockup program. These funds are isolated from the Main Balances and may only be withdrawn back to the lockup program. At all times they are program controlled.',\n      rows: [\n        {\n          token: toDisplayLabel(registrar.mint),\n          balance: toDisplay(lockedVault.amount, mint.decimals),\n          stake: toDisplay(lockedVaultStake.amount, mint.decimals),\n          pending: toDisplay(lockedVaultPw.amount, mint.decimals),\n          spt: toDisplay(lockedSpt.amount, 0),\n        },\n      ],\n    },\n  ];\n  return (\n    <Card\n      style={{\n        marginBottom: '24px',\n      }}\n    >\n      <CardContent\n        style={{\n          marginTop: '24px',\n          position: 'relative',\n          paddingTop: 0,\n          paddingBottom: '16px',\n        }}\n      >\n        {tables.map(t => (\n          <BalanceTable\n            key={t.title}\n            title={t.title}\n            description={t.description}\n            rows={t.rows}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n\ntype BalanceTableProps = {\n  title: string;\n  description: string;\n  rows:\n    | null\n    | {\n        token: string;\n        balance: string;\n        stake: string;\n        pending: string;\n        spt: string;\n      }[];\n};\n\nfunction BalanceTable(props: BalanceTableProps) {\n  const { title, rows, description } = props;\n  return (\n    <div style={{ marginBottom: '16px' }}>\n      <Typography style={{ fontWeight: 'bold' }}>{title}</Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n        {description}\n      </Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Token</TableCell>\n              <TableCell align=\"right\">Available</TableCell>\n              <TableCell align=\"right\">Pending</TableCell>\n              <TableCell align=\"right\">Staked</TableCell>\n              <TableCell align=\"right\">Pool</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows === null ? (\n              <CircularProgress />\n            ) : (\n              rows.map(row => (\n                <TableRow key={row.token}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.token}\n                  </TableCell>\n                  <TableCell align=\"right\">{row.balance}</TableCell>\n                  <TableCell align=\"right\">{row.pending}</TableCell>\n                  <TableCell align=\"right\">{row.stake}</TableCell>\n                  <TableCell align=\"right\">{row.spt}</TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}