{"ast":null,"code":"import { ActionType } from './actions';\nimport { networks } from './config';\nexport let BootstrapState;\n\n(function (BootstrapState) {\n  BootstrapState[BootstrapState[\"NeedsBootstrap\"] = 0] = \"NeedsBootstrap\";\n  BootstrapState[BootstrapState[\"IsBootstrapping\"] = 1] = \"IsBootstrapping\";\n  BootstrapState[BootstrapState[\"Bootstrapped\"] = 2] = \"Bootstrapped\";\n})(BootstrapState || (BootstrapState = {}));\n\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState = {\n    common: { ...state.common\n    },\n    lockup: { ...state.lockup\n    },\n    registry: { ...state.registry\n    },\n    accounts: { ...state.accounts\n    }\n  };\n\n  switch (action.type) {\n    // Common.\n    case ActionType.CommonAppWillBootstrap:\n      newState.common.bootstrapState = BootstrapState.IsBootstrapping;\n      newState.common.bootstrapTrigger = false;\n      return newState;\n\n    case ActionType.CommonAppDidBootstrap:\n      newState.common.bootstrapState = BootstrapState.Bootstrapped;\n      return newState;\n\n    case ActionType.CommonWalletSetProvider:\n      newState.common.walletProvider = action.item.walletProvider;\n      return newState;\n\n    case ActionType.CommonWalletDidConnect:\n      newState.common.isWalletConnected = true;\n      return newState;\n\n    case ActionType.CommonWalletDidDisconnect:\n      newState.common.isWalletConnected = false;\n      return newState;\n\n    case ActionType.CommonSetNetwork:\n      if (newState.common.network.label !== action.item.network.label) {\n        newState.common.network = action.item.network;\n        newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n        newState.common.shutdownTrigger = true;\n        const network = networks[action.item.networkKey];\n        newState.registry.registrar = Object.values(network.registrars)[0];\n      }\n\n      return newState;\n\n    case ActionType.CommonTriggerBootstrap:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.bootstrapTrigger = true;\n      return newState;\n\n    case ActionType.CommonTriggerShutdown:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.shutdownTrigger = true;\n      return newState;\n\n    case ActionType.CommonDidShutdown:\n      // Reset everything except network and registrar.\n      let s = { ...initialState\n      };\n      s.common.network = newState.common.network;\n      s.registry.registrar = newState.registry.registrar;\n      return s;\n\n    case ActionType.CommonOwnedTokenAccountsSet:\n      newState.common.ownedTokenAccounts = action.item.ownedTokenAccounts;\n      return newState;\n\n    case ActionType.CommonOwnedTokenAccountsUpdate:\n      newState.common.ownedTokenAccounts = newState.common.ownedTokenAccounts.map(programAccount => {\n        if (programAccount.publicKey.equals(action.item.account.publicKey)) {\n          return action.item.account;\n        } else {\n          return programAccount;\n        }\n      });\n      return newState;\n    // Lockup.\n\n    case ActionType.LockupSetVestings:\n      newState.lockup.vestings = action.item.vestingAccounts;\n      return newState;\n\n    case ActionType.LockupUpdateVesting:\n      newState.accounts[action.item.vesting.publicKey.toString()] = action.item.vesting.account;\n      return newState;\n\n    case ActionType.LockupCreateVesting:\n      newState.lockup.vestings.unshift(action.item.vesting.publicKey);\n      newState.accounts[action.item.vesting.publicKey.toString()] = action.item.vesting.account;\n      return newState;\n    // Registry.\n\n    case ActionType.RegistrySetMember:\n      // This should only be called on member creation. All other member\n      // member switches should route through `RegistrySetMember`.\n      newState.registry.member = action.item.member;\n      return newState;\n\n    case ActionType.RegistrySetRegistrar:\n      newState.registry.registrar = action.item.registrar;\n      newState.registry.member = action.item.member;\n      newState.registry.pendingWithdrawals = null;\n      return newState;\n\n    case ActionType.RegistrySetPendingWithdrawals:\n      action.item.pendingWithdrawals.forEach(pw => {\n        newState.accounts[pw.publicKey.toString()] = pw.account;\n      });\n      newState.registry.pendingWithdrawals = action.item.pendingWithdrawals.map(pw => pw.publicKey);\n      return newState;\n\n    case ActionType.RegistryCreatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] = action.item.pendingWithdrawal.account;\n\n      if (newState.registry.pendingWithdrawals === null) {\n        newState.registry.pendingWithdrawals = [];\n      }\n\n      newState.registry.pendingWithdrawals.unshift(action.item.pendingWithdrawal.publicKey);\n      return newState;\n\n    case ActionType.RegistryUpdatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] = action.item.pendingWithdrawal.account;\n      return newState;\n\n    case ActionType.AccountAdd:\n      newState.accounts[action.item.account.publicKey.toString()] = action.item.account.account;\n      return newState;\n\n    case ActionType.AccountUpdate:\n      newState.accounts[action.item.account.publicKey.toString()] = action.item.account.account;\n      return newState;\n\n    default:\n      return newState;\n  }\n}\nexport const initialState = {\n  common: {\n    bootstrapTrigger: false,\n    shutdownTrigger: false,\n    isWalletConnected: false,\n    walletProvider: 'https://www.sollet.io',\n    bootstrapState: BootstrapState.NeedsBootstrap,\n    network: networks.mainnet,\n    ownedTokenAccounts: []\n  },\n  lockup: {\n    vestings: []\n  },\n  registry: {\n    pendingWithdrawals: null,\n    registrar: networks.mainnet.registrars.srm\n  },\n  accounts: {}\n};","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/store/reducer.ts"],"names":["ActionType","networks","BootstrapState","reducer","state","initialState","action","newState","common","lockup","registry","accounts","type","CommonAppWillBootstrap","bootstrapState","IsBootstrapping","bootstrapTrigger","CommonAppDidBootstrap","Bootstrapped","CommonWalletSetProvider","walletProvider","item","CommonWalletDidConnect","isWalletConnected","CommonWalletDidDisconnect","CommonSetNetwork","network","label","NeedsBootstrap","shutdownTrigger","networkKey","registrar","Object","values","registrars","CommonTriggerBootstrap","CommonTriggerShutdown","CommonDidShutdown","s","CommonOwnedTokenAccountsSet","ownedTokenAccounts","CommonOwnedTokenAccountsUpdate","map","programAccount","publicKey","equals","account","LockupSetVestings","vestings","vestingAccounts","LockupUpdateVesting","vesting","toString","LockupCreateVesting","unshift","RegistrySetMember","member","RegistrySetRegistrar","pendingWithdrawals","RegistrySetPendingWithdrawals","forEach","pw","RegistryCreatePendingWithdrawal","pendingWithdrawal","RegistryUpdatePendingWithdrawal","AccountAdd","AccountUpdate","mainnet","srm"],"mappings":"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","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { AccountInfo as TokenAccount } from '@solana/spl-token';\nimport { ProgramAccount as CommonProgramAccount } from '@project-serum/common';\nimport { Action, ActionType } from './actions';\nimport { networks, Network } from './config';\n\nexport enum BootstrapState {\n  NeedsBootstrap,\n  IsBootstrapping,\n  Bootstrapped,\n}\n\nexport default function reducer(\n  state: State = initialState,\n  action: Action,\n): State {\n  let newState = {\n    common: { ...state.common },\n    lockup: { ...state.lockup },\n    registry: { ...state.registry },\n    accounts: { ...state.accounts },\n  };\n  switch (action.type) {\n    // Common.\n    case ActionType.CommonAppWillBootstrap:\n      newState.common.bootstrapState = BootstrapState.IsBootstrapping;\n      newState.common.bootstrapTrigger = false;\n      return newState;\n    case ActionType.CommonAppDidBootstrap:\n      newState.common.bootstrapState = BootstrapState.Bootstrapped;\n      return newState;\n    case ActionType.CommonWalletSetProvider:\n      newState.common.walletProvider = action.item.walletProvider;\n      return newState;\n    case ActionType.CommonWalletDidConnect:\n      newState.common.isWalletConnected = true;\n      return newState;\n    case ActionType.CommonWalletDidDisconnect:\n      newState.common.isWalletConnected = false;\n      return newState;\n    case ActionType.CommonSetNetwork:\n      if (newState.common.network.label !== action.item.network.label) {\n        newState.common.network = action.item.network;\n        newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n        newState.common.shutdownTrigger = true;\n        const network = networks[action.item.networkKey];\n        newState.registry.registrar = Object.values(network.registrars)[0];\n      }\n      return newState;\n    case ActionType.CommonTriggerBootstrap:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.bootstrapTrigger = true;\n      return newState;\n    case ActionType.CommonTriggerShutdown:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.shutdownTrigger = true;\n      return newState;\n    case ActionType.CommonDidShutdown:\n      // Reset everything except network and registrar.\n      let s = {\n        ...initialState,\n      };\n      s.common.network = newState.common.network;\n      s.registry.registrar = newState.registry.registrar;\n      return s;\n    case ActionType.CommonOwnedTokenAccountsSet:\n      newState.common.ownedTokenAccounts = action.item.ownedTokenAccounts;\n      return newState;\n\n    case ActionType.CommonOwnedTokenAccountsUpdate:\n      newState.common.ownedTokenAccounts = newState.common.ownedTokenAccounts.map(\n        programAccount => {\n          if (programAccount.publicKey.equals(action.item.account.publicKey)) {\n            return action.item.account;\n          } else {\n            return programAccount;\n          }\n        },\n      );\n      return newState;\n\n    // Lockup.\n    case ActionType.LockupSetVestings:\n      newState.lockup.vestings = action.item.vestingAccounts;\n      return newState;\n    case ActionType.LockupUpdateVesting:\n      newState.accounts[action.item.vesting.publicKey.toString()] =\n        action.item.vesting.account;\n      return newState;\n    case ActionType.LockupCreateVesting:\n      newState.lockup.vestings.unshift(action.item.vesting.publicKey);\n      newState.accounts[action.item.vesting.publicKey.toString()] =\n        action.item.vesting.account;\n      return newState;\n\n    // Registry.\n    case ActionType.RegistrySetMember:\n      // This should only be called on member creation. All other member\n      // member switches should route through `RegistrySetMember`.\n      newState.registry.member = action.item.member;\n      return newState;\n    case ActionType.RegistrySetRegistrar:\n      newState.registry.registrar = action.item.registrar;\n      newState.registry.member = action.item.member;\n      newState.registry.pendingWithdrawals = null;\n      return newState;\n    case ActionType.RegistrySetPendingWithdrawals:\n      action.item.pendingWithdrawals.forEach((pw: any) => {\n        newState.accounts[pw.publicKey.toString()] = pw.account;\n      });\n      newState.registry.pendingWithdrawals = action.item.pendingWithdrawals.map(\n        (pw: any) => pw.publicKey,\n      );\n      return newState;\n    case ActionType.RegistryCreatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] =\n        action.item.pendingWithdrawal.account;\n      if (newState.registry.pendingWithdrawals === null) {\n        newState.registry.pendingWithdrawals = [];\n      }\n      newState.registry.pendingWithdrawals.unshift(\n        action.item.pendingWithdrawal.publicKey,\n      );\n      return newState;\n    case ActionType.RegistryUpdatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] =\n        action.item.pendingWithdrawal.account;\n      return newState;\n    case ActionType.AccountAdd:\n      newState.accounts[action.item.account.publicKey.toString()] =\n        action.item.account.account;\n      return newState;\n    case ActionType.AccountUpdate:\n      newState.accounts[action.item.account.publicKey.toString()] =\n        action.item.account.account;\n      return newState;\n    default:\n      return newState;\n  }\n}\n\nexport type State = {\n  common: CommonState;\n  lockup: LockupState;\n  registry: RegistryState;\n  accounts: { [pubkey: string]: any };\n};\n\nexport type CommonState = {\n  walletProvider?: string;\n  isWalletConnected: boolean;\n  bootstrapTrigger: boolean;\n  bootstrapState: BootstrapState;\n  shutdownTrigger: boolean;\n  network: Network;\n  ownedTokenAccounts: ProgramAccount<TokenAccount>[];\n};\n\nexport type LockupState = {\n  vestings: PublicKey[];\n};\n\n// All state associated with a single instance of a staking registrar.\nexport type RegistryState = {\n  registrar: PublicKey;\n  member?: PublicKey;\n  pendingWithdrawals: PublicKey[] | null;\n};\n\nexport const initialState: State = {\n  common: {\n    bootstrapTrigger: false,\n    shutdownTrigger: false,\n    isWalletConnected: false,\n    walletProvider: 'https://www.sollet.io',\n    bootstrapState: BootstrapState.NeedsBootstrap,\n    network: networks.mainnet,\n    ownedTokenAccounts: [],\n  },\n  lockup: {\n    vestings: [],\n  },\n  registry: {\n    pendingWithdrawals: null,\n    registrar: networks.mainnet.registrars.srm,\n  },\n  accounts: {},\n};\n\nexport type AsyncData<T> = {\n  isReady: boolean;\n  data?: T;\n};\n\n// Re-export.\nexport type ProgramAccount<T = any> = CommonProgramAccount<T>;\n"]},"metadata":{},"sourceType":"module"}