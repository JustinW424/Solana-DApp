{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\components\\\\common\\\\RegistrarSelect.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { useTokenInfos } from '../../utils/tokens';\nimport * as bootstrap from './BootstrapProvider';\nimport { useWallet } from './WalletProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function activeRegistrar(state) {\n  const registrars = Object.keys(state.common.network.registrars).map(registrar => {\n    let entry = [registrar, {\n      publicKey: state.common.network.registrars[registrar],\n      account: state.accounts[state.common.network.registrars[registrar].toString()]\n    }];\n    return entry;\n  }).filter(r => r[1].account !== undefined);\n  const selectedRegistrar = registrars.filter(_ref => {\n    let [r, acc] = _ref;\n    return acc.publicKey.equals(state.registry.registrar);\n  }).map(_ref2 => {\n    let [r, acc] = _ref2;\n    return {\n      label: r,\n      programAccount: acc\n    };\n  }).pop();\n  return selectedRegistrar;\n}\nexport default function RegistrarSelect() {\n  _s();\n\n  const {\n    registryClient\n  } = useWallet();\n  const {\n    registrars,\n    selectedRegistrar,\n    accounts,\n    network\n  } = useSelector(state => {\n    const registrars = Object.keys(state.common.network.registrars).map(registrar => {\n      let entry = [registrar, {\n        publicKey: state.common.network.registrars[registrar],\n        account: state.accounts[state.common.network.registrars[registrar].toString()]\n      }];\n      return entry;\n    }).filter(r => r[1].account !== undefined);\n    const selectedRegistrar = registrars.filter(_ref3 => {\n      let [r, acc] = _ref3;\n      return acc.publicKey.equals(state.registry.registrar);\n    }).map(_ref4 => {\n      let [r, acc] = _ref4;\n      return {\n        label: r,\n        programAccount: acc\n      };\n    }).pop();\n    return {\n      network: state.common.network,\n      accounts: state.accounts,\n      registrars,\n      selectedRegistrar\n    };\n  });\n  const dispatch = useDispatch();\n  const tokenInfos = useTokenInfos();\n  return /*#__PURE__*/_jsxDEV(Select, {\n    style: {\n      width: '294px',\n      height: '36px'\n    },\n    variant: 'outlined',\n    fullWidth: true,\n    value: selectedRegistrar.label,\n    onChange: async e => {\n      const registrar = registrars.filter(_ref5 => {\n        let [r, acc] = _ref5;\n        return r === e.target.value;\n      }).map(_ref6 => {\n        let [r, acc] = _ref6;\n        return acc;\n      }).pop();\n      bootstrap.registrarSwitch(registryClient, accounts, dispatch, registrar.publicKey, // New.\n      selectedRegistrar.programAccount.publicKey // Old.\n      );\n    },\n    children: registrars.length === 0 ? /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: '_loading',\n      children: \"Loading registrars...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this) : registrars.map(_ref7 => {\n      let [label, registrar] = _ref7;\n      return /*#__PURE__*/_jsxDEV(MenuItem, {\n        value: label,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center'\n            },\n            children: getImage(tokenInfos.get(registrar.account.mint.toString()))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              overflow: 'hidden',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center'\n            },\n            children: `${registrarToDisplayLabel(registrar, network)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this)\n      }, label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RegistrarSelect, \"+eRqepn4TcmlUIWhxLlTJ1uxVHA=\", false, function () {\n  return [useWallet, useSelector, useDispatch, useTokenInfos];\n});\n\n_c = RegistrarSelect;\n\nfunction registrarToDisplayLabel(registrar, network) {\n  const entry = Object.keys(network.registrars).filter(r => network.registrars[r].equals(registrar.publicKey)).pop();\n\n  if (entry !== undefined) {\n    return entry.toUpperCase();\n  }\n\n  return registrar.publicKey.toString();\n}\n\nexport function getImage(token, style) {\n  if (token) {\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"Token Icon\",\n      style: style !== null && style !== void 0 ? style : {\n        marginRight: '10px',\n        height: '25px'\n      },\n      src: token.logoURI\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: '32px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 12\n    }, this);\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrarSelect\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/components/common/RegistrarSelect.tsx"],"names":["React","useSelector","useDispatch","Select","MenuItem","useTokenInfos","bootstrap","useWallet","activeRegistrar","state","registrars","Object","keys","common","network","map","registrar","entry","publicKey","account","accounts","toString","filter","r","undefined","selectedRegistrar","acc","equals","registry","label","programAccount","pop","RegistrarSelect","registryClient","dispatch","tokenInfos","width","height","e","target","value","registrarSwitch","length","display","flexDirection","justifyContent","getImage","get","mint","overflow","registrarToDisplayLabel","toUpperCase","token","style","marginRight","logoURI","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { TokenInfo } from '@solana/spl-token-registry';\nimport { useTokenInfos } from '../../utils/tokens';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport * as bootstrap from './BootstrapProvider';\nimport { useWallet } from './WalletProvider';\n\nexport function activeRegistrar(\n  state: StoreState,\n): { label: string; programAccount: any } {\n  const registrars = Object.keys(state.common.network.registrars)\n    .map(registrar => {\n      let entry: [string, ProgramAccount] = [\n        registrar,\n        {\n          publicKey: state.common.network.registrars[registrar],\n          account:\n            state.accounts[\n              state.common.network.registrars[registrar].toString()\n            ],\n        },\n      ];\n      return entry;\n    })\n    .filter(r => r[1].account !== undefined);\n  const selectedRegistrar: any = registrars\n    .filter(([r, acc]) => acc.publicKey.equals(state.registry.registrar))\n    .map(([r, acc]) => {\n      return {\n        label: r,\n        programAccount: acc,\n      };\n    })\n    .pop();\n\n  return selectedRegistrar;\n}\n\nexport default function RegistrarSelect() {\n  const { registryClient } = useWallet();\n  const { registrars, selectedRegistrar, accounts, network } = useSelector(\n    (state: StoreState) => {\n      const registrars = Object.keys(state.common.network.registrars)\n        .map(registrar => {\n          let entry: [string, ProgramAccount] = [\n            registrar,\n            {\n              publicKey: state.common.network.registrars[registrar],\n              account:\n                state.accounts[\n                  state.common.network.registrars[registrar].toString()\n                ],\n            },\n          ];\n          return entry;\n        })\n        .filter(r => r[1].account !== undefined);\n      const selectedRegistrar: any = registrars\n        .filter(([r, acc]) => acc.publicKey.equals(state.registry.registrar))\n        .map(([r, acc]) => {\n          return {\n            label: r,\n            programAccount: acc,\n          };\n        })\n        .pop();\n      return {\n        network: state.common.network,\n        accounts: state.accounts,\n        registrars,\n        selectedRegistrar,\n      };\n    },\n  );\n  const dispatch = useDispatch();\n  const tokenInfos = useTokenInfos();\n\n  return (\n    <Select\n      style={{ width: '294px', height: '36px' }}\n      variant={'outlined'}\n      fullWidth\n      value={selectedRegistrar.label}\n      onChange={async e => {\n        const registrar: ProgramAccount = registrars\n          .filter(([r, acc]) => r === e.target.value)\n          .map(([r, acc]) => acc)\n          .pop()!;\n\n        bootstrap.registrarSwitch(\n          registryClient,\n          accounts,\n          dispatch,\n          registrar!.publicKey, // New.\n          selectedRegistrar.programAccount.publicKey, // Old.\n        );\n      }}\n    >\n      {registrars.length === 0 ? (\n        <MenuItem value={'_loading'}>Loading registrars...</MenuItem>\n      ) : (\n        registrars.map(([label, registrar]) => {\n          return (\n            <MenuItem key={label} value={label}>\n              <div style={{ display: 'flex' }}>\n                <div\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {getImage(tokenInfos.get(registrar.account.mint.toString()))}\n                </div>\n                <div\n                  style={{\n                    overflow: 'hidden',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {`${registrarToDisplayLabel(registrar, network)}`}\n                </div>\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n\nfunction registrarToDisplayLabel(\n  registrar: ProgramAccount,\n  network: Network,\n): string {\n  const entry = Object.keys(network.registrars)\n    .filter(r => network.registrars[r].equals(registrar.publicKey))\n    .pop();\n  if (entry !== undefined) {\n    return entry.toUpperCase();\n  }\n  return registrar.publicKey.toString();\n}\n\nexport function getImage(token?: TokenInfo, style?: any) {\n  if (token) {\n    return (\n      <img\n        alt=\"Token Icon\"\n        style={style ?? { marginRight: '10px', height: '25px' }}\n        src={token.logoURI}\n      />\n    );\n  } else {\n    return <div style={{ marginLeft: '32px' }}></div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}