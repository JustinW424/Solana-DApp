{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\components\\\\Stake.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport { Account, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport { u64 } from '@solana/spl-token';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { useWallet } from '../components/common/WalletProvider';\nimport { ViewTransactionOnExplorerButton } from '../components/common/Notification';\nimport { ActionType } from '../store/actions';\nimport * as skin from '../skin';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\nimport { memberSigner, registrarSigner } from '../utils/registry';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Stake() {\n  _s();\n\n  const {\n    registryClient\n  } = useWallet();\n  const dispatch = useDispatch();\n  const {\n    member,\n    memberAccount,\n    registrarAccount,\n    registrar\n  } = useSelector(state => {\n    const registrarAccount = state.accounts[state.registry.registrar.toString()];\n    return {\n      member: state.registry.member,\n      memberAccount: state.registry.member ? state.accounts[state.registry.member.toString()] : undefined,\n      registrarAccount: registrarAccount,\n      registrar: state.registry.registrar\n    };\n  });\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n\n  const createPoolTokens = async (amount, isLocked) => {\n    enqueueSnackbar(`Staking ${toDisplayLabel(registrarAccount.poolMint)} Pool tokens`, {\n      variant: 'info'\n    });\n    const tx = await registryClient.rpc.stake(new u64(amount), isLocked, {\n      accounts: {\n        registrar,\n        rewardEventQ: registrarAccount.rewardEventQ,\n        poolMint: registrarAccount.poolMint,\n        member,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        balances: memberAccount.balances,\n        balancesLocked: memberAccount.balancesLocked,\n        memberSigner: (await memberSigner(registryClient.programId, registrar, member)).publicKey,\n        registrarSigner: (await registrarSigner(registryClient.programId, registrar)).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID\n      }\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Staking complete`, {\n      variant: 'success',\n      action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n        signature: tx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }, this)\n    });\n  };\n\n  const redeemPoolTokens = async (amount, isLocked) => {\n    enqueueSnackbar(`Unstaking ${amount} ${toDisplayLabel(registrarAccount.poolMint)} Pool tokens`, {\n      variant: 'info'\n    });\n    const pendingWithdrawal = new Account();\n    const tx = await registryClient.rpc.startUnstake(new u64(amount), isLocked, {\n      accounts: {\n        registrar,\n        rewardEventQ: registrarAccount.rewardEventQ,\n        poolMint: registrarAccount.poolMint,\n        pendingWithdrawal: pendingWithdrawal.publicKey,\n        member,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        balances: memberAccount.balances,\n        balancesLocked: memberAccount.balancesLocked,\n        memberSigner: (await memberSigner(registryClient.programId, registrar, member)).publicKey,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        rent: SYSVAR_RENT_PUBKEY\n      },\n      signers: [pendingWithdrawal],\n      instructions: [await registryClient.account.pendingWithdrawal.createInstruction(pendingWithdrawal)]\n    });\n    const pwAccount = await registryClient.account.pendingWithdrawal(pendingWithdrawal.publicKey);\n    dispatch({\n      type: ActionType.RegistryCreatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: {\n          publicKey: pendingWithdrawal.publicKey,\n          account: pwAccount\n        }\n      }\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer initiated`, {\n      variant: 'success',\n      action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n        signature: tx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }, this)\n    });\n  };\n\n  const createPool = async (shares, isLocked) => {\n    if (shares > 0) {\n      createPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error staking: ${err.toString()}`, {\n          variant: 'error'\n        });\n      });\n    }\n  };\n\n  const redeemPool = async (shares, isLocked) => {\n    if (shares > 0) {\n      redeemPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error unstaking: ${err.toString()}`, {\n          variant: 'error'\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          marginTop: '24px',\n          marginBottom: '24px'\n        },\n        children: /*#__PURE__*/_jsxDEV(PoolCard, {\n          title: 'Stake Pool',\n          create: createPool,\n          redeem: redeemPool\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RedemptionList, {\n        style: {\n          marginBottom: '24px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AllPendingTransfers, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Stake, \"//uTVmYY4CLLpgeTADnMJ5FBTpE=\", false, function () {\n  return [useWallet, useDispatch, useSelector, useSnackbar];\n});\n\n_c = Stake;\n\nfunction PoolCard(props) {\n  _s2();\n\n  const {\n    title,\n    create,\n    redeem\n  } = props;\n  const [poolAmount, setPoolAmount] = useState(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const {\n    poolTokenMint,\n    member,\n    registrarAccount,\n    mint\n  } = useSelector(state => {\n    const registrarAccount = state.accounts[state.registry.registrar.toString()];\n    const poolTokenMint = {\n      publicKey: registrarAccount.poolMint,\n      account: state.accounts[registrarAccount.poolMint.toString()]\n    };\n    return {\n      poolTokenMint,\n      member: state.registry.member,\n      registrarAccount,\n      mint: {\n        publicKey: registrarAccount.mint,\n        account: state.accounts[registrarAccount.mint.toString()]\n      }\n    };\n  });\n  const pricePerShare = toDisplay(registrarAccount.stakeRate, mint.account.decimals);\n  const cost = poolAmount ? toDisplay(registrarAccount.stakeRate.mul(new BN(poolAmount)), mint.account.decimals) : 0;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      marginBottom: '24px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: title,\n        subheader: poolTokenMint.publicKey.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          paddingRight: '16px',\n          display: 'flex',\n          justifyContent: 'center',\n          flexDirection: 'column'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"textSecondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '16px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Please enter the amount of pool tokens you would like to purchase in the form below. Upon pressing \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"stake\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 43\n          }, this), \" you will create new pool tokens at a fixed price, adding to the amount of pool tokens outstanding.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Unstaking works similarly, except one must incur an unbonding period where funds will not be able to be retrieved until the unbonding period ends. At the end of the unbonding period, click the blue checkbox next to your pending transfer. If the checkbox is grey, your unbonding period has not yet completed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Total pool tokens outstanding\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: poolTokenMint.account.supply.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Price per pool token\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: pricePerShare.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Your total cost\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [cost, \" \", toDisplayLabel(mint.publicKey)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Unbonding period (days)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: (registrarAccount.withdrawalTimelock / (60 * 60 * 24.0)).toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              style: {\n                width: '100%'\n              },\n              label: \"Pool tokens\",\n              type: \"number\",\n              variant: \"outlined\",\n              onChange: e => setPoolAmount(parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              disabled: member === undefined,\n              color: \"primary\",\n              variant: \"contained\",\n              onClick: () => create(poolAmount, isLocked),\n              children: \"Stake\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              disabled: member === undefined,\n              color: \"secondary\",\n              variant: \"contained\",\n              style: {\n                marginLeft: '10px'\n              },\n              onClick: () => redeem(poolAmount, isLocked),\n              children: \"Unstake\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Switch, {\n                checked: isLocked,\n                onChange: () => setIsLocked(!isLocked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 19\n              }, this),\n              labelPlacement: 'start',\n              label: \"Locked balances\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(PoolCard, \"P1CUz6NhcO0D/deVCESPPY108Gc=\", false, function () {\n  return [useSelector];\n});\n\n_c2 = PoolCard;\n\nfunction RedemptionList(props) {\n  _s3();\n\n  const {\n    registryClient\n  } = useWallet();\n  const dispatch = useDispatch();\n  const {\n    member,\n    registrar,\n    mint,\n    pendingWithdrawals\n  } = useSelector(state => {\n    const member = state.registry.member ? {\n      publicKey: state.registry.member,\n      account: state.accounts[state.registry.member.toString()]\n    } : undefined;\n    const registrar = {\n      publicKey: state.registry.registrar,\n      account: state.accounts[state.registry.registrar.toString()]\n    };\n    const mint = {\n      publicKey: registrar.account.mint,\n      account: state.accounts[registrar.account.mint.toString()]\n    };\n    const pendingWithdrawals = state.registry.pendingWithdrawals === null ? null : state.registry.pendingWithdrawals.map(pw => {\n      return {\n        publicKey: pw,\n        account: state.accounts[pw.toString()]\n      };\n    });\n    return {\n      member,\n      registrar,\n      mint,\n      pendingWithdrawals\n    };\n  });\n  useEffect(() => {\n    if (!member) {\n      return;\n    }\n\n    if (pendingWithdrawals !== null) {\n      return;\n    } // Only grab pending withdrawals for the current member account.\n\n\n    const filter = Buffer.concat([registrar.publicKey.toBuffer(), member.publicKey.toBuffer()]);\n    registryClient.account.pendingWithdrawal.all(filter).then(pendingWithdrawals => {\n      dispatch({\n        type: ActionType.RegistrySetPendingWithdrawals,\n        item: {\n          pendingWithdrawals\n        }\n      });\n    });\n  }, [dispatch, registrar, member, pendingWithdrawals, registryClient.account.pendingWithdrawal]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: props.style,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        marginLeft: '20px',\n        marginTop: '24px',\n        width: '294px'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        style: {\n          paddingLeft: 0,\n          paddingRight: 0,\n          paddingBottom: 0,\n          paddingTop: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: '24px',\n            marginTop: '24px',\n            marginRight: '24px',\n            borderBottom: 'solid 1pt #ccc',\n            paddingBottom: '12px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            style: {},\n            children: \"Your Pending Transfers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            style: {\n              fontSize: '12px'\n            },\n            color: \"textSecondary\",\n            children: \"Click the checkmark to complete a transfer on or after the \\\"end\\\" date.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            paddingLeft: '24px',\n            paddingRight: '24px'\n          },\n          children: member && pendingWithdrawals === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingTop: '24px',\n              marginBottom: '24px'\n            },\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n              style: {\n                display: 'block',\n                marginLeft: 'auto',\n                marginRight: 'auto'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this) : pendingWithdrawals !== null && pendingWithdrawals.length > 0 ? pendingWithdrawals.map((pw, idx) => {\n            return /*#__PURE__*/_jsxDEV(PendingStakeListItem, {\n              isLast: idx === pendingWithdrawals.length - 1,\n              registrar: registrar,\n              pw: pw,\n              member: member,\n              mint: mint\n            }, pw.publicKey.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 19\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingBottom: '24px',\n              paddingTop: '12px'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              color: \"textSecondary\",\n              style: {\n                fontSize: '14px'\n              },\n              children: \"None found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 426,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(RedemptionList, \"zu4RIK8Zml+P1IMr0xkoRc/h1J0=\", false, function () {\n  return [useWallet, useDispatch, useSelector];\n});\n\n_c3 = RedemptionList;\n\nfunction PendingStakeListItem(props) {\n  const {\n    isLast,\n    pw,\n    member,\n    registrar,\n    mint\n  } = props;\n\n  const sptLabel = (() => {\n    const isLocked = pw.account.locked;\n    const l = isLocked ? '(locked)' : '';\n    return `${toDisplay(pw.account.amount, mint.account.decimals)} ${toDisplayLabel(mint.publicKey)} ${l}`;\n  })();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingBottom: !isLast ? '12px' : '24px',\n      paddingTop: '12px',\n      borderBottom: 'solid 1pt #ccc'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            whiteSpace: 'pre',\n            maxWidth: '195px',\n            overflow: 'hidden',\n            fontWeight: 'bold',\n            fontSize: '14px'\n          },\n          children: `${sptLabel}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PendingWithdrawalButton, {\n          registrar: registrar,\n          member: member,\n          pendingWithdrawal: pw\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      style: {\n        fontSize: '14px'\n      },\n      children: `Start: ${new Date(pw.account.startTs.toNumber() * 1000).toLocaleString()}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      style: {\n        fontSize: '14px'\n      },\n      children: `End:   ${new Date(pw.account.endTs.toNumber() * 1000).toLocaleString()}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"textSecondary\",\n      style: {\n        fontSize: '14px',\n        overflow: 'hidden'\n      },\n      children: pw.account.pool.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 519,\n    columnNumber: 5\n  }, this);\n}\n\n_c4 = PendingStakeListItem;\n\nfunction PendingWithdrawalButton(props) {\n  _s4();\n\n  const {\n    pendingWithdrawal,\n    member,\n    registrar\n  } = props;\n  const {\n    registryClient\n  } = useWallet();\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const endPendingWithdrawal = async () => {\n    enqueueSnackbar(`Completing redemption`, {\n      variant: 'info'\n    });\n    const balances = pendingWithdrawal.account.locked ? member.account.balancesLocked : member.account.balances;\n    const tx = await registryClient.rpc.endUnstake({\n      accounts: {\n        registrar: registrar.publicKey,\n        member: member.publicKey,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        pendingWithdrawal: pendingWithdrawal.publicKey,\n        vault: balances.vault,\n        vaultPw: balances.vaultPw,\n        memberSigner: (await memberSigner(registryClient.programId, registrar.publicKey, member.publicKey)).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID\n      }\n    });\n    const updatedPendingWithdrawal = {\n      publicKey: pendingWithdrawal.publicKey,\n      account: { ...pendingWithdrawal.account,\n        burned: true\n      }\n    };\n    dispatch({\n      type: ActionType.RegistryUpdatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: updatedPendingWithdrawal\n      }\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer completed`, {\n      variant: 'success',\n      action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n        signature: tx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 15\n      }, this)\n    });\n  };\n\n  let disabled = false;\n  let color = skin.instance().ready;\n\n  let onClick = async () => endPendingWithdrawal().catch(err => {\n    console.error(`Error completing transfer: ${err.toString()}`);\n    enqueueSnackbar(`Error completing transfer. Wait for the transfer's timelock to end and try again.`, {\n      variant: 'error'\n    });\n  });\n\n  if (pendingWithdrawal.account.burned) {\n    disabled = true;\n    color = skin.instance().active;\n\n    onClick = async () => {};\n  }\n\n  if (pendingWithdrawal.account.endTs.toNumber() > Date.now() / 1000) {\n    disabled = true;\n    color = skin.instance().notReady;\n\n    onClick = async () => {};\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexDirection: 'column'\n    },\n    children: /*#__PURE__*/_jsxDEV(IconButton, {\n      disabled: disabled,\n      style: {\n        width: '25px',\n        height: '25px'\n      },\n      children: /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n        style: {\n          color,\n          fontSize: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 663,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(PendingWithdrawalButton, \"q3d5cXwPrY0Y/iMZQmt+/mjLjGE=\", false, function () {\n  return [useWallet, useSnackbar, useDispatch];\n});\n\n_c5 = PendingWithdrawalButton;\n\nfunction AllPendingTransfers() {\n  _s5();\n\n  const {\n    registryClient\n  } = useWallet();\n  const {\n    registrar,\n    registrarAccount,\n    mintAccount\n  } = useSelector(state => {\n    const registrarAccount = state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar: state.registry.registrar,\n      registrarAccount,\n      mintAccount: state.accounts[registrarAccount.mint.toString()]\n    };\n  });\n  const [pendingTransfers, setPendingTransfers] = useState(null);\n  useEffect(() => {\n    const fetchAll = async () => {\n      let transfers = await registryClient.account.pendingWithdrawal.all(registrar.toBuffer());\n      transfers = transfers.filter(pw => pw.account.burned === false).sort((a, b) => {\n        if (a.account.startTs < b.account.startTs) {\n          return 1;\n        } else if (a.account.startTs > b.account.startTs) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      setPendingTransfers(transfers);\n    };\n\n    fetchAll();\n  }, [registryClient, registrar]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      maxHeight: '900px',\n      overflow: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      style: {\n        padding: '16px',\n        borderBottom: 'solid 1pt #ccc'\n      },\n      children: \"All pending transfers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 7\n    }, this), pendingTransfers !== null ? /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Member Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Pool\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Locked\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 728,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"End\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: pendingTransfers.map(pw => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: pw.account.member.toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: toDisplay(pw.account.amount.toString(), mintAccount.decimals)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: pw.account.amount.div(registrarAccount.stakeRate).toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: pw.account.locked.toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 746,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: new Date(pw.account.startTs.toNumber() * 1000).toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: new Date(pw.account.endTs.toNumber() * 1000).toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 750,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '24px'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        style: {\n          display: 'block',\n          marginLeft: 'auto',\n          marginRight: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 758,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 714,\n    columnNumber: 5\n  }, this);\n}\n\n_s5(AllPendingTransfers, \"EkaFr+CkYlKrCbFkjT8ThIKAIbo=\", false, function () {\n  return [useWallet, useSelector];\n});\n\n_c6 = AllPendingTransfers;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Stake\");\n$RefreshReg$(_c2, \"PoolCard\");\n$RefreshReg$(_c3, \"RedemptionList\");\n$RefreshReg$(_c4, \"PendingStakeListItem\");\n$RefreshReg$(_c5, \"PendingWithdrawalButton\");\n$RefreshReg$(_c6, \"AllPendingTransfers\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/components/Stake.tsx"],"names":["React","useState","useEffect","useSelector","useDispatch","BN","useSnackbar","Account","SYSVAR_RENT_PUBKEY","SYSVAR_CLOCK_PUBKEY","Table","TableHead","TableBody","TableCell","TableRow","CircularProgress","FormControlLabel","Switch","Button","TextField","IconButton","CheckCircleIcon","Card","CardContent","CardHeader","FormControl","Typography","u64","TokenInstructions","useWallet","ViewTransactionOnExplorerButton","ActionType","skin","toDisplay","toDisplayLabel","memberSigner","registrarSigner","Stake","registryClient","dispatch","member","memberAccount","registrarAccount","registrar","state","accounts","registry","toString","undefined","enqueueSnackbar","closeSnackbar","createPoolTokens","amount","isLocked","poolMint","variant","tx","rpc","stake","rewardEventQ","beneficiary","provider","wallet","publicKey","balances","balancesLocked","programId","clock","tokenProgram","TOKEN_PROGRAM_ID","action","redeemPoolTokens","pendingWithdrawal","startUnstake","rent","signers","instructions","account","createInstruction","pwAccount","type","RegistryCreatePendingWithdrawal","item","createPool","shares","catch","err","console","error","redeemPool","width","display","flex","marginTop","marginBottom","PoolCard","props","title","create","redeem","poolAmount","setPoolAmount","setIsLocked","poolTokenMint","mint","pricePerShare","stakeRate","decimals","cost","mul","justifyContent","paddingRight","flexDirection","fontWeight","supply","withdrawalTimelock","e","parseInt","target","value","marginLeft","RedemptionList","pendingWithdrawals","map","pw","filter","Buffer","concat","toBuffer","all","then","RegistrySetPendingWithdrawals","style","paddingLeft","paddingBottom","paddingTop","marginRight","borderBottom","fontSize","length","idx","PendingStakeListItem","isLast","sptLabel","locked","l","overflow","whiteSpace","maxWidth","Date","startTs","toNumber","toLocaleString","endTs","pool","PendingWithdrawalButton","endPendingWithdrawal","endUnstake","vault","vaultPw","updatedPendingWithdrawal","burned","RegistryUpdatePendingWithdrawal","disabled","color","instance","ready","onClick","active","now","notReady","height","AllPendingTransfers","mintAccount","pendingTransfers","setPendingTransfers","fetchAll","transfers","sort","a","b","maxHeight","padding","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport {\n  Account,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport { u64 } from '@solana/spl-token';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { useWallet } from '../components/common/WalletProvider';\nimport { ViewTransactionOnExplorerButton } from '../components/common/Notification';\nimport { State as StoreState, ProgramAccount } from '../store/reducer';\nimport { ActionType } from '../store/actions';\nimport * as skin from '../skin';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\nimport { memberSigner, registrarSigner } from '../utils/registry';\n\nexport default function Stake() {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const { member, memberAccount, registrarAccount, registrar } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      return {\n        member: state.registry.member,\n        memberAccount: state.registry.member\n          ? state.accounts[state.registry.member.toString()]\n          : undefined,\n        registrarAccount: registrarAccount,\n        registrar: state.registry.registrar,\n      };\n    },\n  );\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const createPoolTokens = async (amount: number, isLocked: boolean) => {\n    enqueueSnackbar(\n      `Staking ${toDisplayLabel(registrarAccount.poolMint)} Pool tokens`,\n      {\n        variant: 'info',\n      },\n    );\n\n    const tx = await registryClient.rpc.stake(new u64(amount), isLocked, {\n      accounts: {\n        registrar,\n        rewardEventQ: registrarAccount.rewardEventQ,\n        poolMint: registrarAccount.poolMint,\n        member,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        balances: memberAccount.balances,\n        balancesLocked: memberAccount.balancesLocked,\n        memberSigner: (\n          await memberSigner(registryClient.programId, registrar, member!)\n        ).publicKey,\n        registrarSigner: (\n          await registrarSigner(registryClient.programId, registrar)\n        ).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Staking complete`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  const redeemPoolTokens = async (amount: number, isLocked: boolean) => {\n    enqueueSnackbar(\n      `Unstaking ${amount} ${toDisplayLabel(\n        registrarAccount.poolMint,\n      )} Pool tokens`,\n      {\n        variant: 'info',\n      },\n    );\n\n    const pendingWithdrawal = new Account();\n    const tx = await registryClient.rpc.startUnstake(\n      new u64(amount),\n      isLocked,\n      {\n        accounts: {\n          registrar,\n          rewardEventQ: registrarAccount.rewardEventQ,\n          poolMint: registrarAccount.poolMint,\n\n          pendingWithdrawal: pendingWithdrawal.publicKey,\n          member,\n          beneficiary: registryClient.provider.wallet.publicKey,\n          balances: memberAccount.balances,\n          balancesLocked: memberAccount.balancesLocked,\n\n          memberSigner: (\n            await memberSigner(registryClient.programId, registrar, member!)\n          ).publicKey,\n\n          tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n          clock: SYSVAR_CLOCK_PUBKEY,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [pendingWithdrawal],\n        instructions: [\n          await registryClient.account.pendingWithdrawal.createInstruction(\n            pendingWithdrawal,\n          ),\n        ],\n      },\n    );\n    const pwAccount = await registryClient.account.pendingWithdrawal(\n      pendingWithdrawal.publicKey,\n    );\n    dispatch({\n      type: ActionType.RegistryCreatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: {\n          publicKey: pendingWithdrawal.publicKey,\n          account: pwAccount,\n        },\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer initiated`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  const createPool = async (shares: number, isLocked: boolean) => {\n    if (shares > 0) {\n      createPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error staking: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  };\n  const redeemPool = async (shares: number, isLocked: boolean) => {\n    if (shares > 0) {\n      redeemPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error unstaking: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      <div style={{ display: 'flex', width: '100%' }}>\n        <div style={{ flex: 1, marginTop: '24px', marginBottom: '24px' }}>\n          <PoolCard\n            title={'Stake Pool'}\n            create={createPool}\n            redeem={redeemPool}\n          />\n        </div>\n        <RedemptionList\n          style={{\n            marginBottom: '24px',\n          }}\n        />\n      </div>\n      <AllPendingTransfers />\n    </div>\n  );\n}\n\ntype PoolCardProps = {\n  title: string;\n  create: (shares: number, isLocked: boolean) => void;\n  redeem: (shares: number, isLocked: boolean) => void;\n};\n\nfunction PoolCard(props: PoolCardProps) {\n  const { title, create, redeem } = props;\n  const [poolAmount, setPoolAmount] = useState<null | number>(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const { poolTokenMint, member, registrarAccount, mint } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      const poolTokenMint = {\n        publicKey: registrarAccount.poolMint,\n        account: state.accounts[registrarAccount.poolMint.toString()],\n      };\n      return {\n        poolTokenMint,\n        member: state.registry.member,\n        registrarAccount,\n        mint: {\n          publicKey: registrarAccount.mint,\n          account: state.accounts[registrarAccount.mint.toString()],\n        },\n      };\n    },\n  );\n\n  const pricePerShare = toDisplay(\n    registrarAccount.stakeRate,\n    mint.account.decimals,\n  );\n\n  const cost = poolAmount\n    ? toDisplay(\n        registrarAccount.stakeRate.mul(new BN(poolAmount)),\n        mint.account.decimals,\n      )\n    : 0;\n  return (\n    <Card\n      style={{\n        marginBottom: '24px',\n      }}\n    >\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <CardHeader\n          title={title}\n          subheader={poolTokenMint.publicKey.toString()}\n        />\n        <div\n          style={{\n            paddingRight: '16px',\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          <Typography color=\"textSecondary\"></Typography>\n        </div>\n      </div>\n      <CardContent>\n        <div\n          style={{\n            marginBottom: '16px',\n          }}\n        >\n          <Typography>\n            Please enter the amount of pool tokens you would like to purchase in\n            the form below. Upon pressing <b>stake</b> you will create new pool\n            tokens at a fixed price, adding to the amount of pool tokens\n            outstanding.\n          </Typography>\n          <br />\n          <Typography>\n            Unstaking works similarly, except one must incur an unbonding period\n            where funds will not be able to be retrieved until the unbonding\n            period ends. At the end of the unbonding period, click the blue\n            checkbox next to your pending transfer. If the checkbox is grey,\n            your unbonding period has not yet completed.\n          </Typography>\n          <br />\n          <Typography style={{ fontWeight: 'bold' }}>\n            Total pool tokens outstanding\n          </Typography>\n          <Typography>{poolTokenMint.account.supply.toString()}</Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Price per pool token\n          </Typography>\n          <Typography>{pricePerShare.toString()}</Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Your total cost\n          </Typography>\n          <Typography>\n            {cost} {toDisplayLabel(mint.publicKey)}\n          </Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Unbonding period (days)\n          </Typography>\n          <Typography>\n            {(\n              registrarAccount.withdrawalTimelock /\n              (60 * 60 * 24.0)\n            ).toString()}\n          </Typography>\n        </div>\n        <div>\n          <div style={{ marginBottom: '10px' }}>\n            <FormControl>\n              <TextField\n                style={{ width: '100%' }}\n                label=\"Pool tokens\"\n                type=\"number\"\n                variant=\"outlined\"\n                onChange={e => setPoolAmount(parseInt(e.target.value))}\n              />\n            </FormControl>\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div>\n              <Button\n                disabled={member === undefined}\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => create(poolAmount as number, isLocked)}\n              >\n                Stake\n              </Button>\n              <Button\n                disabled={member === undefined}\n                color=\"secondary\"\n                variant=\"contained\"\n                style={{ marginLeft: '10px' }}\n                onClick={() => redeem(poolAmount as number, isLocked)}\n              >\n                Unstake\n              </Button>\n            </div>\n            <div>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={isLocked}\n                    onChange={() => setIsLocked(!isLocked)}\n                  />\n                }\n                labelPlacement={'start'}\n                label=\"Locked balances\"\n              />\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ntype RedemptionListProps = {\n  style: any;\n};\n\nfunction RedemptionList(props: RedemptionListProps) {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const { member, registrar, mint, pendingWithdrawals } = useSelector(\n    (state: StoreState) => {\n      const member = state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined;\n      const registrar = {\n        publicKey: state.registry.registrar!,\n        account: state.accounts[state.registry.registrar.toString()],\n      };\n      const mint = {\n        publicKey: registrar.account.mint,\n        account: state.accounts[registrar.account.mint.toString()],\n      };\n      const pendingWithdrawals =\n        state.registry.pendingWithdrawals === null\n          ? null\n          : state.registry.pendingWithdrawals.map(pw => {\n              return {\n                publicKey: pw,\n                account: state.accounts[pw.toString()],\n              };\n            });\n      return {\n        member,\n        registrar,\n        mint,\n        pendingWithdrawals,\n      };\n    },\n  );\n\n  useEffect(() => {\n    if (!member) {\n      return;\n    }\n    if (pendingWithdrawals !== null) {\n      return;\n    }\n\n    // Only grab pending withdrawals for the current member account.\n    const filter = Buffer.concat([\n      registrar.publicKey.toBuffer(),\n      member.publicKey.toBuffer(),\n    ]);\n    registryClient.account.pendingWithdrawal\n      .all(filter)\n      .then(pendingWithdrawals => {\n        dispatch({\n          type: ActionType.RegistrySetPendingWithdrawals,\n          item: {\n            pendingWithdrawals,\n          },\n        });\n      });\n  }, [\n    dispatch,\n    registrar,\n    member,\n    pendingWithdrawals,\n    registryClient.account.pendingWithdrawal,\n  ]);\n\n  return (\n    <div style={props.style}>\n      <Card\n        style={{\n          marginLeft: '20px',\n          marginTop: '24px',\n          width: '294px',\n        }}\n      >\n        <CardContent\n          style={{\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingBottom: 0,\n            paddingTop: 0,\n          }}\n        >\n          <div\n            style={{\n              marginLeft: '24px',\n              marginTop: '24px',\n              marginRight: '24px',\n              borderBottom: 'solid 1pt #ccc',\n              paddingBottom: '12px',\n            }}\n          >\n            <Typography style={{}}>Your Pending Transfers</Typography>\n            <Typography style={{ fontSize: '12px' }} color=\"textSecondary\">\n              Click the checkmark to complete a transfer on or after the \"end\"\n              date.\n            </Typography>\n          </div>\n          <div style={{ paddingLeft: '24px', paddingRight: '24px' }}>\n            {member && pendingWithdrawals === null ? (\n              <div style={{ paddingTop: '24px', marginBottom: '24px' }}>\n                <CircularProgress\n                  style={{\n                    display: 'block',\n                    marginLeft: 'auto',\n                    marginRight: 'auto',\n                  }}\n                />\n              </div>\n            ) : pendingWithdrawals !== null && pendingWithdrawals.length > 0 ? (\n              pendingWithdrawals.map((pw, idx) => {\n                return (\n                  <PendingStakeListItem\n                    key={pw.publicKey.toString()}\n                    isLast={idx === pendingWithdrawals.length - 1}\n                    registrar={registrar}\n                    pw={pw}\n                    member={member!}\n                    mint={mint}\n                  />\n                );\n              })\n            ) : (\n              <div\n                style={{\n                  paddingBottom: '24px',\n                  paddingTop: '12px',\n                }}\n              >\n                <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n                  None found\n                </Typography>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\ntype PendingStakeListItemProps = {\n  isLast?: boolean;\n  registrar: ProgramAccount;\n  pw: ProgramAccount;\n  member: ProgramAccount;\n  mint: ProgramAccount;\n};\n\nfunction PendingStakeListItem(props: PendingStakeListItemProps) {\n  const { isLast, pw, member, registrar, mint } = props;\n  const sptLabel = (() => {\n    const isLocked = pw.account.locked;\n    const l = isLocked ? '(locked)' : '';\n    return `${toDisplay(\n      pw.account.amount,\n      mint.account.decimals,\n    )} ${toDisplayLabel(mint.publicKey)} ${l}`;\n  })();\n  return (\n    <div\n      style={{\n        paddingBottom: !isLast ? '12px' : '24px',\n        paddingTop: '12px',\n        borderBottom: 'solid 1pt #ccc',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          overflow: 'hidden',\n        }}\n      >\n        <div>\n          <Typography\n            style={{\n              whiteSpace: 'pre',\n              maxWidth: '195px',\n              overflow: 'hidden',\n              fontWeight: 'bold',\n              fontSize: '14px',\n            }}\n          >\n            {`${sptLabel}`}\n          </Typography>\n        </div>\n        <div>\n          <PendingWithdrawalButton\n            registrar={registrar}\n            member={member}\n            pendingWithdrawal={pw}\n          />\n        </div>\n      </div>\n      <Typography style={{ fontSize: '14px' }}>\n        {`Start: ${new Date(\n          pw.account.startTs.toNumber() * 1000,\n        ).toLocaleString()}`}\n      </Typography>\n      <Typography style={{ fontSize: '14px' }}>\n        {`End:   ${new Date(\n          pw.account.endTs.toNumber() * 1000,\n        ).toLocaleString()}`}\n      </Typography>\n      <Typography\n        color=\"textSecondary\"\n        style={{\n          fontSize: '14px',\n          overflow: 'hidden',\n        }}\n      >\n        {pw.account.pool.toString()}\n      </Typography>\n    </div>\n  );\n}\n\ntype PendingWithdrawalButtonProps = {\n  registrar: ProgramAccount;\n  pendingWithdrawal: ProgramAccount;\n  member: ProgramAccount;\n};\n\nfunction PendingWithdrawalButton(props: PendingWithdrawalButtonProps) {\n  const { pendingWithdrawal, member, registrar } = props;\n  const { registryClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const endPendingWithdrawal = async () => {\n    enqueueSnackbar(`Completing redemption`, {\n      variant: 'info',\n    });\n    const balances = pendingWithdrawal.account.locked\n      ? member.account.balancesLocked\n      : member.account.balances;\n    const tx = await registryClient.rpc.endUnstake({\n      accounts: {\n        registrar: registrar.publicKey,\n        member: member.publicKey,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        pendingWithdrawal: pendingWithdrawal.publicKey,\n        vault: balances.vault,\n        vaultPw: balances.vaultPw,\n        memberSigner: (\n          await memberSigner(\n            registryClient.programId,\n            registrar.publicKey,\n            member.publicKey,\n          )\n        ).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n      },\n    });\n\n    const updatedPendingWithdrawal = {\n      publicKey: pendingWithdrawal.publicKey,\n      account: {\n        ...pendingWithdrawal.account,\n        burned: true,\n      },\n    };\n\n    dispatch({\n      type: ActionType.RegistryUpdatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: updatedPendingWithdrawal,\n      },\n    });\n\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer completed`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  let disabled = false;\n  let color = skin.instance().ready;\n  let onClick = async () =>\n    endPendingWithdrawal().catch(err => {\n      console.error(`Error completing transfer: ${err.toString()}`);\n      enqueueSnackbar(\n        `Error completing transfer. Wait for the transfer's timelock to end and try again.`,\n        {\n          variant: 'error',\n        },\n      );\n    });\n  if (pendingWithdrawal.account.burned) {\n    disabled = true;\n    color = skin.instance().active;\n    onClick = async () => {};\n  }\n\n  if (pendingWithdrawal.account.endTs.toNumber() > Date.now() / 1000) {\n    disabled = true;\n    color = skin.instance().notReady;\n    onClick = async () => {};\n  }\n\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <IconButton disabled={disabled} style={{ width: '25px', height: '25px' }}>\n        <CheckCircleIcon style={{ color, fontSize: '20px' }} />\n      </IconButton>\n    </div>\n  );\n}\n\nfunction AllPendingTransfers() {\n  const { registryClient } = useWallet();\n  const { registrar, registrarAccount, mintAccount } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      return {\n        registrar: state.registry.registrar,\n        registrarAccount,\n        mintAccount: state.accounts[registrarAccount.mint.toString()],\n      };\n    },\n  );\n  const [pendingTransfers, setPendingTransfers] = useState<null | any>(null);\n  useEffect(() => {\n    const fetchAll = async () => {\n      let transfers = await registryClient.account.pendingWithdrawal.all(\n        registrar.toBuffer(),\n      );\n      transfers = transfers\n        .filter((pw: any) => pw.account.burned === false)\n        .sort((a, b) => {\n          if (a.account.startTs < b.account.startTs) {\n            return 1;\n          } else if (a.account.startTs > b.account.startTs) {\n            return -1;\n          } else {\n            return 0;\n          }\n        });\n      setPendingTransfers(transfers);\n    };\n    fetchAll();\n  }, [registryClient, registrar]);\n\n  return (\n    <Card style={{ maxHeight: '900px', overflow: 'auto' }}>\n      <Typography\n        variant=\"h5\"\n        style={{ padding: '16px', borderBottom: 'solid 1pt #ccc' }}\n      >\n        All pending transfers\n      </Typography>\n      {pendingTransfers !== null ? (\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Member Account</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>Pool</TableCell>\n              <TableCell>Locked</TableCell>\n              <TableCell>Start</TableCell>\n              <TableCell>End</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {pendingTransfers.map((pw: any) => (\n              <TableRow>\n                <TableCell>{pw.account.member.toString()}</TableCell>\n                <TableCell>\n                  {toDisplay(\n                    pw.account.amount.toString(),\n                    mintAccount.decimals,\n                  )}\n                </TableCell>\n                <TableCell>\n                  {pw.account.amount.div(registrarAccount.stakeRate).toString()}\n                </TableCell>\n                <TableCell>{pw.account.locked.toString()}</TableCell>\n                <TableCell>\n                  {new Date(pw.account.startTs.toNumber() * 1000).toString()}\n                </TableCell>\n                <TableCell>\n                  {new Date(pw.account.endTs.toNumber() * 1000).toString()}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      ) : (\n        <div style={{ padding: '24px' }}>\n          <CircularProgress\n            style={{\n              display: 'block',\n              marginLeft: 'auto',\n              marginRight: 'auto',\n            }}\n          />\n        </div>\n      )}\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}