{"ast":null,"code":"import { struct } from 'buffer-layout';\nimport { rustEnum } from '@project-serum/borsh'; // Simplified since we only use the SetBuffer variant.\n\nconst IDL_INSTRUCTION_LAYOUT = rustEnum([struct([], 'create'), struct([], 'createBuffer'), struct([], 'write'), struct([], 'setBuffer'), struct([], 'setAuthority')]);\nexport function encodeInstruction(i) {\n  const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n  const len = IDL_INSTRUCTION_LAYOUT.encode(i, buffer);\n  return Buffer.concat([IDL_TAG, buffer.slice(0, len)]);\n} // Reverse for little endian.\n\nexport const IDL_TAG = Buffer.from('0a69e9a778bcf440', 'hex').reverse();","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/utils/idl.ts"],"names":["struct","rustEnum","IDL_INSTRUCTION_LAYOUT","encodeInstruction","i","buffer","Buffer","alloc","len","encode","concat","IDL_TAG","slice","from","reverse"],"mappings":"AAAA,SAASA,MAAT,QAA+B,eAA/B;AACA,SAASC,QAAT,QAAyB,sBAAzB,C,CAEA;;AAcA,MAAMC,sBAA8C,GAAGD,QAAQ,CAAC,CAC9DD,MAAM,CAAC,EAAD,EAAK,QAAL,CADwD,EAE9DA,MAAM,CAAC,EAAD,EAAK,cAAL,CAFwD,EAG9DA,MAAM,CAAC,EAAD,EAAK,OAAL,CAHwD,EAI9DA,MAAM,CAAC,EAAD,EAAK,WAAL,CAJwD,EAK9DA,MAAM,CAAC,EAAD,EAAK,cAAL,CALwD,CAAD,CAA/D;AAQA,OAAO,SAASG,iBAAT,CAA2BC,CAA3B,EAAsD;AAC3D,QAAMC,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAa,IAAb,CAAf,CAD2D,CACxB;;AACnC,QAAMC,GAAG,GAAGN,sBAAsB,CAACO,MAAvB,CAA8BL,CAA9B,EAAiCC,MAAjC,CAAZ;AACA,SAAOC,MAAM,CAACI,MAAP,CAAc,CAACC,OAAD,EAAUN,MAAM,CAACO,KAAP,CAAa,CAAb,EAAgBJ,GAAhB,CAAV,CAAd,CAAP;AACD,C,CAED;;AACA,OAAO,MAAMG,OAAO,GAAGL,MAAM,CAACO,IAAP,CAAY,kBAAZ,EAAgC,KAAhC,EAAuCC,OAAvC,EAAhB","sourcesContent":["import { struct, Layout } from 'buffer-layout';\nimport { rustEnum } from '@project-serum/borsh';\n\n// Simplified since we only use the SetBuffer variant.\nexport type IdlInstruction =\n  | Create\n  | CreateBuffer\n  | Write\n  | SetBuffer\n  | SetAuthority;\n\ntype Create = {};\ntype CreateBuffer = {};\ntype Write = {};\ntype SetBuffer = {};\ntype SetAuthority = {};\n\nconst IDL_INSTRUCTION_LAYOUT: Layout<IdlInstruction> = rustEnum([\n  struct([], 'create'),\n  struct([], 'createBuffer'),\n  struct([], 'write'),\n  struct([], 'setBuffer'),\n  struct([], 'setAuthority'),\n]);\n\nexport function encodeInstruction(i: IdlInstruction): Buffer {\n  const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n  const len = IDL_INSTRUCTION_LAYOUT.encode(i, buffer);\n  return Buffer.concat([IDL_TAG, buffer.slice(0, len)]);\n}\n\n// Reverse for little endian.\nexport const IDL_TAG = Buffer.from('0a69e9a778bcf440', 'hex').reverse();\n"]},"metadata":{},"sourceType":"module"}