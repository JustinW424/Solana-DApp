{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\components\\\\multisig\\\\Multisig.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { encode as encodeBase64 } from 'js-base64';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport GavelIcon from '@material-ui/icons/Gavel';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport Paper from '@material-ui/core/Paper';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport Collapse from '@material-ui/core/Collapse';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport BuildIcon from '@material-ui/icons/Build';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport AddIcon from '@material-ui/icons/Add';\nimport List from '@material-ui/core/List';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport BN from 'bn.js';\nimport { Account, PublicKey, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { useWallet } from '../common/WalletProvider';\nimport { ViewTransactionOnExplorerButton } from '../common/Notification';\nimport * as idl from '../../utils/idl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Multisig(_ref) {\n  _s();\n\n  let {\n    multisig\n  } = _ref;\n  const history = useHistory();\n  const [multisigAddress, setMultisigAddress] = useState('');\n  const disabled = !isValidPubkey(multisigAddress);\n\n  const searchFn = () => {\n    history.push(`/multisig/${multisigAddress}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingLeft: '16px',\n        paddingRight: '16px',\n        borderBottom: 'solid 1pt #ccc',\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          flex: 1,\n          background: 'none',\n          padding: '16px',\n          border: 'none',\n          outlineWidth: 0\n        },\n        placeholder: \"Multisig address\",\n        value: multisigAddress,\n        onChange: e => setMultisigAddress(e.target.value),\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            searchFn();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        disabled: disabled,\n        onClick: searchFn,\n        children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewMultisigButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: multisig && /*#__PURE__*/_jsxDEV(MultisigInstance, {\n        multisig: multisig\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Multisig, \"VDXjcIMV1AkH3v1h4iSACz19Oqg=\", false, function () {\n  return [useHistory];\n});\n\n_c = Multisig;\n\nfunction isValidPubkey(addr) {\n  try {\n    new PublicKey(addr);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport function MultisigInstance(_ref2) {\n  _s2();\n\n  let {\n    multisig\n  } = _ref2;\n  const {\n    multisigClient\n  } = useWallet();\n  const [multisigAccount, setMultisigAccount] = useState(undefined);\n  const [transactions, setTransactions] = useState(null);\n  const [showSignerDialog, setShowSignerDialog] = useState(false);\n  const [showAddTransactionDialog, setShowAddTransactionDialog] = useState(false);\n  const [forceRefresh, setForceRefresh] = useState(false);\n  useEffect(() => {\n    multisigClient.account.multisig(multisig).then(account => {\n      setMultisigAccount(account);\n    }).catch(err => {\n      console.error(err);\n      setMultisigAccount(null);\n    });\n  }, [multisig, multisigClient.account]);\n  useEffect(() => {\n    multisigClient.account.transaction.all(multisig.toBuffer()).then(txs => {\n      setTransactions(txs);\n    });\n  }, [multisigClient.account.transaction, multisig, forceRefresh]);\n  useEffect(() => {\n    multisigClient.account.multisig.subscribe(multisig).on('change', account => {\n      setMultisigAccount(account);\n    });\n  }, [multisigClient, multisig]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fixed: true,\n    maxWidth: \"md\",\n    style: {\n      marginBottom: '16px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          marginTop: '24px'\n        },\n        children: multisigAccount === undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: '16px'\n          },\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n            style: {\n              display: 'block',\n              marginLeft: 'auto',\n              marginRight: 'auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this) : multisigAccount === null ? /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"textSecondary\",\n            style: {\n              padding: '24px',\n              textAlign: 'center'\n            },\n            children: \"Multisig not found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), multisigAccount && /*#__PURE__*/_jsxDEV(Paper, {\n        children: [/*#__PURE__*/_jsxDEV(AppBar, {\n          style: {\n            marginTop: '24px'\n          },\n          position: \"static\",\n          color: \"default\",\n          elevation: 1,\n          children: /*#__PURE__*/_jsxDEV(Toolbar, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              style: {\n                flexGrow: 1\n              },\n              component: \"h2\",\n              children: [multisig.toString(), \" | \", multisigAccount.threshold.toString(), ' ', \"of \", multisigAccount.owners.length.toString(), \" Multisig\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: \"Signer\",\n              arrow: true,\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => setShowSignerDialog(true),\n                children: /*#__PURE__*/_jsxDEV(InfoIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: \"Add\",\n              arrow: true,\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => setShowAddTransactionDialog(true),\n                children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          disablePadding: true,\n          children: transactions === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: '16px'\n            },\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n              style: {\n                display: 'block',\n                marginLeft: 'auto',\n                marginRight: 'auto'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this) : transactions.length === 0 ? /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: \"No transactions found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this) : transactions.map(tx => /*#__PURE__*/_jsxDEV(TxListItem, {\n            multisig: multisig,\n            multisigAccount: multisigAccount,\n            tx: tx\n          }, tx.publicKey.toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionDialog, {\n      multisig: multisig,\n      open: showAddTransactionDialog,\n      onClose: () => setShowAddTransactionDialog(false),\n      didAddTransaction: () => setForceRefresh(!forceRefresh)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), multisigAccount && /*#__PURE__*/_jsxDEV(SignerDialog, {\n      multisig: multisig,\n      multisigAccount: multisigAccount,\n      open: showSignerDialog,\n      onClose: () => setShowSignerDialog(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(MultisigInstance, \"I0mqltMnGIhXTQUmXpziYDarvB8=\", false, function () {\n  return [useWallet];\n});\n\n_c2 = MultisigInstance;\n\nfunction NewMultisigButton() {\n  _s3();\n\n  const [open, setOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: () => setOpen(true),\n      children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewMultisigDialog, {\n      open: open,\n      onClose: () => setOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(NewMultisigButton, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c3 = NewMultisigButton;\n\nfunction NewMultisigDialog(_ref3) {\n  _s4();\n\n  let {\n    open,\n    onClose\n  } = _ref3;\n  const history = useHistory();\n  const {\n    multisigClient\n  } = useWallet();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [threshold, setThreshold] = useState(2); // @ts-ignore\n\n  const zeroAddr = PublicKey.default.toString();\n  const [participants, setParticipants] = useState([multisigClient.provider.wallet.publicKey.toString(), zeroAddr]);\n\n  const _onClose = () => {\n    onClose();\n    setThreshold(2);\n    setParticipants([zeroAddr, zeroAddr]);\n  };\n\n  const createMultisig = async () => {\n    enqueueSnackbar('Creating multisig', {\n      variant: 'info'\n    });\n    const multisig = new Account(); // Disc. + threshold + nonce.\n\n    const baseSize = 8 + 8 + 1; // Can only grow the participant set by 2x the initialized value.\n\n    const ownerSize = participants.length * 2 * 32 + 8;\n    const multisigSize = baseSize + ownerSize;\n    const [, nonce] = await PublicKey.findProgramAddress([multisig.publicKey.toBuffer()], multisigClient.programId);\n    const owners = participants.map(p => new PublicKey(p));\n    const tx = await multisigClient.rpc.createMultisig(owners, new BN(threshold), nonce, {\n      accounts: {\n        multisig: multisig.publicKey,\n        rent: SYSVAR_RENT_PUBKEY\n      },\n      signers: [multisig],\n      instructions: [await multisigClient.account.multisig.createInstruction(multisig, // @ts-ignore\n      multisigSize)]\n    });\n    enqueueSnackbar(`Multisig created: ${multisig.publicKey.toString()}`, {\n      variant: 'success',\n      action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n        signature: tx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 15\n      }, this)\n    });\n\n    _onClose();\n\n    history.push(`/multisig/${multisig.publicKey.toString()}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    fullWidth: true,\n    open: open,\n    onClose: _onClose,\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h2\",\n        children: \"New Multisig\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Threshold\",\n        value: threshold,\n        type: \"number\",\n        onChange: e => setThreshold(parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), participants.map((p, idx) => /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Participant\",\n        value: p,\n        onChange: e => {\n          const p = [...participants];\n          p[idx] = e.target.value;\n          setParticipants(p);\n        }\n      }, p, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'flex-end'\n        },\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => {\n            const p = [...participants]; // @ts-ignore\n\n            p.push(new PublicKey().toString());\n            setParticipants(p);\n          },\n          children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: _onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        color: \"primary\",\n        onClick: () => createMultisig().catch(err => {\n          const str = err ? err.toString() : '';\n          enqueueSnackbar(`Error creating multisig: ${str}`, {\n            variant: 'error'\n          });\n        }),\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(NewMultisigDialog, \"rBLNwLMvk5vfEJ1Ixp6QfN270Vg=\", false, function () {\n  return [useHistory, useWallet, useSnackbar];\n});\n\n_c4 = NewMultisigDialog;\n\nfunction TxListItem(_ref4) {\n  _s5();\n\n  let {\n    multisig,\n    multisigAccount,\n    tx\n  } = _ref4;\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    multisigClient\n  } = useWallet();\n  const [open, setOpen] = useState(false);\n  const [txAccount, setTxAccount] = useState(tx.account);\n  useEffect(() => {\n    multisigClient.account.transaction.subscribe(tx.publicKey).on('change', account => {\n      setTxAccount(account);\n    });\n  }, [multisigClient, multisig, tx.publicKey]);\n  const rows = [{\n    field: 'Program ID',\n    value: txAccount.programId.toString()\n  }, {\n    field: 'Did execute',\n    value: txAccount.didExecute.toString()\n  }, {\n    field: 'Instruction data',\n    value: /*#__PURE__*/_jsxDEV(\"code\", {\n      style: {\n        wordBreak: 'break-word',\n        width: '370px',\n        background: 'black',\n        color: '#ffffff',\n        float: 'right',\n        textAlign: 'left'\n      },\n      children: encodeBase64(txAccount.data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 9\n    }, this)\n  }, {\n    field: 'Multisig',\n    value: txAccount.multisig.toString()\n  }, {\n    field: 'Transaction account',\n    value: tx.publicKey.toString()\n  }, {\n    field: 'Owner set seqno',\n    value: txAccount.ownerSetSeqno.toString()\n  }];\n  const msAccountRows = multisigAccount.owners.map((owner, idx) => {\n    return {\n      field: owner.toString(),\n      value: txAccount.signers[idx] ? /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(RemoveIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 57\n      }, this)\n    };\n  });\n\n  const approve = async () => {\n    enqueueSnackbar('Approving transaction', {\n      variant: 'info'\n    });\n    await multisigClient.rpc.approve({\n      accounts: {\n        multisig,\n        transaction: tx.publicKey,\n        owner: multisigClient.provider.wallet.publicKey\n      }\n    });\n    enqueueSnackbar('Transaction approved', {\n      variant: 'success'\n    });\n  };\n\n  const execute = async () => {\n    enqueueSnackbar('Executing transaction', {\n      variant: 'info'\n    });\n    const [multisigSigner] = await PublicKey.findProgramAddress([multisig.toBuffer()], multisigClient.programId);\n    await multisigClient.rpc.executeTransaction({\n      accounts: {\n        multisig,\n        multisigSigner,\n        transaction: tx.publicKey\n      },\n      remainingAccounts: txAccount.accounts.map(t => {\n        if (t.pubkey.equals(multisigSigner)) {\n          return { ...t,\n            isSigner: false\n          };\n        }\n\n        return t;\n      }).concat({\n        pubkey: txAccount.programId,\n        isWritable: false,\n        isSigner: false\n      })\n    });\n    enqueueSnackbar('Transaction executed', {\n      variant: 'success'\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListItem, {\n      button: true,\n      onClick: () => setOpen(!open),\n      children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n        children: icon(tx, multisigClient)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this), ixLabel(tx, multisigClient), txAccount.didExecute && /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n        style: {\n          marginRight: '16px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 11\n      }, this), open ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      in: open,\n      timeout: \"auto\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#ececec',\n          padding: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'flex-end'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              marginRight: '10px'\n            },\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => approve().catch(err => {\n              let errStr = '';\n\n              if (err) {\n                errStr = err.toString();\n              }\n\n              enqueueSnackbar(`Unable to approve transaction: ${errStr}`, {\n                variant: 'error'\n              });\n            }),\n            children: \"Approve\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: () => execute().catch(err => {\n              let errStr = '';\n\n              if (err) {\n                errStr = err.toString();\n              }\n\n              enqueueSnackbar(`Unable to execute transaction: ${errStr}`, {\n                variant: 'error'\n              });\n            }),\n            children: \"Execute\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            marginTop: '16px'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Transaction Field\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 549,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: \"Value\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 550,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 548,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 547,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: rows.map(r => /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: r.field\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 556,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: r.value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 557,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 555,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            marginTop: '16px'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Table, {\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Multisig Owner\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 569,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: \"Did Sign\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 570,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 568,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: txAccount.ownerSetSeqno === multisigAccount.ownerSetSeqno && msAccountRows.map(r => /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: r.field\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 577,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: r.value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 578,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 576,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 15\n            }, this), txAccount.ownerSetSeqno !== multisigAccount.ownerSetSeqno && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: '16px'\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"textSecondary\",\n                style: {\n                  textAlign: 'center'\n                },\n                children: \"The owner set has changed since this transaction was created\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            marginTop: '16px'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(AccountsList, {\n              accounts: txAccount.accounts\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s5(TxListItem, \"v3nh4wqVANTZxxQ4T4LKhdcH8cQ=\", false, function () {\n  return [useSnackbar, useWallet];\n});\n\n_c5 = TxListItem;\n\nfunction ixLabel(tx, multisigClient) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    // Upgrade instruction.\n    if (tx.account.data.equals(Buffer.from([3, 0, 0, 0]))) {\n      return /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: \"Program upgrade\",\n        secondary: tx.publicKey.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash('global', 'change_threshold');\n\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: \"Set threshold\",\n        secondary: tx.publicKey.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }, this);\n    }\n\n    const setOwnersSighash = multisigClient.coder.sighash('global', 'set_owners');\n\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: \"Set owners\",\n        secondary: tx.publicKey.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return /*#__PURE__*/_jsxDEV(ListItemText, {\n      primary: \"Upgrade IDL\",\n      secondary: tx.publicKey.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ListItemText, {\n    primary: tx.publicKey.toString()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 649,\n    columnNumber: 10\n  }, this);\n}\n\nfunction AccountsList(_ref5) {\n  let {\n    accounts\n  } = _ref5;\n  return /*#__PURE__*/_jsxDEV(Table, {\n    children: [/*#__PURE__*/_jsxDEV(TableHead, {\n      children: /*#__PURE__*/_jsxDEV(TableRow, {\n        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n          children: \"Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          align: \"right\",\n          children: \"Writable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          align: \"right\",\n          children: \"Signer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n      children: accounts.map(r => /*#__PURE__*/_jsxDEV(TableRow, {\n        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n          children: r.pubkey.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          align: \"right\",\n          children: r.isWritable.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          align: \"right\",\n          children: r.isSigner.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 654,\n    columnNumber: 5\n  }, this);\n}\n\n_c6 = AccountsList;\n\nfunction SignerDialog(_ref6) {\n  _s6();\n\n  let {\n    multisig,\n    multisigAccount,\n    open,\n    onClose\n  } = _ref6;\n  const {\n    multisigClient\n  } = useWallet();\n  const [signer, setSigner] = useState(null);\n  useEffect(() => {\n    PublicKey.findProgramAddress([multisig.toBuffer()], multisigClient.programId).then(addrNonce => setSigner(addrNonce[0].toString()));\n  }, [multisig, multisigClient.programId, setSigner]);\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    fullWidth: true,\n    onClose: onClose,\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h2\",\n        children: \"Multisig Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      style: {\n        paddingBottom: '16px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Program derived address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 11\n        }, this), \": \", signer, \". This is the address one should use as the authority for data governed by the multisig.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Owners\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: multisigAccount.owners.map(r => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              children: r.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 715,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 721,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 695,\n    columnNumber: 5\n  }, this);\n}\n\n_s6(SignerDialog, \"EtaGuOuhAPJhiWINuM7bkI5qf6Q=\", false, function () {\n  return [useWallet];\n});\n\n_c7 = SignerDialog;\n\nfunction AddTransactionDialog(_ref7) {\n  let {\n    multisig,\n    open,\n    onClose,\n    didAddTransaction\n  } = _ref7;\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    fullWidth: true,\n    onClose: onClose,\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h2\",\n        children: \"New Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      style: {\n        paddingBottom: '16px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: \"Create a new transaction to be signed by the multisig. This transaction will not execute until enough owners have signed the transaction.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        disablePadding: true,\n        children: [/*#__PURE__*/_jsxDEV(ProgramUpdateListItem, {\n          didAddTransaction: didAddTransaction,\n          multisig: multisig,\n          onClose: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IdlUpgradeListItem, {\n          didAddTransaction: didAddTransaction,\n          multisig: multisig,\n          onClose: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MultisigSetOwnersListItem, {\n          didAddTransaction: didAddTransaction,\n          multisig: multisig,\n          onClose: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChangeThresholdListItem, {\n          didAddTransaction: didAddTransaction,\n          multisig: multisig,\n          onClose: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 746,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 740,\n    columnNumber: 5\n  }, this);\n}\n\n_c8 = AddTransactionDialog;\n\nfunction ChangeThresholdListItem(_ref8) {\n  _s7();\n\n  let {\n    multisig,\n    onClose,\n    didAddTransaction\n  } = _ref8;\n  const [open, setOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListItem, {\n      button: true,\n      onClick: () => setOpen(open => !open),\n      children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n        children: /*#__PURE__*/_jsxDEV(GavelIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 793,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 792,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: 'Change threshold'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 9\n      }, this), open ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 791,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      in: open,\n      timeout: \"auto\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(ChangeThresholdListItemDetails, {\n        didAddTransaction: didAddTransaction,\n        multisig: multisig,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 799,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s7(ChangeThresholdListItem, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c9 = ChangeThresholdListItem;\n\nfunction ChangeThresholdListItemDetails(_ref9) {\n  _s8();\n\n  let {\n    multisig,\n    onClose,\n    didAddTransaction\n  } = _ref9;\n  const [threshold, setThreshold] = useState(2);\n  const {\n    multisigClient\n  } = useWallet(); // @ts-ignore\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n\n  const changeThreshold = async () => {\n    enqueueSnackbar('Creating change threshold transaction', {\n      variant: 'info'\n    });\n    const data = changeThresholdData(multisigClient, threshold);\n    const [multisigSigner] = await PublicKey.findProgramAddress([multisig.toBuffer()], multisigClient.programId);\n    const accounts = [{\n      pubkey: multisig,\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: multisigSigner,\n      isWritable: false,\n      isSigner: true\n    }];\n    const transaction = new Account();\n    const txSize = 1000; // todo\n\n    const tx = await multisigClient.rpc.createTransaction(multisigClient.programId, accounts, data, {\n      accounts: {\n        multisig,\n        transaction: transaction.publicKey,\n        proposer: multisigClient.provider.wallet.publicKey,\n        rent: SYSVAR_RENT_PUBKEY\n      },\n      signers: [transaction],\n      instructions: [await multisigClient.account.transaction.createInstruction(transaction, // @ts-ignore\n      txSize)]\n    });\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n        signature: tx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 868,\n        columnNumber: 15\n      }, this)\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#f1f0f0',\n      paddingLeft: '24px',\n      paddingRight: '24px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      style: {\n        marginTop: '16px'\n      },\n      label: \"Threshold\",\n      value: threshold,\n      type: \"number\",\n      onChange: e => {\n        // @ts-ignore\n        setThreshold(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 881,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => changeThreshold(),\n        children: \"Change Threshold\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 893,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 892,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 874,\n    columnNumber: 5\n  }, this);\n}\n\n_s8(ChangeThresholdListItemDetails, \"Ki9FZ1CbfzaUE/M/G2rjyOY1C2o=\", false, function () {\n  return [useWallet, useSnackbar];\n});\n\n_c10 = ChangeThresholdListItemDetails;\n\nfunction MultisigSetOwnersListItem(_ref10) {\n  _s9();\n\n  let {\n    multisig,\n    onClose,\n    didAddTransaction\n  } = _ref10;\n  const [open, setOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListItem, {\n      button: true,\n      onClick: () => setOpen(open => !open),\n      children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n        children: /*#__PURE__*/_jsxDEV(SupervisorAccountIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 913,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 912,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: 'Set owners'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 915,\n        columnNumber: 9\n      }, this), open ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 911,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      in: open,\n      timeout: \"auto\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(SetOwnersListItemDetails, {\n        didAddTransaction: didAddTransaction,\n        multisig: multisig,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 918,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s9(MultisigSetOwnersListItem, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c11 = MultisigSetOwnersListItem;\n\nfunction SetOwnersListItemDetails(_ref11) {\n  _s10();\n\n  let {\n    multisig,\n    onClose,\n    didAddTransaction\n  } = _ref11;\n  const {\n    multisigClient\n  } = useWallet(); // @ts-ignore\n\n  const zeroAddr = PublicKey.default.toString();\n  const [participants, setParticipants] = useState([multisigClient.provider.wallet.publicKey.toString(), zeroAddr]);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n\n  const setOwners = async () => {\n    enqueueSnackbar('Creating setOwners transaction', {\n      variant: 'info'\n    });\n    const owners = participants.map(p => new PublicKey(p));\n    const data = setOwnersData(multisigClient, owners);\n    const [multisigSigner] = await PublicKey.findProgramAddress([multisig.toBuffer()], multisigClient.programId);\n    const accounts = [{\n      pubkey: multisig,\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: multisigSigner,\n      isWritable: false,\n      isSigner: true\n    }];\n    const transaction = new Account();\n    const txSize = 5000; // TODO: tighter bound.\n\n    const tx = await multisigClient.rpc.createTransaction(multisigClient.programId, accounts, data, {\n      accounts: {\n        multisig,\n        transaction: transaction.publicKey,\n        proposer: multisigClient.provider.wallet.publicKey,\n        rent: SYSVAR_RENT_PUBKEY\n      },\n      signers: [transaction],\n      instructions: [await multisigClient.account.transaction.createInstruction(transaction, // @ts-ignore\n      txSize)]\n    });\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n        signature: tx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 993,\n        columnNumber: 15\n      }, this)\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#f1f0f0',\n      paddingLeft: '24px',\n      paddingRight: '24px'\n    },\n    children: [participants.map((p, idx) => /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      style: {\n        marginTop: '16px'\n      },\n      label: \"Participant\",\n      value: p,\n      onChange: e => {\n        const p = [...participants];\n        p[idx] = e.target.value;\n        setParticipants(p);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1007,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n      },\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => {\n          const p = [...participants]; // @ts-ignore\n\n          p.push(new PublicKey().toString());\n          setParticipants(p);\n        },\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1028,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1019,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginTop: '16px',\n        paddingBottom: '16px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setOwners(),\n        children: \"Set Owners\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1039,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1031,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 999,\n    columnNumber: 5\n  }, this);\n}\n\n_s10(SetOwnersListItemDetails, \"gqtbT2jz53hpcNcR7sP79LFLjhc=\", false, function () {\n  return [useWallet, useSnackbar];\n});\n\n_c12 = SetOwnersListItemDetails;\n\nfunction IdlUpgradeListItem(_ref12) {\n  _s11();\n\n  let {\n    multisig,\n    onClose,\n    didAddTransaction\n  } = _ref12;\n  const [open, setOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListItem, {\n      button: true,\n      onClick: () => setOpen(open => !open),\n      children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n        children: /*#__PURE__*/_jsxDEV(DescriptionIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1059,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: 'Upgrade IDL'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 9\n      }, this), open ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1062,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1062,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      in: open,\n      timeout: \"auto\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(UpgradeIdlListItemDetails, {\n        didAddTransaction: didAddTransaction,\n        multisig: multisig,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1065,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1064,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s11(IdlUpgradeListItem, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c13 = IdlUpgradeListItem;\n\nfunction UpgradeIdlListItemDetails(_ref13) {\n  _s12();\n\n  let {\n    multisig,\n    onClose,\n    didAddTransaction\n  } = _ref13;\n  const [programId, setProgramId] = useState(null);\n  const [buffer, setBuffer] = useState(null);\n  const {\n    multisigClient\n  } = useWallet();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n\n  const createTransactionAccount = async () => {\n    enqueueSnackbar('Creating transaction', {\n      variant: 'info'\n    });\n    const programAddr = new PublicKey(programId);\n    const bufferAddr = new PublicKey(buffer);\n    const idlAddr = await anchor.utils.idlAddress(programAddr);\n    const [multisigSigner] = await PublicKey.findProgramAddress([multisig.toBuffer()], multisigClient.programId);\n    const data = idl.encodeInstruction({\n      setBuffer: {}\n    });\n    const accs = [{\n      pubkey: bufferAddr,\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: idlAddr,\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: multisigSigner,\n      isWritable: true,\n      isSigner: false\n    }];\n    const txSize = 1000; // TODO: tighter bound.\n\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(programAddr, accs, data, {\n      accounts: {\n        multisig,\n        transaction: transaction.publicKey,\n        proposer: multisigClient.provider.wallet.publicKey,\n        rent: SYSVAR_RENT_PUBKEY\n      },\n      signers: [transaction],\n      instructions: [await multisigClient.account.transaction.createInstruction(transaction, // @ts-ignore\n      txSize)]\n    });\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n        signature: tx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1135,\n        columnNumber: 15\n      }, this)\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#f1f0f0',\n      paddingLeft: '24px',\n      paddingRight: '24px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      style: {\n        marginTop: '16px'\n      },\n      label: \"Program ID\",\n      value: programId,\n      onChange: e => setProgramId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      style: {\n        marginTop: '16px'\n      },\n      fullWidth: true,\n      label: \"New IDL buffer\",\n      value: buffer,\n      onChange: e => setBuffer(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginTop: '16px',\n        paddingBottom: '16px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => createTransactionAccount(),\n        children: \"Create upgrade\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1171,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1142,\n    columnNumber: 5\n  }, this);\n}\n\n_s12(UpgradeIdlListItemDetails, \"7SgUrGsG2ywVLWtKwCq2ToHz35s=\", false, function () {\n  return [useWallet, useSnackbar];\n});\n\n_c14 = UpgradeIdlListItemDetails;\n\nfunction ProgramUpdateListItem(_ref14) {\n  _s13();\n\n  let {\n    multisig,\n    onClose,\n    didAddTransaction\n  } = _ref14;\n  const [open, setOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListItem, {\n      button: true,\n      onClick: () => setOpen(open => !open),\n      children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n        children: /*#__PURE__*/_jsxDEV(BuildIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: 'Upgrade program'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1195,\n        columnNumber: 9\n      }, this), open ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1196,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1196,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      in: open,\n      timeout: \"auto\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(UpgradeProgramListItemDetails, {\n        didAddTransaction: didAddTransaction,\n        multisig: multisig,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s13(ProgramUpdateListItem, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c15 = ProgramUpdateListItem;\nconst BPF_LOADER_UPGRADEABLE_PID = new PublicKey('BPFLoaderUpgradeab1e11111111111111111111111');\n\nfunction UpgradeProgramListItemDetails(_ref15) {\n  _s14();\n\n  let {\n    multisig,\n    onClose,\n    didAddTransaction\n  } = _ref15;\n  const [programId, setProgramId] = useState(null);\n  const [buffer, setBuffer] = useState(null);\n  const {\n    multisigClient\n  } = useWallet();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n\n  const createTransactionAccount = async () => {\n    enqueueSnackbar('Creating transaction', {\n      variant: 'info'\n    });\n    const programAddr = new PublicKey(programId);\n    const bufferAddr = new PublicKey(buffer); // Hard code serialization.\n\n    const data = Buffer.from([3, 0, 0, 0]);\n    const programAccount = await (async () => {\n      const programAccount = await multisigClient.provider.connection.getAccountInfo(programAddr);\n\n      if (programAccount === null) {\n        throw new Error('Invalid program ID');\n      }\n\n      return {\n        // Hard code deserialization.\n        programdataAddress: new PublicKey(programAccount.data.slice(4))\n      };\n    })();\n    const spill = multisigClient.provider.wallet.publicKey;\n    const [multisigSigner] = await PublicKey.findProgramAddress([multisig.toBuffer()], multisigClient.programId);\n    const accs = [{\n      pubkey: programAccount.programdataAddress,\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: programAddr,\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: bufferAddr,\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: spill,\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: multisigSigner,\n      isWritable: false,\n      isSigner: false\n    }];\n    const txSize = 1000; // TODO: tighter bound.\n\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(BPF_LOADER_UPGRADEABLE_PID, accs, data, {\n      accounts: {\n        multisig,\n        transaction: transaction.publicKey,\n        proposer: multisigClient.provider.wallet.publicKey,\n        rent: SYSVAR_RENT_PUBKEY\n      },\n      signers: [transaction],\n      instructions: [await multisigClient.account.transaction.createInstruction(transaction, // @ts-ignore\n      txSize)]\n    });\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n        signature: tx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1291,\n        columnNumber: 15\n      }, this)\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#f1f0f0',\n      paddingLeft: '24px',\n      paddingRight: '24px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      style: {\n        marginTop: '16px'\n      },\n      label: \"Program ID\",\n      value: programId,\n      onChange: e => setProgramId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      style: {\n        marginTop: '16px'\n      },\n      fullWidth: true,\n      label: \"New program buffer\",\n      value: buffer,\n      onChange: e => setBuffer(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginTop: '16px',\n        paddingBottom: '16px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => createTransactionAccount(),\n        children: \"Create upgrade\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1327,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1319,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1298,\n    columnNumber: 5\n  }, this);\n} // @ts-ignore\n\n\n_s14(UpgradeProgramListItemDetails, \"7SgUrGsG2ywVLWtKwCq2ToHz35s=\", false, function () {\n  return [useWallet, useSnackbar];\n});\n\n_c16 = UpgradeProgramListItemDetails;\n\nfunction icon(tx, multisigClient) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    return /*#__PURE__*/_jsxDEV(BuildIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1338,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash('global', 'change_threshold');\n\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return /*#__PURE__*/_jsxDEV(GavelIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1346,\n        columnNumber: 14\n      }, this);\n    }\n\n    const setOwnersSighash = multisigClient.coder.sighash('global', 'set_owners');\n\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return /*#__PURE__*/_jsxDEV(SupervisorAccountIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1353,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return /*#__PURE__*/_jsxDEV(DescriptionIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1357,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ReceiptIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1359,\n    columnNumber: 10\n  }, this);\n} // @ts-ignore\n\n\nfunction changeThresholdData(multisigClient, threshold) {\n  return multisigClient.coder.instruction.encode('change_threshold', {\n    threshold: new BN(threshold)\n  });\n} // @ts-ignore\n\n\nfunction setOwnersData(multisigClient, owners) {\n  return multisigClient.coder.instruction.encode('set_owners', {\n    owners\n  });\n}\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n\n$RefreshReg$(_c, \"Multisig\");\n$RefreshReg$(_c2, \"MultisigInstance\");\n$RefreshReg$(_c3, \"NewMultisigButton\");\n$RefreshReg$(_c4, \"NewMultisigDialog\");\n$RefreshReg$(_c5, \"TxListItem\");\n$RefreshReg$(_c6, \"AccountsList\");\n$RefreshReg$(_c7, \"SignerDialog\");\n$RefreshReg$(_c8, \"AddTransactionDialog\");\n$RefreshReg$(_c9, \"ChangeThresholdListItem\");\n$RefreshReg$(_c10, \"ChangeThresholdListItemDetails\");\n$RefreshReg$(_c11, \"MultisigSetOwnersListItem\");\n$RefreshReg$(_c12, \"SetOwnersListItemDetails\");\n$RefreshReg$(_c13, \"IdlUpgradeListItem\");\n$RefreshReg$(_c14, \"UpgradeIdlListItemDetails\");\n$RefreshReg$(_c15, \"ProgramUpdateListItem\");\n$RefreshReg$(_c16, \"UpgradeProgramListItemDetails\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/components/multisig/Multisig.tsx"],"names":["React","useState","useEffect","useHistory","useSnackbar","encode","encodeBase64","Container","AppBar","GavelIcon","DescriptionIcon","Paper","SupervisorAccountIcon","CheckIcon","ReceiptIcon","RemoveIcon","Collapse","Toolbar","InfoIcon","Table","TableHead","TableBody","TableCell","TableRow","BuildIcon","Tooltip","CircularProgress","Typography","Card","ExpandLess","ExpandMore","CardContent","TextField","IconButton","Button","SearchIcon","DialogContent","DialogContentText","Dialog","DialogTitle","DialogActions","AddIcon","List","ListItemIcon","ListItem","ListItemText","CheckCircleIcon","BN","Account","PublicKey","SYSVAR_RENT_PUBKEY","SYSVAR_CLOCK_PUBKEY","anchor","useWallet","ViewTransactionOnExplorerButton","idl","Multisig","multisig","history","multisigAddress","setMultisigAddress","disabled","isValidPubkey","searchFn","push","paddingLeft","paddingRight","borderBottom","display","flex","background","padding","border","outlineWidth","e","target","value","key","addr","_","MultisigInstance","multisigClient","multisigAccount","setMultisigAccount","undefined","transactions","setTransactions","showSignerDialog","setShowSignerDialog","showAddTransactionDialog","setShowAddTransactionDialog","forceRefresh","setForceRefresh","account","then","catch","err","console","error","transaction","all","toBuffer","txs","subscribe","on","marginBottom","marginTop","marginLeft","marginRight","textAlign","flexGrow","toString","threshold","owners","length","map","tx","publicKey","NewMultisigButton","open","setOpen","NewMultisigDialog","onClose","enqueueSnackbar","setThreshold","zeroAddr","default","participants","setParticipants","provider","wallet","_onClose","createMultisig","variant","baseSize","ownerSize","multisigSize","nonce","findProgramAddress","programId","p","rpc","accounts","rent","signers","instructions","createInstruction","action","parseInt","idx","justifyContent","str","TxListItem","txAccount","setTxAccount","rows","field","didExecute","wordBreak","width","color","float","data","ownerSetSeqno","msAccountRows","owner","approve","execute","multisigSigner","executeTransaction","remainingAccounts","t","pubkey","equals","isSigner","concat","isWritable","icon","ixLabel","errStr","r","BPF_LOADER_UPGRADEABLE_PID","Buffer","from","setThresholdSighash","coder","sighash","slice","setOwnersSighash","IDL_TAG","AccountsList","SignerDialog","signer","setSigner","addrNonce","paddingBottom","AddTransactionDialog","didAddTransaction","ChangeThresholdListItem","ChangeThresholdListItemDetails","changeThreshold","changeThresholdData","txSize","createTransaction","proposer","MultisigSetOwnersListItem","SetOwnersListItemDetails","setOwners","setOwnersData","IdlUpgradeListItem","UpgradeIdlListItemDetails","setProgramId","buffer","setBuffer","createTransactionAccount","programAddr","bufferAddr","idlAddr","utils","idlAddress","encodeInstruction","accs","ProgramUpdateListItem","UpgradeProgramListItemDetails","programAccount","connection","getAccountInfo","Error","programdataAddress","spill","instruction"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { encode as encodeBase64 } from 'js-base64';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport GavelIcon from '@material-ui/icons/Gavel';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport Paper from '@material-ui/core/Paper';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport Collapse from '@material-ui/core/Collapse';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport BuildIcon from '@material-ui/icons/Build';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport AddIcon from '@material-ui/icons/Add';\nimport List from '@material-ui/core/List';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport BN from 'bn.js';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { useWallet } from '../common/WalletProvider';\nimport { ViewTransactionOnExplorerButton } from '../common/Notification';\nimport * as idl from '../../utils/idl';\n\nexport default function Multisig({ multisig }: { multisig?: PublicKey }) {\n  const history = useHistory();\n  const [multisigAddress, setMultisigAddress] = useState('');\n  const disabled = !isValidPubkey(multisigAddress);\n  const searchFn = () => {\n    history.push(`/multisig/${multisigAddress}`);\n  };\n  return (\n    <div>\n      <div\n        style={{\n          paddingLeft: '16px',\n          paddingRight: '16px',\n          borderBottom: 'solid 1pt #ccc',\n          display: 'flex',\n        }}\n      >\n        <input\n          style={{\n            flex: 1,\n            background: 'none',\n            padding: '16px',\n            border: 'none',\n            outlineWidth: 0,\n          }}\n          placeholder=\"Multisig address\"\n          value={multisigAddress}\n          onChange={e => setMultisigAddress(e.target.value as string)}\n          onKeyPress={e => {\n            if (e.key === 'Enter') {\n              searchFn();\n            }\n          }}\n        />\n        <IconButton disabled={disabled} onClick={searchFn}>\n          <SearchIcon />\n        </IconButton>\n        <NewMultisigButton />\n      </div>\n      <div>{multisig && <MultisigInstance multisig={multisig} />}</div>\n    </div>\n  );\n}\n\nfunction isValidPubkey(addr: string): boolean {\n  try {\n    new PublicKey(addr);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport function MultisigInstance({ multisig }: { multisig: PublicKey }) {\n  const { multisigClient } = useWallet();\n  const [multisigAccount, setMultisigAccount] = useState<any>(undefined);\n  const [transactions, setTransactions] = useState<any>(null);\n  const [showSignerDialog, setShowSignerDialog] = useState(false);\n  const [showAddTransactionDialog, setShowAddTransactionDialog] = useState(\n    false,\n  );\n  const [forceRefresh, setForceRefresh] = useState(false);\n  useEffect(() => {\n    multisigClient.account\n      .multisig(multisig)\n      .then((account: any) => {\n        setMultisigAccount(account);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        setMultisigAccount(null);\n      });\n  }, [multisig, multisigClient.account]);\n  useEffect(() => {\n    multisigClient.account.transaction.all(multisig.toBuffer()).then(txs => {\n      setTransactions(txs);\n    });\n  }, [multisigClient.account.transaction, multisig, forceRefresh]);\n  useEffect(() => {\n    multisigClient.account.multisig\n      .subscribe(multisig)\n      .on('change', account => {\n        setMultisigAccount(account);\n      });\n  }, [multisigClient, multisig]);\n  return (\n    <Container fixed maxWidth=\"md\" style={{ marginBottom: '16px' }}>\n      <div>\n        <Card style={{ marginTop: '24px' }}>\n          {multisigAccount === undefined ? (\n            <div style={{ padding: '16px' }}>\n              <CircularProgress\n                style={{\n                  display: 'block',\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                }}\n              />\n            </div>\n          ) : multisigAccount === null ? (\n            <CardContent>\n              <Typography\n                color=\"textSecondary\"\n                style={{\n                  padding: '24px',\n                  textAlign: 'center',\n                }}\n              >\n                Multisig not found\n              </Typography>\n            </CardContent>\n          ) : (\n            <></>\n          )}\n        </Card>\n        {multisigAccount && (\n          <Paper>\n            <AppBar\n              style={{ marginTop: '24px' }}\n              position=\"static\"\n              color=\"default\"\n              elevation={1}\n            >\n              <Toolbar>\n                <Typography variant=\"h6\" style={{ flexGrow: 1 }} component=\"h2\">\n                  {multisig.toString()} | {multisigAccount.threshold.toString()}{' '}\n                  of {multisigAccount.owners.length.toString()} Multisig\n                </Typography>\n                <Tooltip title=\"Signer\" arrow>\n                  <IconButton onClick={() => setShowSignerDialog(true)}>\n                    <InfoIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Add\" arrow>\n                  <IconButton onClick={() => setShowAddTransactionDialog(true)}>\n                    <AddIcon />\n                  </IconButton>\n                </Tooltip>\n              </Toolbar>\n            </AppBar>\n            <List disablePadding>\n              {transactions === null ? (\n                <div style={{ padding: '16px' }}>\n                  <CircularProgress\n                    style={{\n                      display: 'block',\n                      marginLeft: 'auto',\n                      marginRight: 'auto',\n                    }}\n                  />\n                </div>\n              ) : transactions.length === 0 ? (\n                <ListItem>\n                  <ListItemText primary=\"No transactions found\" />\n                </ListItem>\n              ) : (\n                transactions.map((tx: any) => (\n                  <TxListItem\n                    key={tx.publicKey.toString()}\n                    multisig={multisig}\n                    multisigAccount={multisigAccount}\n                    tx={tx}\n                  />\n                ))\n              )}\n            </List>\n          </Paper>\n        )}\n      </div>\n      <AddTransactionDialog\n        multisig={multisig}\n        open={showAddTransactionDialog}\n        onClose={() => setShowAddTransactionDialog(false)}\n        didAddTransaction={() => setForceRefresh(!forceRefresh)}\n      />\n      {multisigAccount && (\n        <SignerDialog\n          multisig={multisig}\n          multisigAccount={multisigAccount}\n          open={showSignerDialog}\n          onClose={() => setShowSignerDialog(false)}\n        />\n      )}\n    </Container>\n  );\n}\n\nfunction NewMultisigButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <div>\n      <IconButton onClick={() => setOpen(true)}>\n        <AddIcon />\n      </IconButton>\n      <NewMultisigDialog open={open} onClose={() => setOpen(false)} />\n    </div>\n  );\n}\n\nfunction NewMultisigDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  const history = useHistory();\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const [threshold, setThreshold] = useState(2);\n  // @ts-ignore\n  const zeroAddr = PublicKey.default.toString();\n  const [participants, setParticipants] = useState([\n    multisigClient.provider.wallet.publicKey.toString(),\n    zeroAddr,\n  ]);\n  const _onClose = () => {\n    onClose();\n    setThreshold(2);\n    setParticipants([zeroAddr, zeroAddr]);\n  };\n  const createMultisig = async () => {\n    enqueueSnackbar('Creating multisig', {\n      variant: 'info',\n    });\n    const multisig = new Account();\n    // Disc. + threshold + nonce.\n    const baseSize = 8 + 8 + 1;\n    // Can only grow the participant set by 2x the initialized value.\n    const ownerSize = participants.length * 2 * 32 + 8;\n    const multisigSize = baseSize + ownerSize;\n    const [, nonce] = await PublicKey.findProgramAddress(\n      [multisig.publicKey.toBuffer()],\n      multisigClient.programId,\n    );\n    const owners = participants.map(p => new PublicKey(p));\n    const tx = await multisigClient.rpc.createMultisig(\n      owners,\n      new BN(threshold),\n      nonce,\n      {\n        accounts: {\n          multisig: multisig.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [multisig],\n        instructions: [\n          await multisigClient.account.multisig.createInstruction(\n            multisig,\n            // @ts-ignore\n            multisigSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar(`Multisig created: ${multisig.publicKey.toString()}`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    _onClose();\n    history.push(`/multisig/${multisig.publicKey.toString()}`);\n  };\n  return (\n    <Dialog fullWidth open={open} onClose={_onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Multisig\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          fullWidth\n          label=\"Threshold\"\n          value={threshold}\n          type=\"number\"\n          onChange={e => setThreshold(parseInt(e.target.value) as number)}\n        />\n        {participants.map((p, idx) => (\n          <TextField\n            key={p}\n            fullWidth\n            label=\"Participant\"\n            value={p}\n            onChange={e => {\n              const p = [...participants];\n              p[idx] = e.target.value;\n              setParticipants(p);\n            }}\n          />\n        ))}\n        <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n          <IconButton\n            onClick={() => {\n              const p = [...participants];\n              // @ts-ignore\n              p.push(new PublicKey().toString());\n              setParticipants(p);\n            }}\n          >\n            <AddIcon />\n          </IconButton>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={_onClose}>Cancel</Button>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          onClick={() =>\n            createMultisig().catch(err => {\n              const str = err ? err.toString() : '';\n              enqueueSnackbar(`Error creating multisig: ${str}`, {\n                variant: 'error',\n              });\n            })\n          }\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction TxListItem({\n  multisig,\n  multisigAccount,\n  tx,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  tx: any;\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n  const { multisigClient } = useWallet();\n  const [open, setOpen] = useState(false);\n  const [txAccount, setTxAccount] = useState(tx.account);\n  useEffect(() => {\n    multisigClient.account.transaction\n      .subscribe(tx.publicKey)\n      .on('change', account => {\n        setTxAccount(account);\n      });\n  }, [multisigClient, multisig, tx.publicKey]);\n  const rows = [\n    {\n      field: 'Program ID',\n      value: txAccount.programId.toString(),\n    },\n    {\n      field: 'Did execute',\n      value: txAccount.didExecute.toString(),\n    },\n    {\n      field: 'Instruction data',\n      value: (\n        <code\n          style={{\n            wordBreak: 'break-word',\n            width: '370px',\n            background: 'black',\n            color: '#ffffff',\n            float: 'right',\n            textAlign: 'left',\n          }}\n        >\n          {encodeBase64(txAccount.data)}\n        </code>\n      ),\n    },\n    {\n      field: 'Multisig',\n      value: txAccount.multisig.toString(),\n    },\n    {\n      field: 'Transaction account',\n      value: tx.publicKey.toString(),\n    },\n    {\n      field: 'Owner set seqno',\n      value: txAccount.ownerSetSeqno.toString(),\n    },\n  ];\n  const msAccountRows = multisigAccount.owners.map(\n    (owner: PublicKey, idx: number) => {\n      return {\n        field: owner.toString(),\n        value: txAccount.signers[idx] ? <CheckIcon /> : <RemoveIcon />,\n      };\n    },\n  );\n  const approve = async () => {\n    enqueueSnackbar('Approving transaction', {\n      variant: 'info',\n    });\n    await multisigClient.rpc.approve({\n      accounts: {\n        multisig,\n        transaction: tx.publicKey,\n        owner: multisigClient.provider.wallet.publicKey,\n      },\n    });\n    enqueueSnackbar('Transaction approved', {\n      variant: 'success',\n    });\n  };\n  const execute = async () => {\n    enqueueSnackbar('Executing transaction', {\n      variant: 'info',\n    });\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    await multisigClient.rpc.executeTransaction({\n      accounts: {\n        multisig,\n        multisigSigner,\n        transaction: tx.publicKey,\n      },\n      remainingAccounts: txAccount.accounts\n        .map((t: any) => {\n          if (t.pubkey.equals(multisigSigner)) {\n            return { ...t, isSigner: false };\n          }\n          return t;\n        })\n        .concat({\n          pubkey: txAccount.programId,\n          isWritable: false,\n          isSigner: false,\n        }),\n    });\n    enqueueSnackbar('Transaction executed', {\n      variant: 'success',\n    });\n  };\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)}>\n        <ListItemIcon>{icon(tx, multisigClient)}</ListItemIcon>\n        {ixLabel(tx, multisigClient)}\n        {txAccount.didExecute && (\n          <CheckCircleIcon style={{ marginRight: '16px' }} />\n        )}\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <div style={{ background: '#ececec', padding: '10px' }}>\n          <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n            <Button\n              style={{ marginRight: '10px' }}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() =>\n                approve().catch(err => {\n                  let errStr = '';\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to approve transaction: ${errStr}`, {\n                    variant: 'error',\n                  });\n                })\n              }\n            >\n              Approve\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() =>\n                execute().catch(err => {\n                  let errStr = '';\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to execute transaction: ${errStr}`, {\n                    variant: 'error',\n                  });\n                })\n              }\n            >\n              Execute\n            </Button>\n          </div>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Transaction Field</TableCell>\n                    <TableCell align=\"right\">Value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map(r => (\n                    <TableRow>\n                      <TableCell>{r.field}</TableCell>\n                      <TableCell align=\"right\">{r.value}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Multisig Owner</TableCell>\n                    <TableCell align=\"right\">Did Sign</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {txAccount.ownerSetSeqno === multisigAccount.ownerSetSeqno &&\n                    msAccountRows.map((r: any) => (\n                      <TableRow>\n                        <TableCell>{r.field}</TableCell>\n                        <TableCell align=\"right\">{r.value}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n              {txAccount.ownerSetSeqno !== multisigAccount.ownerSetSeqno && (\n                <div style={{ marginTop: '16px' }}>\n                  <Typography\n                    color=\"textSecondary\"\n                    style={{ textAlign: 'center' }}\n                  >\n                    The owner set has changed since this transaction was created\n                  </Typography>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <AccountsList accounts={txAccount.accounts} />\n            </CardContent>\n          </Card>\n        </div>\n      </Collapse>\n    </>\n  );\n}\n\nfunction ixLabel(tx: any, multisigClient: any) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    // Upgrade instruction.\n    if (tx.account.data.equals(Buffer.from([3, 0, 0, 0]))) {\n      return (\n        <ListItemText\n          primary=\"Program upgrade\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      'global',\n      'change_threshold',\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set threshold\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      'global',\n      'set_owners',\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set owners\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return (\n      <ListItemText primary=\"Upgrade IDL\" secondary={tx.publicKey.toString()} />\n    );\n  }\n  return <ListItemText primary={tx.publicKey.toString()} />;\n}\n\nfunction AccountsList({ accounts }: { accounts: any }) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Account</TableCell>\n          <TableCell align=\"right\">Writable</TableCell>\n          <TableCell align=\"right\">Signer</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {accounts.map((r: any) => (\n          <TableRow>\n            <TableCell>{r.pubkey.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isWritable.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isSigner.toString()}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nfunction SignerDialog({\n  multisig,\n  multisigAccount,\n  open,\n  onClose,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  open: boolean;\n  onClose: () => void;\n}) {\n  const { multisigClient } = useWallet();\n  const [signer, setSigner] = useState<null | string>(null);\n  useEffect(() => {\n    PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    ).then(addrNonce => setSigner(addrNonce[0].toString()));\n  }, [multisig, multisigClient.programId, setSigner]);\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          Multisig Info\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: '16px' }}>\n        <DialogContentText>\n          <b>Program derived address</b>: {signer}. This is the address one\n          should use as the authority for data governed by the multisig.\n        </DialogContentText>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Owners</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {multisigAccount.owners.map((r: any) => (\n              <TableRow>\n                <TableCell>{r.toString()}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction AddTransactionDialog({\n  multisig,\n  open,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  open: boolean;\n  onClose: () => void;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Transaction\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: '16px' }}>\n        <DialogContentText>\n          Create a new transaction to be signed by the multisig. This\n          transaction will not execute until enough owners have signed the\n          transaction.\n        </DialogContentText>\n        <List disablePadding>\n          <ProgramUpdateListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <IdlUpgradeListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <MultisigSetOwnersListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <ChangeThresholdListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </List>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction ChangeThresholdListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <GavelIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Change threshold'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <ChangeThresholdListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction ChangeThresholdListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [threshold, setThreshold] = useState(2);\n  const { multisigClient } = useWallet();\n  // @ts-ignore\n  const { enqueueSnackbar } = useSnackbar();\n  const changeThreshold = async () => {\n    enqueueSnackbar('Creating change threshold transaction', {\n      variant: 'info',\n    });\n    const data = changeThresholdData(multisigClient, threshold);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 1000; // todo\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Threshold\"\n        value={threshold}\n        type=\"number\"\n        onChange={e => {\n          // @ts-ignore\n          setThreshold(e.target.value);\n        }}\n      />\n      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <Button onClick={() => changeThreshold()}>Change Threshold</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction MultisigSetOwnersListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <SupervisorAccountIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Set owners'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <SetOwnersListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction SetOwnersListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const { multisigClient } = useWallet();\n  // @ts-ignore\n  const zeroAddr = PublicKey.default.toString();\n  const [participants, setParticipants] = useState([\n    multisigClient.provider.wallet.publicKey.toString(),\n    zeroAddr,\n  ]);\n  const { enqueueSnackbar } = useSnackbar();\n  const setOwners = async () => {\n    enqueueSnackbar('Creating setOwners transaction', {\n      variant: 'info',\n    });\n    const owners = participants.map(p => new PublicKey(p));\n    const data = setOwnersData(multisigClient, owners);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 5000; // TODO: tighter bound.\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      {participants.map((p, idx) => (\n        <TextField\n          fullWidth\n          style={{ marginTop: '16px' }}\n          label=\"Participant\"\n          value={p}\n          onChange={e => {\n            const p = [...participants];\n            p[idx] = e.target.value;\n            setParticipants(p);\n          }}\n        />\n      ))}\n      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <IconButton\n          onClick={() => {\n            const p = [...participants];\n            // @ts-ignore\n            p.push(new PublicKey().toString());\n            setParticipants(p);\n          }}\n        >\n          <AddIcon />\n        </IconButton>\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => setOwners()}>Set Owners</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction IdlUpgradeListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <DescriptionIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Upgrade IDL'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeIdlListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction UpgradeIdlListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar('Creating transaction', {\n      variant: 'info',\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    const idlAddr = await anchor.utils.idlAddress(programAddr);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const data = idl.encodeInstruction({ setBuffer: {} });\n    const accs = [\n      {\n        pubkey: bufferAddr,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: idlAddr, isWritable: true, isSigner: false },\n      { pubkey: multisigSigner, isWritable: true, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      programAddr,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={e => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: '16px' }}\n        fullWidth\n        label=\"New IDL buffer\"\n        value={buffer}\n        onChange={e => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction ProgramUpdateListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <BuildIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Upgrade program'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeProgramListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nconst BPF_LOADER_UPGRADEABLE_PID = new PublicKey(\n  'BPFLoaderUpgradeab1e11111111111111111111111',\n);\n\nfunction UpgradeProgramListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar('Creating transaction', {\n      variant: 'info',\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    // Hard code serialization.\n    const data = Buffer.from([3, 0, 0, 0]);\n\n    const programAccount = await (async () => {\n      const programAccount = await multisigClient.provider.connection.getAccountInfo(\n        programAddr,\n      );\n      if (programAccount === null) {\n        throw new Error('Invalid program ID');\n      }\n      return {\n        // Hard code deserialization.\n        programdataAddress: new PublicKey(programAccount.data.slice(4)),\n      };\n    })();\n    const spill = multisigClient.provider.wallet.publicKey;\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accs = [\n      {\n        pubkey: programAccount.programdataAddress,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: programAddr, isWritable: true, isSigner: false },\n      { pubkey: bufferAddr, isWritable: true, isSigner: false },\n      { pubkey: spill, isWritable: true, isSigner: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: multisigSigner, isWritable: false, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      BPF_LOADER_UPGRADEABLE_PID,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={e => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: '16px' }}\n        fullWidth\n        label=\"New program buffer\"\n        value={buffer}\n        onChange={e => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// @ts-ignore\nfunction icon(tx, multisigClient) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    return <BuildIcon />;\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      'global',\n      'change_threshold',\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return <GavelIcon />;\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      'global',\n      'set_owners',\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return <SupervisorAccountIcon />;\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return <DescriptionIcon />;\n  }\n  return <ReceiptIcon />;\n}\n\n// @ts-ignore\nfunction changeThresholdData(multisigClient, threshold) {\n  return multisigClient.coder.instruction.encode('change_threshold', {\n    threshold: new BN(threshold),\n  });\n}\n\n// @ts-ignore\nfunction setOwnersData(multisigClient, owners) {\n  return multisigClient.coder.instruction.encode('set_owners', {\n    owners,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}