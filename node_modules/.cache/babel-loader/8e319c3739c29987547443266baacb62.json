{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\components\\\\lockups\\\\NewVesting.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport BN from 'bn.js';\nimport { Account, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { createTokenAccountInstrs } from '@project-serum/common';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { ActionType } from '../../store/actions';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { fromDisplay } from '../../utils/tokens';\nimport { vestingSigner } from '../../utils/lockup';\nimport { ViewTransactionOnExplorerButton } from '../common/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function NewVestingButton() {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => setOpen(true),\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        children: \"New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewVestingDialog, {\n      open: open,\n      onClose: () => setOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(NewVestingButton, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c = NewVestingButton;\n\nfunction NewVestingDialog(props) {\n  _s2();\n\n  const {\n    open,\n    onClose\n  } = props;\n  const {\n    network,\n    accounts\n  } = useSelector(state => {\n    return {\n      network: state.common.network,\n      accounts: state.accounts\n    };\n  });\n  const defaultStartDate = new Date().toString();\n  const defaultStartTs = new Date(defaultStartDate).getTime() / 1000;\n  const defaultEndDate = '2027-01-01T12:00';\n  const defaultEndTs = new Date(defaultEndDate).getTime() / 1000;\n  const [beneficiary, setBeneficiary] = useState('');\n\n  const isValidBeneficiary = (() => {\n    try {\n      new PublicKey(beneficiary);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  })();\n\n  const displayBeneficiaryError = !isValidBeneficiary && beneficiary !== '';\n  const [fromAccount, setFromAccount] = useState(null);\n  const [startTimestamp, setStartTimestamp] = useState(defaultStartTs);\n  const [timestamp, setTimestamp] = useState(defaultEndTs);\n  const [periodCount, setPeriodCount] = useState(7);\n  const [displayAmount, setDisplayAmount] = useState(null);\n  const {\n    lockupClient\n  } = useWallet();\n  const [isLoading, setIsLoading] = useState(false);\n  const [mint, setMint] = useState(null);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const dispatch = useDispatch();\n  const submitBtnEnabled = mint !== null && fromAccount !== null && isValidBeneficiary && displayAmount !== null;\n\n  const createVestingClickHandler = async () => {\n    setIsLoading(true);\n\n    try {\n      const beneficiaryPublicKey = new PublicKey(beneficiary);\n      const beneficiaryAccount = await lockupClient.provider.connection.getAccountInfo(beneficiaryPublicKey);\n\n      if (beneficiaryAccount === null) {\n        enqueueSnackbar('Unable to validate given beneficiary.', {\n          variant: 'error'\n        });\n        setIsLoading(false);\n        return;\n      }\n\n      if (!beneficiaryAccount.owner.equals(SystemProgram.programId)) {\n        enqueueSnackbar('The beneficiary must be owned by the System Program.', {\n          variant: 'error'\n        });\n        setIsLoading(false);\n        return;\n      }\n\n      enqueueSnackbar('Creating vesting acount...', {\n        variant: 'info'\n      });\n      const mintAccount = accounts[mint.toString()];\n      let amount = mintAccount ? fromDisplay(displayAmount, mintAccount.decimals) : new BN(displayAmount);\n      const vesting = new Account();\n      const vestingVault = new Account();\n\n      const _vestingSigner = await vestingSigner(lockupClient.programId, vesting.publicKey);\n\n      let tx = await lockupClient.rpc.createVesting(beneficiaryPublicKey, amount, _vestingSigner.nonce, new BN(startTimestamp), new BN(timestamp), new BN(periodCount), null, {\n        accounts: {\n          vesting: vesting.publicKey,\n          vault: vestingVault.publicKey,\n          depositor: fromAccount,\n          depositorAuthority: lockupClient.provider.wallet.publicKey,\n          tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n          rent: SYSVAR_RENT_PUBKEY,\n          clock: SYSVAR_CLOCK_PUBKEY\n        },\n        signers: [vesting, vestingVault],\n        instructions: [await lockupClient.account.vesting.createInstruction(vesting), ...(await createTokenAccountInstrs(lockupClient.provider, vestingVault.publicKey, mint, _vestingSigner.publicKey))]\n      }); // Only add to the local store if the lockup belongs to the current user.\n\n      if (beneficiaryPublicKey.equals(lockupClient.provider.wallet.publicKey)) {\n        const vestingAccount = await lockupClient.account.vesting(vesting.publicKey);\n        dispatch({\n          type: ActionType.LockupCreateVesting,\n          item: {\n            vesting: {\n              publicKey: vesting.publicKey,\n              account: vestingAccount\n            }\n          }\n        });\n      }\n\n      enqueueSnackbar(`Vesting account created`, {\n        variant: 'success',\n        action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n          signature: tx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }, this)\n      });\n      onClose();\n    } catch (err) {\n      enqueueSnackbar(`Error creating vesting account: ${err.toString()}`, {\n        variant: 'error'\n      });\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    onClose: onClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h2\",\n        children: \"New Vesting Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '40px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            marginBottom: '24px'\n          },\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n            style: {\n              marginLeft: 'auto',\n              marginRight: 'auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              variant: \"outlined\",\n              style: {\n                width: '200px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                children: \"Mint\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                value: mint ? mint.toString() : '',\n                onChange: e => setMint(new PublicKey(e.target.value)),\n                children: Object.keys(network.mints).map(m => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: network.mints[m].toString(),\n                  children: m.toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), false && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 1,\n              marginLeft: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Custom mint\",\n              value: mint ? mint.toString() : '',\n              onChange: e => setMint(new PublicKey(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Mint of the token to lockup\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                flex: 1\n              },\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                fullWidth: true,\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  children: \"From\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(OwnedTokenAccountsSelect, {\n                  mint: mint,\n                  onChange: f => setFromAccount(f)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                  children: \"Token account to send from\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '24px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            error: displayBeneficiaryError,\n            helperText: displayBeneficiaryError && 'Invalid beneficiary',\n            label: \"Beneficiary\",\n            value: beneficiary,\n            onChange: e => setBeneficiary(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: \"Owner of the new vesting account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '24px'\n          },\n          children: [false && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            style: {\n              color: 'blue'\n            },\n            children: \"Note: Amounts for custom mints (i.e., not SRM/MSRM) are in their raw, non-decimal form. Make sure to convert before entering into the fields here. For example, if a token has 6 decimals, then multiply your desired amount by 10^6.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Amount\",\n            type: \"number\",\n            value: displayAmount,\n            InputProps: {\n              inputProps: {\n                min: 0\n              }\n            },\n            onChange: e => setDisplayAmount(parseFloat(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: \"Amount to deposit into the vesting account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '24px',\n            display: 'flex'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 1,\n              marginRight: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Start date\",\n              type: \"datetime-local\",\n              defaultValue: defaultStartDate,\n              InputLabelProps: {\n                shrink: true\n              },\n              onChange: e => {\n                const d = new Date(e.target.value);\n                setStartTimestamp(d.getTime() / 1000);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Date when vesting begins\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              disabled: true,\n              fullWidth: true,\n              label: \"Unix Timestamp\",\n              value: startTimestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '24px',\n            display: 'flex'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 1,\n              marginRight: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"End date\",\n              type: \"datetime-local\",\n              defaultValue: defaultEndDate,\n              InputLabelProps: {\n                shrink: true\n              },\n              onChange: e => {\n                const d = new Date(e.target.value);\n                setTimestamp(d.getTime() / 1000);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Date when all tokens are vested\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              disabled: true,\n              fullWidth: true,\n              label: \"Unix Timestamp\",\n              value: timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '24px'\n          },\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"outlined-number\",\n              label: \"Period Count\",\n              type: \"number\",\n              InputLabelProps: {\n                shrink: true\n              },\n              variant: \"outlined\",\n              value: periodCount,\n              onChange: e => setPeriodCount(parseInt(e.target.value)),\n              InputProps: {\n                inputProps: {\n                  min: 1\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Number of vesting periods\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        color: \"primary\",\n        disabled: !submitBtnEnabled || isLoading,\n        onClick: () => createVestingClickHandler(),\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(NewVestingDialog, \"Km4+U7H9DBu8oclIdkSZws7zP4Q=\", false, function () {\n  return [useSelector, useWallet, useSnackbar, useDispatch];\n});\n\n_c2 = NewVestingDialog;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NewVestingButton\");\n$RefreshReg$(_c2, \"NewVestingDialog\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/components/lockups/NewVesting.tsx"],"names":["React","useState","useDispatch","useSelector","useSnackbar","BN","Account","PublicKey","SystemProgram","SYSVAR_RENT_PUBKEY","SYSVAR_CLOCK_PUBKEY","TokenInstructions","createTokenAccountInstrs","TextField","Button","FormControl","InputLabel","Select","FormHelperText","MenuItem","Typography","CircularProgress","DialogContent","Dialog","DialogTitle","DialogActions","ActionType","useWallet","OwnedTokenAccountsSelect","fromDisplay","vestingSigner","ViewTransactionOnExplorerButton","NewVestingButton","open","setOpen","NewVestingDialog","props","onClose","network","accounts","state","common","defaultStartDate","Date","toString","defaultStartTs","getTime","defaultEndDate","defaultEndTs","beneficiary","setBeneficiary","isValidBeneficiary","_","displayBeneficiaryError","fromAccount","setFromAccount","startTimestamp","setStartTimestamp","timestamp","setTimestamp","periodCount","setPeriodCount","displayAmount","setDisplayAmount","lockupClient","isLoading","setIsLoading","mint","setMint","enqueueSnackbar","dispatch","submitBtnEnabled","createVestingClickHandler","beneficiaryPublicKey","beneficiaryAccount","provider","connection","getAccountInfo","variant","owner","equals","programId","mintAccount","amount","decimals","vesting","vestingVault","_vestingSigner","publicKey","tx","rpc","createVesting","nonce","vault","depositor","depositorAuthority","wallet","tokenProgram","TOKEN_PROGRAM_ID","rent","clock","signers","instructions","account","createInstruction","vestingAccount","type","LockupCreateVesting","item","action","err","width","marginLeft","marginRight","marginBottom","display","e","target","value","Object","keys","mints","map","m","toUpperCase","flex","f","marginTop","color","inputProps","min","parseFloat","shrink","d","parseInt"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport BN from 'bn.js';\nimport {\n  Account,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { createTokenAccountInstrs } from '@project-serum/common';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { State as StoreState } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { fromDisplay } from '../../utils/tokens';\nimport { vestingSigner } from '../../utils/lockup';\nimport { ViewTransactionOnExplorerButton } from '../common/Notification';\n\nexport default function NewVestingButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <div onClick={() => setOpen(true)}>\n        <Button variant=\"contained\" color=\"secondary\">\n          New\n        </Button>\n      </div>\n      <NewVestingDialog open={open} onClose={() => setOpen(false)} />\n    </>\n  );\n}\n\ntype NewVestingDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction NewVestingDialog(props: NewVestingDialogProps) {\n  const { open, onClose } = props;\n  const { network, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      accounts: state.accounts,\n    };\n  });\n\n  const defaultStartDate = new Date().toString();\n  const defaultStartTs = new Date(defaultStartDate).getTime() / 1000;\n  const defaultEndDate = '2027-01-01T12:00';\n  const defaultEndTs = new Date(defaultEndDate).getTime() / 1000;\n\n  const [beneficiary, setBeneficiary] = useState('');\n  const isValidBeneficiary = (() => {\n    try {\n      new PublicKey(beneficiary);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  })();\n  const displayBeneficiaryError = !isValidBeneficiary && beneficiary !== '';\n\n  const [fromAccount, setFromAccount] = useState<null | PublicKey>(null);\n  const [startTimestamp, setStartTimestamp] = useState(defaultStartTs);\n  const [timestamp, setTimestamp] = useState(defaultEndTs);\n  const [periodCount, setPeriodCount] = useState(7);\n  const [displayAmount, setDisplayAmount] = useState<null | number>(null);\n  const { lockupClient } = useWallet();\n  const [isLoading, setIsLoading] = useState(false);\n  const [mint, setMint] = useState<null | PublicKey>(null);\n\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const submitBtnEnabled =\n    mint !== null &&\n    fromAccount !== null &&\n    isValidBeneficiary &&\n    displayAmount !== null;\n\n  const createVestingClickHandler = async () => {\n    setIsLoading(true);\n    try {\n      const beneficiaryPublicKey = new PublicKey(beneficiary);\n      const beneficiaryAccount = await lockupClient.provider.connection.getAccountInfo(\n        beneficiaryPublicKey,\n      );\n      if (beneficiaryAccount === null) {\n        enqueueSnackbar('Unable to validate given beneficiary.', {\n          variant: 'error',\n        });\n        setIsLoading(false);\n        return;\n      }\n      if (!beneficiaryAccount.owner.equals(SystemProgram.programId)) {\n        enqueueSnackbar(\n          'The beneficiary must be owned by the System Program.',\n          {\n            variant: 'error',\n          },\n        );\n        setIsLoading(false);\n        return;\n      }\n\n      enqueueSnackbar('Creating vesting acount...', {\n        variant: 'info',\n      });\n\n      const mintAccount = accounts[mint!.toString()];\n      let amount = mintAccount\n        ? fromDisplay(displayAmount!, mintAccount.decimals)\n        : new BN(displayAmount!);\n\n      const vesting = new Account();\n      const vestingVault = new Account();\n      const _vestingSigner = await vestingSigner(\n        lockupClient.programId,\n        vesting.publicKey,\n      );\n\n      let tx = await lockupClient.rpc.createVesting(\n        beneficiaryPublicKey,\n        amount,\n        _vestingSigner.nonce,\n        new BN(startTimestamp),\n        new BN(timestamp),\n        new BN(periodCount),\n        null,\n        {\n          accounts: {\n            vesting: vesting.publicKey,\n            vault: vestingVault.publicKey,\n            depositor: fromAccount,\n            depositorAuthority: lockupClient.provider.wallet.publicKey,\n            tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n            rent: SYSVAR_RENT_PUBKEY,\n            clock: SYSVAR_CLOCK_PUBKEY,\n          },\n          signers: [vesting, vestingVault],\n          instructions: [\n            await lockupClient.account.vesting.createInstruction(vesting),\n            ...(await createTokenAccountInstrs(\n              lockupClient.provider,\n              vestingVault.publicKey,\n              mint!,\n              _vestingSigner.publicKey,\n            )),\n          ],\n        },\n      );\n      // Only add to the local store if the lockup belongs to the current user.\n      if (beneficiaryPublicKey.equals(lockupClient.provider.wallet.publicKey)) {\n        const vestingAccount = await lockupClient.account.vesting(\n          vesting.publicKey,\n        );\n        dispatch({\n          type: ActionType.LockupCreateVesting,\n          item: {\n            vesting: {\n              publicKey: vesting.publicKey,\n              account: vestingAccount,\n            },\n          },\n        });\n      }\n      enqueueSnackbar(`Vesting account created`, {\n        variant: 'success',\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      onClose();\n    } catch (err) {\n      enqueueSnackbar(`Error creating vesting account: ${err.toString()}`, {\n        variant: 'error',\n      });\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} fullWidth maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Vesting Account\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <div>\n          {isLoading && (\n            <div\n              style={{\n                width: '40px',\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                marginBottom: '24px',\n              }}\n            >\n              <CircularProgress\n                style={{ marginLeft: 'auto', marginRight: 'auto' }}\n              />\n            </div>\n          )}\n          <div style={{ display: 'flex', width: '100%' }}>\n            <div>\n              <FormControl variant=\"outlined\" style={{ width: '200px' }}>\n                <InputLabel>Mint</InputLabel>\n                <Select\n                  value={mint ? mint!.toString() : ''}\n                  onChange={e =>\n                    setMint(new PublicKey(e.target.value as string))\n                  }\n                >\n                  {Object.keys(network.mints).map(m => (\n                    <MenuItem value={network.mints[m].toString()}>\n                      {m.toUpperCase()}\n                    </MenuItem>\n                  ))}\n                  {/*<MenuItem value=\"custom\">Custom</MenuItem>*/}\n                </Select>\n              </FormControl>\n            </div>\n            {false && (\n              <div style={{ flex: 1, marginLeft: '10px' }}>\n                <TextField\n                  fullWidth\n                  label=\"Custom mint\"\n                  value={mint ? mint!.toString() : ''}\n                  onChange={e => setMint(new PublicKey(e.target.value))}\n                />\n                <FormHelperText>Mint of the token to lockup</FormHelperText>\n              </div>\n            )}\n          </div>\n          <div>\n            <div style={{ display: 'flex', width: '100%' }}>\n              <div style={{ flex: 1 }}>\n                <FormControl fullWidth>\n                  <InputLabel>From</InputLabel>\n                  <OwnedTokenAccountsSelect\n                    mint={mint}\n                    onChange={(f: PublicKey) => setFromAccount(f)}\n                  />\n                  <FormHelperText>Token account to send from</FormHelperText>\n                </FormControl>\n              </div>\n            </div>\n          </div>\n          <div style={{ marginTop: '24px' }}>\n            <TextField\n              fullWidth\n              error={displayBeneficiaryError}\n              helperText={displayBeneficiaryError && 'Invalid beneficiary'}\n              label=\"Beneficiary\"\n              value={beneficiary}\n              onChange={e => setBeneficiary(e.target.value)}\n            />\n            <FormHelperText>Owner of the new vesting account</FormHelperText>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n            }}\n          >\n            {false && (\n              <FormHelperText style={{ color: 'blue' }}>\n                Note: Amounts for custom mints (i.e., not SRM/MSRM) are in their\n                raw, non-decimal form. Make sure to convert before entering into\n                the fields here. For example, if a token has 6 decimals, then\n                multiply your desired amount by 10^6.\n              </FormHelperText>\n            )}\n            <TextField\n              fullWidth\n              label=\"Amount\"\n              type=\"number\"\n              value={displayAmount}\n              InputProps={{ inputProps: { min: 0 } }}\n              onChange={e => setDisplayAmount(parseFloat(e.target.value))}\n            />\n            <FormHelperText>\n              Amount to deposit into the vesting account\n            </FormHelperText>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n              display: 'flex',\n            }}\n          >\n            <div style={{ flex: 1, marginRight: '10px' }}>\n              <TextField\n                fullWidth\n                label=\"Start date\"\n                type=\"datetime-local\"\n                defaultValue={defaultStartDate}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setStartTimestamp(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>Date when vesting begins</FormHelperText>\n            </div>\n            <div>\n              <TextField\n                disabled\n                fullWidth\n                label=\"Unix Timestamp\"\n                value={startTimestamp}\n              />\n            </div>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n              display: 'flex',\n            }}\n          >\n            <div style={{ flex: 1, marginRight: '10px' }}>\n              <TextField\n                fullWidth\n                label=\"End date\"\n                type=\"datetime-local\"\n                defaultValue={defaultEndDate}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setTimestamp(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>Date when all tokens are vested</FormHelperText>\n            </div>\n            <div>\n              <TextField\n                disabled\n                fullWidth\n                label=\"Unix Timestamp\"\n                value={timestamp}\n              />\n            </div>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n            }}\n          >\n            <FormControl fullWidth>\n              <TextField\n                id=\"outlined-number\"\n                label=\"Period Count\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                value={periodCount}\n                onChange={e =>\n                  setPeriodCount(parseInt(e.target.value) as number)\n                }\n                InputProps={{ inputProps: { min: 1 } }}\n              />\n              <FormHelperText>Number of vesting periods</FormHelperText>\n            </FormControl>\n          </div>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          disabled={!submitBtnEnabled || isLoading}\n          onClick={() => createVestingClickHandler()}\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}