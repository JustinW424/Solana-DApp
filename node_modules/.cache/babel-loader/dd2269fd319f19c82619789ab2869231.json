{"ast":null,"code":"import { SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { simulateTransaction } from '@project-serum/common';\nexport async function vestingSigner(programId, vesting) {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress([vesting.toBuffer()], programId);\n  return {\n    publicKey,\n    nonce\n  };\n} // Simulates the `availableForWithdrawal` instruction to funnel out a the\n// emitted log data (as a hack to get a return value).\n\nexport async function availableForWithdrawal(lockupClient, vesting) {\n  let tx = lockupClient.transaction.availableForWithdrawal({\n    accounts: {\n      vesting,\n      clock: SYSVAR_CLOCK_PUBKEY\n    }\n  });\n  tx.setSigners(...[lockupClient.provider.wallet.publicKey]);\n  let resp = await simulateTransaction(lockupClient.provider.connection, tx, 'recent');\n\n  if (resp.value.err) {\n    throw new Error(`RPC error: ${resp.value.err.toString()}`);\n  }\n\n  let log = resp.value.logs[1].slice('Program log: '.length);\n  return new anchor.BN(JSON.parse(log).result);\n}","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/utils/lockup.ts"],"names":["SYSVAR_CLOCK_PUBKEY","anchor","simulateTransaction","vestingSigner","programId","vesting","publicKey","nonce","web3","PublicKey","findProgramAddress","toBuffer","availableForWithdrawal","lockupClient","tx","transaction","accounts","clock","setSigners","provider","wallet","resp","connection","value","err","Error","toString","log","logs","slice","length","BN","JSON","parse","result"],"mappings":"AAAA,SAAoBA,mBAApB,QAA+C,iBAA/C;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,OAAO,eAAeC,aAAf,CACLC,SADK,EAELC,OAFK,EAG6C;AAClD,QAAM,CAACC,SAAD,EAAYC,KAAZ,IAAqB,MAAMN,MAAM,CAACO,IAAP,CAAYC,SAAZ,CAAsBC,kBAAtB,CAC/B,CAACL,OAAO,CAACM,QAAR,EAAD,CAD+B,EAE/BP,SAF+B,CAAjC;AAIA,SAAO;AACLE,IAAAA,SADK;AAELC,IAAAA;AAFK,GAAP;AAID,C,CAED;AACA;;AACA,OAAO,eAAeK,sBAAf,CACLC,YADK,EAELR,OAFK,EAGe;AACpB,MAAIS,EAAE,GAAGD,YAAY,CAACE,WAAb,CAAyBH,sBAAzB,CAAgD;AACvDI,IAAAA,QAAQ,EAAE;AACRX,MAAAA,OADQ;AAERY,MAAAA,KAAK,EAAEjB;AAFC;AAD6C,GAAhD,CAAT;AAMAc,EAAAA,EAAE,CAACI,UAAH,CAAc,GAAG,CAACL,YAAY,CAACM,QAAb,CAAsBC,MAAtB,CAA6Bd,SAA9B,CAAjB;AACA,MAAIe,IAAI,GAAG,MAAMnB,mBAAmB,CAClCW,YAAY,CAACM,QAAb,CAAsBG,UADY,EAElCR,EAFkC,EAGlC,QAHkC,CAApC;;AAKA,MAAIO,IAAI,CAACE,KAAL,CAAWC,GAAf,EAAoB;AAClB,UAAM,IAAIC,KAAJ,CAAW,cAAaJ,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAeE,QAAf,EAA0B,EAAlD,CAAN;AACD;;AACD,MAAIC,GAAG,GAAGN,IAAI,CAACE,KAAL,CAAWK,IAAX,CAAiB,CAAjB,EAAoBC,KAApB,CAA0B,gBAAgBC,MAA1C,CAAV;AACA,SAAO,IAAI7B,MAAM,CAAC8B,EAAX,CAAcC,IAAI,CAACC,KAAL,CAAWN,GAAX,EAAgBO,MAA9B,CAAP;AACD","sourcesContent":["import { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { simulateTransaction } from '@project-serum/common';\n\nexport async function vestingSigner(\n  programId: PublicKey,\n  vesting: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [vesting.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\n// Simulates the `availableForWithdrawal` instruction to funnel out a the\n// emitted log data (as a hack to get a return value).\nexport async function availableForWithdrawal(\n  lockupClient: anchor.Program,\n  vesting: PublicKey,\n): Promise<anchor.BN> {\n  let tx = lockupClient.transaction.availableForWithdrawal({\n    accounts: {\n      vesting,\n      clock: SYSVAR_CLOCK_PUBKEY,\n    },\n  });\n  tx.setSigners(...[lockupClient.provider.wallet.publicKey]);\n  let resp = await simulateTransaction(\n    lockupClient.provider.connection,\n    tx,\n    'recent',\n  );\n  if (resp.value.err) {\n    throw new Error(`RPC error: ${resp.value.err.toString()}`);\n  }\n  let log = resp.value.logs![1].slice('Program log: '.length);\n  return new anchor.BN(JSON.parse(log).result);\n}\n"]},"metadata":{},"sourceType":"module"}