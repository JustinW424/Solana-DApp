{"ast":null,"code":"import camelCase from \"camelcase\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nlet _populatedWorkspace = false; // Workspace program discovery only works for node environments.\n\nexport default new Proxy({}, {\n  get(workspaceCache, programName) {\n    const find = require(\"find\");\n\n    const fs = require(\"fs\");\n\n    const process = require(\"process\");\n\n    if (typeof window !== \"undefined\") {\n      // Workspaces aren't available in the browser, yet.\n      return undefined;\n    }\n\n    if (!_populatedWorkspace) {\n      const path = require(\"path\");\n\n      let projectRoot = process.cwd();\n\n      while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n        const parentDir = path.dirname(projectRoot);\n\n        if (parentDir === projectRoot) {\n          projectRoot = undefined;\n        }\n\n        projectRoot = parentDir;\n      }\n\n      if (projectRoot === undefined) {\n        throw new Error(\"Could not find workspace root. Perhaps set the `OASIS_WORKSPACE` env var?\");\n      }\n\n      find.fileSync(/target\\/idl\\/.*\\.json/, projectRoot).reduce((programs, path) => {\n        const idlStr = fs.readFileSync(path);\n        const idl = JSON.parse(idlStr);\n        const name = camelCase(idl.name, {\n          pascalCase: true\n        });\n        programs[name] = new Program(idl, new PublicKey(idl.metadata.address));\n        return programs;\n      }, workspaceCache);\n      _populatedWorkspace = true;\n    }\n\n    return workspaceCache[programName];\n  }\n\n});","map":{"version":3,"sources":["../../src/workspace.ts"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,WAAtB;AACA,SAAS,SAAT,QAA0B,iBAA1B;AACA,SAAS,OAAT,QAAwB,WAAxB;AAEA,IAAI,mBAAmB,GAAG,KAA1B,C,CAEA;;AACA,eAAe,IAAI,KAAJ,CAAU,EAAV,EAAqB;AAClC,EAAA,GAAG,CAAC,cAAD,EAA6C,WAA7C,EAAgE;AACjE,UAAM,IAAI,GAAG,OAAO,CAAC,MAAD,CAApB;;AACA,UAAM,EAAE,GAAG,OAAO,CAAC,IAAD,CAAlB;;AACA,UAAM,OAAO,GAAG,OAAO,CAAC,SAAD,CAAvB;;AAEA,QAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACA,aAAO,SAAP;AACD;;AAED,QAAI,CAAC,mBAAL,EAA0B;AACxB,YAAM,IAAI,GAAG,OAAO,CAAC,MAAD,CAApB;;AAEA,UAAI,WAAW,GAAG,OAAO,CAAC,GAAR,EAAlB;;AACA,aAAO,CAAC,EAAE,CAAC,UAAH,CAAc,IAAI,CAAC,IAAL,CAAU,WAAV,EAAuB,aAAvB,CAAd,CAAR,EAA8D;AAC5D,cAAM,SAAS,GAAG,IAAI,CAAC,OAAL,CAAa,WAAb,CAAlB;;AACA,YAAI,SAAS,KAAK,WAAlB,EAA+B;AAC7B,UAAA,WAAW,GAAG,SAAd;AACD;;AACD,QAAA,WAAW,GAAG,SAAd;AACD;;AAED,UAAI,WAAW,KAAK,SAApB,EAA+B;AAC7B,cAAM,IAAI,KAAJ,CACJ,2EADI,CAAN;AAGD;;AAED,MAAA,IAAI,CACD,QADH,CACY,uBADZ,EACqC,WADrC,EAEG,MAFH,CAEU,CAAC,QAAD,EAAgB,IAAhB,KAAgC;AACtC,cAAM,MAAM,GAAG,EAAE,CAAC,YAAH,CAAgB,IAAhB,CAAf;AACA,cAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,MAAX,CAAZ;AACA,cAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,IAAL,EAAW;AAAE,UAAA,UAAU,EAAE;AAAd,SAAX,CAAtB;AACA,QAAA,QAAQ,CAAC,IAAD,CAAR,GAAiB,IAAI,OAAJ,CACf,GADe,EAEf,IAAI,SAAJ,CAAc,GAAG,CAAC,QAAJ,CAAa,OAA3B,CAFe,CAAjB;AAIA,eAAO,QAAP;AACD,OAXH,EAWK,cAXL;AAaA,MAAA,mBAAmB,GAAG,IAAtB;AACD;;AAED,WAAO,cAAc,CAAC,WAAD,CAArB;AACD;;AA9CiC,CAArB,CAAf","sourceRoot":"","sourcesContent":["import camelCase from \"camelcase\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nlet _populatedWorkspace = false;\n// Workspace program discovery only works for node environments.\nexport default new Proxy({}, {\n    get(workspaceCache, programName) {\n        const find = require(\"find\");\n        const fs = require(\"fs\");\n        const process = require(\"process\");\n        if (typeof window !== \"undefined\") {\n            // Workspaces aren't available in the browser, yet.\n            return undefined;\n        }\n        if (!_populatedWorkspace) {\n            const path = require(\"path\");\n            let projectRoot = process.cwd();\n            while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n                const parentDir = path.dirname(projectRoot);\n                if (parentDir === projectRoot) {\n                    projectRoot = undefined;\n                }\n                projectRoot = parentDir;\n            }\n            if (projectRoot === undefined) {\n                throw new Error(\"Could not find workspace root. Perhaps set the `OASIS_WORKSPACE` env var?\");\n            }\n            find\n                .fileSync(/target\\/idl\\/.*\\.json/, projectRoot)\n                .reduce((programs, path) => {\n                const idlStr = fs.readFileSync(path);\n                const idl = JSON.parse(idlStr);\n                const name = camelCase(idl.name, { pascalCase: true });\n                programs[name] = new Program(idl, new PublicKey(idl.metadata.address));\n                return programs;\n            }, workspaceCache);\n            _populatedWorkspace = true;\n        }\n        return workspaceCache[programName];\n    },\n});\n//# sourceMappingURL=workspace.js.map"]},"metadata":{},"sourceType":"module"}