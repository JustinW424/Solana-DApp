{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\components\\\\rewards\\\\RewardsList.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LockIcon from '@material-ui/icons/Lock';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { toDisplay } from '../../utils/tokens';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RewardsList(props) {\n  const {\n    rewards\n  } = props;\n  let loading = false;\n  rewards.forEach(r => {\n    if (r === null) {\n      loading = true;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(List, {\n    children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n      style: {\n        display: 'block',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : rewards.length > 0 ? rewards.filter(r => r.vendor.account.expired === false).map(r => {\n      return /*#__PURE__*/_jsxDEV(RewardListItem, {\n        rli: r\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 20\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(ListItem, {\n      children: /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: 'No rewards found'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_c = RewardsList;\n\nfunction RewardListItem(props) {\n  _s();\n\n  const {\n    rli\n  } = props;\n  const [open, setOpen] = useState(false);\n  const dateLabel = new Date(rli.vendor.account.startTs.toNumber() * 1000).toLocaleString();\n  let fromLabel = `Dropped by ${rli.vendor.account.from.toString()} | ${dateLabel}`;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListItem, {\n      button: true,\n      onClick: () => setOpen(open => !open),\n      children: [/*#__PURE__*/_jsxDEV(LockIcon, {\n        style: {\n          visibility: rli.reward.locked ? 'visible' : 'hidden',\n          marginRight: '16px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            color: rli.needsClaim ? '#54a15e' : ''\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: `${toDisplay(rli.vendor.account.total, rli.mint.account.decimals)} ${rli.mint.publicKey}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this),\n        secondary: fromLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), open ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      in: open,\n      timeout: \"auto\",\n      unmountOnExit: true,\n      children: rli.vendor === undefined ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(RewardListItemDetails, {\n        vendor: rli.vendor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(RewardListItem, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c2 = RewardListItem;\n\nfunction RewardListItemDetails(props) {\n  _s2();\n\n  let {\n    vendor\n  } = props;\n  const {\n    registryClient\n  } = useWallet();\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const {\n    vendorMint,\n    registrar\n  } = useSelector(state => {\n    return {\n      registrar: state.registry.registrar,\n      vendorMint: state.accounts[vendor.account.mint.toString()]\n    };\n  });\n  const [expiryReceiverToken, setExpiryReceiverToken] = useState(null);\n\n  const expire = async () => {\n    enqueueSnackbar('Expiring reward', {\n      variant: 'info'\n    });\n    const vendorSigner = await PublicKey.createProgramAddress([registrar.toBuffer(), vendor.publicKey.toBuffer(), Buffer.from([vendor.account.nonce])], registryClient.programId);\n    const tx = await registryClient.rpc.expireReward({\n      accounts: {\n        registrar,\n        vendor: vendor.publicKey,\n        vault: vendor.account.vault,\n        vendorSigner,\n        expiryReceiver: vendor.account.expiryReceiver,\n        expiryReceiverToken,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        clock: SYSVAR_CLOCK_PUBKEY\n      }\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Reward expired`, {\n      variant: 'success',\n      action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n        signature: tx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 15\n      }, this)\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginLeft: '56px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Vendor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Address \", vendor.publicKey.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Vault: \", vendor.account.vault.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Mint: \", vendor.account.mint.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Pool token supply snapshot:\", ' ', vendor.account.poolTokenSupply.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Expiry:\", ' ', new Date(vendor.account.expiryTs.toNumber() * 1000).toLocaleDateString(), ` (${vendor.account.expiryTs.toNumber()})`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Expiry receiver: \", vendor.account.expiryReceiver.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Expired: \", vendor.account.expired.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Reward queue cursor: \", vendor.account.rewardEventQCursor.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), vendor.account.expiryTs.toNumber() <= Date.now() / 1000 && registryClient.provider.wallet.publicKey.equals(vendor.account.expiryReceiver) && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row-reverse'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"outlined\",\n        onClick: expire,\n        style: {\n          marginRight: '24px'\n        },\n        children: \"Expire\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          marginRight: '24px'\n        },\n        children: /*#__PURE__*/_jsxDEV(OwnedTokenAccountsSelect, {\n          variant: \"outlined\",\n          decimals: vendorMint.decimals,\n          mint: vendor.account.mint,\n          onChange: f => {\n            setExpiryReceiverToken(f);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(RewardListItemDetails, \"yaddDiOjJfZNkeGHMbYC5/oW2lw=\", false, function () {\n  return [useWallet, useSnackbar, useSelector];\n});\n\n_c3 = RewardListItemDetails;\nexport class RewardListItemViewModel {\n  constructor(reward, cursor, needsClaim, mint, vendor) {\n    this.reward = reward;\n    this.cursor = cursor;\n    this.needsClaim = needsClaim;\n    this.mint = mint;\n    this.vendor = vendor;\n  }\n\n  static fromMessage(ctx, event) {\n    let needsClaim = false;\n    const vendor = ctx.accounts[event.vendor.toString()];\n\n    if (vendor === undefined) {\n      return null;\n    }\n\n    const mint = {\n      publicKey: vendor.mint,\n      account: ctx.accounts[vendor.mint.toString()]\n    };\n\n    if (ctx.member !== undefined) {\n      // Must own shares of the reward's target pool.\n      const sptAccount = ctx.accounts[ctx.member.account.balances.spt.toString()];\n      const lockedSptAccount = ctx.accounts[ctx.member.account.balancesLocked.spt.toString()];\n      const ownsPoolShares = sptAccount.amount + lockedSptAccount.amount > 0; // Must not have claimed the reward yet.\n\n      const notYetClaimed = vendor.rewardEventQCursor >= ctx.member.account.rewardsCursor; // Must have staked before the reward was dropped.\n\n      const isEligible = ctx.member.account.lastStakeTs < vendor.startTs; // Must not have let the reward expire.\n\n      const expired = vendor.expired;\n      needsClaim = ownsPoolShares && notYetClaimed && isEligible && !expired;\n    }\n\n    const vendorProgramAccount = {\n      publicKey: event.vendor,\n      account: vendor\n    };\n    return new RewardListItemViewModel(event, vendor.rewardEventQCursor, needsClaim, mint, vendorProgramAccount);\n  }\n\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"RewardsList\");\n$RefreshReg$(_c2, \"RewardListItem\");\n$RefreshReg$(_c3, \"RewardListItemDetails\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/components/rewards/RewardsList.tsx"],"names":["React","useState","useSelector","useSnackbar","CircularProgress","LockIcon","List","ListItem","ListItemText","Collapse","ExpandLess","ExpandMore","Button","PublicKey","SYSVAR_CLOCK_PUBKEY","TokenInstructions","OwnedTokenAccountsSelect","useWallet","toDisplay","ViewTransactionOnExplorerButton","RewardsList","props","rewards","loading","forEach","r","display","marginLeft","marginRight","length","filter","vendor","account","expired","map","RewardListItem","rli","open","setOpen","dateLabel","Date","startTs","toNumber","toLocaleString","fromLabel","from","toString","visibility","reward","locked","justifyContent","color","needsClaim","total","mint","decimals","publicKey","undefined","RewardListItemDetails","registryClient","enqueueSnackbar","closeSnackbar","vendorMint","registrar","state","registry","accounts","expiryReceiverToken","setExpiryReceiverToken","expire","variant","vendorSigner","createProgramAddress","toBuffer","Buffer","nonce","programId","tx","rpc","expireReward","vault","expiryReceiver","tokenProgram","TOKEN_PROGRAM_ID","clock","action","poolTokenSupply","expiryTs","toLocaleDateString","rewardEventQCursor","now","provider","wallet","equals","flexDirection","flex","f","RewardListItemViewModel","constructor","cursor","fromMessage","ctx","event","member","sptAccount","balances","spt","lockedSptAccount","balancesLocked","ownsPoolShares","amount","notYetClaimed","rewardsCursor","isEligible","lastStakeTs","vendorProgramAccount"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LockIcon from '@material-ui/icons/Lock';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { toDisplay } from '../../utils/tokens';\nimport { ProgramAccount } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport { State as StoreState } from '../../store/reducer';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\n\ntype RewardsListProps = {\n  rewards: (RewardListItemViewModel | null)[];\n};\n\nexport default function RewardsList(props: RewardsListProps) {\n  const { rewards } = props;\n  let loading = false;\n  rewards.forEach(r => {\n    if (r === null) {\n      loading = true;\n    }\n  });\n  return (\n    <List>\n      {loading ? (\n        <CircularProgress\n          style={{\n            display: 'block',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n          }}\n        />\n      ) : rewards.length > 0 ? (\n        rewards\n          .filter(r => r!.vendor.account.expired === false)\n          .map(r => {\n            return <RewardListItem rli={r as RewardListItemViewModel} />;\n          })\n      ) : (\n        <ListItem>\n          <ListItemText primary={'No rewards found'} />\n        </ListItem>\n      )}\n    </List>\n  );\n}\n\ntype RewardListItemProps = {\n  rli: RewardListItemViewModel;\n};\n\nfunction RewardListItem(props: RewardListItemProps) {\n  const { rli } = props;\n\n  const [open, setOpen] = useState(false);\n\n  const dateLabel = new Date(\n    rli.vendor!.account.startTs.toNumber() * 1000,\n  ).toLocaleString();\n  let fromLabel = `Dropped by ${rli.vendor.account.from.toString()} | ${dateLabel}`;\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <LockIcon\n          style={{\n            visibility: rli.reward.locked ? 'visible' : 'hidden',\n            marginRight: '16px',\n          }}\n        />\n        <ListItemText\n          primary={\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                color: rli.needsClaim ? '#54a15e' : '',\n              }}\n            >\n              <div>{`${toDisplay(\n                rli.vendor.account.total,\n                rli.mint!.account.decimals,\n              )} ${rli.mint!.publicKey}`}</div>\n            </div>\n          }\n          secondary={fromLabel}\n        />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        {rli.vendor === undefined ? (\n          <CircularProgress />\n        ) : (\n          <RewardListItemDetails vendor={rli.vendor!} />\n        )}\n      </Collapse>\n    </>\n  );\n}\n\ntype RewardListItemDetailsProps = {\n  vendor: ProgramAccount;\n};\n\nfunction RewardListItemDetails(props: RewardListItemDetailsProps) {\n  let { vendor } = props;\n  const { registryClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { vendorMint, registrar } = useSelector((state: StoreState) => {\n    return {\n      registrar: state.registry.registrar,\n      vendorMint: state.accounts[vendor.account.mint.toString()],\n    };\n  });\n  const [\n    expiryReceiverToken,\n    setExpiryReceiverToken,\n  ] = useState<null | PublicKey>(null);\n  const expire = async () => {\n    enqueueSnackbar('Expiring reward', {\n      variant: 'info',\n    });\n    const vendorSigner = await PublicKey.createProgramAddress(\n      [\n        registrar.toBuffer(),\n        vendor.publicKey.toBuffer(),\n        Buffer.from([vendor.account.nonce]),\n      ],\n      registryClient.programId,\n    );\n\n    const tx = await registryClient.rpc.expireReward({\n      accounts: {\n        registrar,\n        vendor: vendor.publicKey,\n        vault: vendor.account.vault,\n        vendorSigner,\n        expiryReceiver: vendor.account.expiryReceiver,\n        expiryReceiverToken,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        clock: SYSVAR_CLOCK_PUBKEY,\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Reward expired`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n    });\n  };\n  return (\n    <div\n      style={{\n        marginLeft: '56px',\n      }}\n    >\n      <div>Vendor</div>\n      <ul>\n        <li>Address {vendor.publicKey.toString()}</li>\n        <li>Vault: {vendor.account.vault.toString()}</li>\n        <li>Mint: {vendor.account.mint.toString()}</li>\n        <li>\n          Pool token supply snapshot:{' '}\n          {vendor.account.poolTokenSupply.toString()}\n        </li>\n        <li>\n          Expiry:{' '}\n          {new Date(\n            vendor.account.expiryTs.toNumber() * 1000,\n          ).toLocaleDateString()}\n          {` (${vendor.account.expiryTs.toNumber()})`}\n        </li>\n        <li>Expiry receiver: {vendor.account.expiryReceiver.toString()}</li>\n        <li>Expired: {vendor.account.expired.toString()}</li>\n        <li>\n          Reward queue cursor: {vendor.account.rewardEventQCursor.toString()}\n        </li>\n      </ul>\n      {(vendor.account.expiryTs.toNumber() <= Date.now()/1000) && registryClient.provider.wallet.publicKey.equals(vendor.account.expiryReceiver) && (\n        <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>\n          <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={expire}\n            style={{ marginRight: '24px' }}\n          >\n            Expire\n          </Button>\n          <div style={{ flex: 1, marginRight: '24px' }}>\n            <OwnedTokenAccountsSelect\n              variant=\"outlined\"\n              decimals={vendorMint.decimals}\n              mint={vendor.account.mint}\n              onChange={(f: PublicKey) => {\n                setExpiryReceiverToken(f);\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport class RewardListItemViewModel {\n  constructor(\n    readonly reward: any,\n    readonly cursor: number,\n    readonly needsClaim: boolean,\n    readonly mint: ProgramAccount,\n    readonly vendor: ProgramAccount,\n  ) {}\n\n  static fromMessage(ctx: Context, event: any): RewardListItemViewModel | null {\n    let needsClaim = false;\n\n    const vendor = ctx.accounts[event.vendor.toString()];\n\n    if (vendor === undefined) {\n      return null;\n    }\n\n    const mint = {\n      publicKey: vendor.mint,\n      account: ctx.accounts[vendor.mint.toString()],\n    };\n\n    if (ctx.member !== undefined) {\n      // Must own shares of the reward's target pool.\n      const sptAccount =\n        ctx.accounts[ctx.member.account.balances.spt.toString()];\n      const lockedSptAccount =\n        ctx.accounts[ctx.member.account.balancesLocked.spt.toString()];\n\n      const ownsPoolShares = sptAccount.amount + lockedSptAccount.amount > 0;\n\n      // Must not have claimed the reward yet.\n      const notYetClaimed =\n        vendor.rewardEventQCursor >= ctx.member.account.rewardsCursor;\n\n      // Must have staked before the reward was dropped.\n      const isEligible = ctx.member.account.lastStakeTs < vendor.startTs;\n\n      // Must not have let the reward expire.\n      const expired = vendor.expired;\n\n      needsClaim = ownsPoolShares && notYetClaimed && isEligible && !expired;\n    }\n\n    const vendorProgramAccount = {\n      publicKey: event.vendor,\n      account: vendor,\n    };\n\n    return new RewardListItemViewModel(\n      event,\n      vendor.rewardEventQCursor,\n      needsClaim,\n      mint,\n      vendorProgramAccount,\n    );\n  }\n}\n\ntype Context = {\n  accounts: any;\n  rewardEventQueue: ProgramAccount;\n  member?: ProgramAccount;\n  network: Network;\n};\n"]},"metadata":{},"sourceType":"module"}