{"ast":null,"code":"var _jsxFileName = \"F:\\\\jobs\\\\stake_in_solana\\\\source\\\\src\\\\components\\\\common\\\\WalletProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useMemo, useContext } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Connection } from \"@solana/web3.js\";\nimport { Provider } from \"@project-serum/common\";\nimport { Program } from \"@project-serum/anchor\";\nimport { WalletProvider as SolanaWalletProvider } from \"@solana/wallet-adapter-react\";\nimport { getPhantomWallet, getSolflareWallet, getSolletWallet } from \"@solana/wallet-adapter-wallets\";\nimport LockupIdl from \"../../idl/lockup\";\nimport RegistryIdl from \"../../idl/registry\";\nimport MultisigIdl from \"../../idl/multisig\";\nimport { useWallet as useSolana } from \"@solana/wallet-adapter-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function useWallet() {\n  _s();\n\n  const w = useContext(WalletContext);\n\n  if (!w) {\n    throw new Error(\"Missing wallet context\");\n  }\n\n  return w;\n}\n\n_s(useWallet, \"8nVS03HXMR3fv+nv4Anf3K+qwpk=\");\n\nconst WalletContext = /*#__PURE__*/React.createContext(null);\nexport default function WalletProvider(props) {\n  _s2();\n\n  const wallets = useMemo(() => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()], []);\n  return /*#__PURE__*/_jsxDEV(SolanaWalletProvider, {\n    wallets: wallets,\n    children: /*#__PURE__*/_jsxDEV(WalletProviderInner, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(WalletProvider, \"W9IgGN+f7P4ScyFu7AdMyjvnXHI=\");\n\n_c = WalletProvider;\n\nfunction WalletProviderInner(props) {\n  _s3();\n\n  const {\n    wallet: solWallet\n  } = useSolana();\n  const {\n    walletProvider,\n    network\n  } = useSelector(state => {\n    return {\n      walletProvider: state.common.walletProvider,\n      network: state.common.network\n    };\n  });\n  const {\n    wallet,\n    lockupClient,\n    registryClient,\n    multisigClient\n  } = useMemo(() => {\n    const opts = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\"\n    };\n    const connection = new Connection(network.url, opts.preflightCommitment);\n    const wallet = new Wallet(solWallet ? solWallet.adapter() : undefined); // @ts-ignore\n\n    const provider = new Provider(connection, wallet, opts);\n    const lockupClient = new Program(LockupIdl, network.lockupProgramId, provider);\n    const registryClient = new Program(RegistryIdl, network.registryProgramId, provider);\n    const multisigClient = new Program(MultisigIdl, network.multisigProgramId, provider);\n    return {\n      wallet,\n      lockupClient,\n      registryClient,\n      multisigClient\n    };\n  }, [solWallet, walletProvider, network]);\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: {\n      wallet,\n      lockupClient,\n      registryClient,\n      multisigClient\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(WalletProviderInner, \"dETEUmN9PsPDB13HKMu1CEQ50xo=\", false, function () {\n  return [useSolana, useSelector];\n});\n\n_c2 = WalletProviderInner;\n\nclass Wallet {\n  get publicKey() {\n    // @ts-ignore\n    return this.adapter ? this.adapter.publicKey : undefined;\n  }\n\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n\n  on(event, cb) {\n    if (this.adapter) {\n      return this.adapter.on(event, cb);\n    }\n  }\n\n  async connect() {\n    if (this.adapter) {\n      try {\n        await this.adapter.connect();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  disconnect() {\n    if (this.adapter) {\n      this.adapter.disconnect();\n    }\n  }\n\n  signTransaction(tx) {\n    if (this.adapter) {\n      return this.adapter.signTransaction(tx);\n    }\n  }\n\n  signAllTransactions(txs) {\n    if (this.adapter) {\n      return this.adapter.signAllTransactions(txs);\n    }\n  }\n\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WalletProvider\");\n$RefreshReg$(_c2, \"WalletProviderInner\");","map":{"version":3,"sources":["F:/jobs/stake_in_solana/source/src/components/common/WalletProvider.tsx"],"names":["React","useMemo","useContext","useSelector","Connection","Provider","Program","WalletProvider","SolanaWalletProvider","getPhantomWallet","getSolflareWallet","getSolletWallet","LockupIdl","RegistryIdl","MultisigIdl","useWallet","useSolana","w","WalletContext","Error","createContext","props","wallets","WalletProviderInner","wallet","solWallet","walletProvider","network","state","common","lockupClient","registryClient","multisigClient","opts","preflightCommitment","commitment","connection","url","Wallet","adapter","undefined","provider","lockupProgramId","registryProgramId","multisigProgramId","children","publicKey","constructor","on","event","cb","connect","err","console","error","disconnect","signTransaction","tx","signAllTransactions","txs"],"mappings":"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","sourcesContent":["import React, {\n  PropsWithChildren,\n  ReactElement,\n  ReactNode,\n  useMemo,\n  useContext,\n} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  PublicKey,\n  Transaction,\n  Connection,\n  ConfirmOptions,\n} from \"@solana/web3.js\";\nimport { Provider } from \"@project-serum/common\";\nimport { Program } from \"@project-serum/anchor\";\nimport { WalletProvider as SolanaWalletProvider } from \"@solana/wallet-adapter-react\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { State as StoreState } from \"../../store/reducer\";\nimport LockupIdl from \"../../idl/lockup\";\nimport RegistryIdl from \"../../idl/registry\";\nimport MultisigIdl from \"../../idl/multisig\";\nimport { useWallet as useSolana } from \"@solana/wallet-adapter-react\";\nimport { WalletAdapter } from \"@solana/wallet-adapter-base\";\n\nexport function useWallet(): WalletContextValues {\n  const w = useContext(WalletContext);\n  if (!w) {\n    throw new Error(\"Missing wallet context\");\n  }\n  return w;\n}\n\nconst WalletContext = React.createContext<null | WalletContextValues>(null);\n\ntype WalletContextValues = {\n  wallet: Wallet;\n  lockupClient: Program;\n  registryClient: Program;\n\tmultisigClient: Program;\n};\n\nexport default function WalletProvider(\n  props: PropsWithChildren<ReactNode>\n): ReactElement {\n  const wallets = useMemo(\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\n    []\n  );\n\n  return (\n    <SolanaWalletProvider wallets={wallets}>\n      <WalletProviderInner {...props} />\n    </SolanaWalletProvider>\n  );\n}\n\nfunction WalletProviderInner(props: PropsWithChildren<ReactNode>) {\n  const { wallet: solWallet } = useSolana();\n  const { walletProvider, network } = useSelector((state: StoreState) => {\n    return {\n      walletProvider: state.common.walletProvider,\n      network: state.common.network,\n    };\n  });\n  const { wallet, lockupClient, registryClient, multisigClient } =\n    useMemo(() => {\n      const opts: ConfirmOptions = {\n        preflightCommitment: \"recent\",\n        commitment: \"recent\",\n      };\n      const connection = new Connection(network.url, opts.preflightCommitment);\n      const wallet = new Wallet(solWallet ? solWallet.adapter() : undefined);\n      // @ts-ignore\n      const provider = new Provider(connection, wallet, opts);\n\n      const lockupClient = new Program(\n        LockupIdl,\n        network.lockupProgramId,\n        provider\n      );\n      const registryClient = new Program(\n        RegistryIdl,\n        network.registryProgramId,\n        provider\n      );\n      const multisigClient = new Program(\n        MultisigIdl,\n        network.multisigProgramId,\n        provider,\n      );\n      return {\n        wallet,\n        lockupClient,\n        registryClient,\n        multisigClient,\n      };\n    }, [solWallet, walletProvider, network]);\n\n  return (\n    <WalletContext.Provider\n      value={{ wallet, lockupClient, registryClient, multisigClient }}\n    >\n      {props.children}\n    </WalletContext.Provider>\n  );\n}\n\nclass Wallet {\n  get publicKey(): PublicKey | undefined {\n    // @ts-ignore\n    return this.adapter ? this.adapter.publicKey : undefined;\n  }\n\n  constructor(readonly adapter: WalletAdapter | undefined) {}\n\n  on(event: any, cb: any) {\n    if (this.adapter) {\n      return this.adapter.on(event, cb);\n    }\n  }\n\n  async connect() {\n    if (this.adapter) {\n      try {\n        await this.adapter.connect();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  disconnect() {\n    if (this.adapter) {\n      this.adapter.disconnect();\n    }\n  }\n\n  signTransaction(tx: Transaction) {\n    if (this.adapter) {\n      return this.adapter.signTransaction(tx);\n    }\n  }\n\n  signAllTransactions(txs: Transaction[]) {\n    if (this.adapter) {\n      return this.adapter.signAllTransactions(txs);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}