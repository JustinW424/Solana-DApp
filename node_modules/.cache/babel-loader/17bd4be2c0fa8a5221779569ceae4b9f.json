{"ast":null,"code":"import { Connection, Account, sendAndConfirmRawTransaction } from \"@solana/web3.js\";\nexport default class Provider {\n  constructor(connection, wallet, opts) {\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n  }\n\n  static defaultOptions() {\n    return {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\"\n    };\n  } // Node only api.\n\n\n  static local(url, opts) {\n    opts = opts || Provider.defaultOptions();\n    const connection = new Connection(url || \"http://localhost:8899\", opts.preflightCommitment);\n    const wallet = NodeWallet.local();\n    return new Provider(connection, wallet, opts);\n  } // Node only api.\n\n\n  static env() {\n    const process = require(\"process\");\n\n    const url = process.env.ANCHOR_PROVIDER_URL;\n\n    if (url === undefined) {\n      throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n    }\n\n    const options = Provider.defaultOptions();\n    const connection = new Connection(url, options.commitment);\n    const wallet = NodeWallet.local();\n    return new Provider(connection, wallet, options);\n  }\n\n  async send(tx, signers, opts) {\n    if (signers === undefined) {\n      signers = [];\n    }\n\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    const signerKps = signers.filter(s => s !== undefined);\n    const signerPubkeys = [this.wallet.publicKey].concat(signerKps.map(s => s.publicKey));\n    tx.setSigners(...signerPubkeys);\n    tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n    await this.wallet.signTransaction(tx);\n    signerKps.forEach(kp => {\n      tx.partialSign(kp);\n    });\n    const rawTx = tx.serialize();\n    const txId = await sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n    return txId;\n  }\n\n  async sendAll(reqs, opts) {\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n    let txs = reqs.map(r => {\n      let tx = r.tx;\n      let signers = r.signers;\n\n      if (signers === undefined) {\n        signers = [];\n      }\n\n      const signerKps = signers.filter(s => s !== undefined);\n      const signerPubkeys = [this.wallet.publicKey].concat(signerKps.map(s => s.publicKey));\n      tx.setSigners(...signerPubkeys);\n      tx.recentBlockhash = blockhash.blockhash;\n      signerKps.forEach(kp => {\n        tx.partialSign(kp);\n      });\n      return tx;\n    });\n    const signedTxs = await this.wallet.signAllTransactions(txs);\n    const sigs = [];\n\n    for (let k = 0; k < txs.length; k += 1) {\n      const tx = signedTxs[k];\n      const rawTx = tx.serialize();\n      sigs.push(await sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n    }\n\n    return sigs;\n  }\n\n}\nexport class NodeWallet {\n  constructor(payer) {\n    this.payer = payer;\n  }\n\n  static local() {\n    const payer = new Account(Buffer.from(JSON.parse(require(\"fs\").readFileSync(require(\"os\").homedir() + \"/.config/solana/id.json\", {\n      encoding: \"utf-8\"\n    }))));\n    return new NodeWallet(payer);\n  }\n\n  async signTransaction(tx) {\n    tx.partialSign(this.payer);\n    return tx;\n  }\n\n  async signAllTransactions(txs) {\n    return txs.map(t => {\n      t.partialSign(this.payer);\n      return t;\n    });\n  }\n\n  get publicKey() {\n    return this.payer.publicKey;\n  }\n\n}","map":{"version":3,"sources":["../../src/provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Connection, Account, sendAndConfirmRawTransaction, } from \"@solana/web3.js\";\nexport default class Provider {\n    constructor(connection, wallet, opts) {\n        this.connection = connection;\n        this.wallet = wallet;\n        this.opts = opts;\n    }\n    static defaultOptions() {\n        return {\n            preflightCommitment: \"recent\",\n            commitment: \"recent\",\n        };\n    }\n    // Node only api.\n    static local(url, opts) {\n        opts = opts || Provider.defaultOptions();\n        const connection = new Connection(url || \"http://localhost:8899\", opts.preflightCommitment);\n        const wallet = NodeWallet.local();\n        return new Provider(connection, wallet, opts);\n    }\n    // Node only api.\n    static env() {\n        const process = require(\"process\");\n        const url = process.env.ANCHOR_PROVIDER_URL;\n        if (url === undefined) {\n            throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n        }\n        const options = Provider.defaultOptions();\n        const connection = new Connection(url, options.commitment);\n        const wallet = NodeWallet.local();\n        return new Provider(connection, wallet, options);\n    }\n    async send(tx, signers, opts) {\n        if (signers === undefined) {\n            signers = [];\n        }\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const signerKps = signers.filter((s) => s !== undefined);\n        const signerPubkeys = [this.wallet.publicKey].concat(signerKps.map((s) => s.publicKey));\n        tx.setSigners(...signerPubkeys);\n        tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n        await this.wallet.signTransaction(tx);\n        signerKps.forEach((kp) => {\n            tx.partialSign(kp);\n        });\n        const rawTx = tx.serialize();\n        const txId = await sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n        return txId;\n    }\n    async sendAll(reqs, opts) {\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n        let txs = reqs.map((r) => {\n            let tx = r.tx;\n            let signers = r.signers;\n            if (signers === undefined) {\n                signers = [];\n            }\n            const signerKps = signers.filter((s) => s !== undefined);\n            const signerPubkeys = [this.wallet.publicKey].concat(signerKps.map((s) => s.publicKey));\n            tx.setSigners(...signerPubkeys);\n            tx.recentBlockhash = blockhash.blockhash;\n            signerKps.forEach((kp) => {\n                tx.partialSign(kp);\n            });\n            return tx;\n        });\n        const signedTxs = await this.wallet.signAllTransactions(txs);\n        const sigs = [];\n        for (let k = 0; k < txs.length; k += 1) {\n            const tx = signedTxs[k];\n            const rawTx = tx.serialize();\n            sigs.push(await sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n        }\n        return sigs;\n    }\n}\nexport class NodeWallet {\n    constructor(payer) {\n        this.payer = payer;\n    }\n    static local() {\n        const payer = new Account(Buffer.from(JSON.parse(require(\"fs\").readFileSync(require(\"os\").homedir() + \"/.config/solana/id.json\", {\n            encoding: \"utf-8\",\n        }))));\n        return new NodeWallet(payer);\n    }\n    async signTransaction(tx) {\n        tx.partialSign(this.payer);\n        return tx;\n    }\n    async signAllTransactions(txs) {\n        return txs.map((t) => {\n            t.partialSign(this.payer);\n            return t;\n        });\n    }\n    get publicKey() {\n        return this.payer.publicKey;\n    }\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}